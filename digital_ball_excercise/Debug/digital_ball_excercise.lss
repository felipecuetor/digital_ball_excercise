
digital_ball_excercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00001ca8  00001d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800098  00800098  00001d74  2**0
                  ALLOC
  3 .debug_aranges 00000168  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000412  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b3  00000000  00000000  000022ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fd  00000000  00000000  000035a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001198  00000000  00000000  00003b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00004d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f9  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d2f  00000000  00000000  000054a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (i = 0; i < 8; i++)
	display[i] = im[i];
}
// ************************** fijar Pixel ***************************************
void set_pixel(uint8_t r, uint8_t c, uint8_t value)
{
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
}
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	39 cb       	rjmp	.-2446   	; 0xfffff686 <__eeprom_end+0xff7ef686>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 ea       	ldi	r30, 0xA8	; 168
      3a:	fc e1       	ldi	r31, 0x1C	; 28
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a8 39       	cpi	r26, 0x98	; 152
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	10 e0       	ldi	r17, 0x00	; 0
      4a:	a8 e9       	ldi	r26, 0x98	; 152
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3d       	cpi	r26, 0xD8	; 216
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	20 d1       	rcall	.+576    	; 0x29a <main>
      5a:	24 ce       	rjmp	.-952    	; 0xfffffca4 <__eeprom_end+0xff7efca4>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <update_now>:
};

//--------definición funciones del sistema ---------------------------------

// ********** Funcion enviar por SPI ***************************************
void update_now(int x, int y){
      5e:	9c 01       	movw	r18, r24
	uint8_t empty = 0b00000000;
	now[0] = empty;
      60:	ad e9       	ldi	r26, 0x9D	; 157
      62:	b0 e0       	ldi	r27, 0x00	; 0
      64:	fd 01       	movw	r30, r26
      66:	11 92       	st	Z+, r1
	now[1] = empty;
      68:	10 82       	st	Z, r1
	now[2] = empty;
      6a:	12 96       	adiw	r26, 0x02	; 2
      6c:	1c 92       	st	X, r1
      6e:	12 97       	sbiw	r26, 0x02	; 2
	now[3] = empty;
      70:	13 96       	adiw	r26, 0x03	; 3
      72:	1c 92       	st	X, r1
      74:	13 97       	sbiw	r26, 0x03	; 3
	now[4] = empty;
      76:	14 96       	adiw	r26, 0x04	; 4
      78:	1c 92       	st	X, r1
      7a:	14 97       	sbiw	r26, 0x04	; 4
	now[5] = empty;
      7c:	15 96       	adiw	r26, 0x05	; 5
      7e:	1c 92       	st	X, r1
      80:	15 97       	sbiw	r26, 0x05	; 5
	now[6] = empty;
      82:	16 96       	adiw	r26, 0x06	; 6
      84:	1c 92       	st	X, r1
	now[7] = empty;
	
	row = 0b10000000;
      86:	80 e8       	ldi	r24, 0x80	; 128
      88:	80 93 c9 00 	sts	0x00C9, r24
	rowTime = 0b11111111;
      8c:	8f ef       	ldi	r24, 0xFF	; 255
      8e:	80 93 c8 00 	sts	0x00C8, r24
	if (x==1)
      92:	21 30       	cpi	r18, 0x01	; 1
      94:	31 05       	cpc	r19, r1
      96:	81 f1       	breq	.+96     	; 0xf8 <update_now+0x9a>
	{
		row = 0b10000000;
	}
	else if (x==2){
      98:	22 30       	cpi	r18, 0x02	; 2
      9a:	31 05       	cpc	r19, r1
      9c:	21 f4       	brne	.+8      	; 0xa6 <update_now+0x48>
		row = 0b01000000;
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	80 93 c9 00 	sts	0x00C9, r24
      a4:	29 c0       	rjmp	.+82     	; 0xf8 <update_now+0x9a>
	}
	else if (x==3){
      a6:	23 30       	cpi	r18, 0x03	; 3
      a8:	31 05       	cpc	r19, r1
      aa:	21 f4       	brne	.+8      	; 0xb4 <update_now+0x56>
		row = 0b00100000;
      ac:	80 e2       	ldi	r24, 0x20	; 32
      ae:	80 93 c9 00 	sts	0x00C9, r24
      b2:	22 c0       	rjmp	.+68     	; 0xf8 <update_now+0x9a>
	}
	else if (x==4){
      b4:	24 30       	cpi	r18, 0x04	; 4
      b6:	31 05       	cpc	r19, r1
      b8:	21 f4       	brne	.+8      	; 0xc2 <update_now+0x64>
		row = 0b00010000;
      ba:	80 e1       	ldi	r24, 0x10	; 16
      bc:	80 93 c9 00 	sts	0x00C9, r24
      c0:	1b c0       	rjmp	.+54     	; 0xf8 <update_now+0x9a>
	}
	else if (x==5){
      c2:	25 30       	cpi	r18, 0x05	; 5
      c4:	31 05       	cpc	r19, r1
      c6:	21 f4       	brne	.+8      	; 0xd0 <update_now+0x72>
		row = 0b00001000;
      c8:	88 e0       	ldi	r24, 0x08	; 8
      ca:	80 93 c9 00 	sts	0x00C9, r24
      ce:	14 c0       	rjmp	.+40     	; 0xf8 <update_now+0x9a>
	}
	else if (x==6){
      d0:	26 30       	cpi	r18, 0x06	; 6
      d2:	31 05       	cpc	r19, r1
      d4:	21 f4       	brne	.+8      	; 0xde <update_now+0x80>
		row = 0b00000100;
      d6:	84 e0       	ldi	r24, 0x04	; 4
      d8:	80 93 c9 00 	sts	0x00C9, r24
      dc:	0d c0       	rjmp	.+26     	; 0xf8 <update_now+0x9a>
	}
	else if (x==7){
      de:	27 30       	cpi	r18, 0x07	; 7
      e0:	31 05       	cpc	r19, r1
      e2:	21 f4       	brne	.+8      	; 0xec <update_now+0x8e>
		row = 0b00000010;
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	80 93 c9 00 	sts	0x00C9, r24
      ea:	06 c0       	rjmp	.+12     	; 0xf8 <update_now+0x9a>
	}
	else if (x==8){
      ec:	28 30       	cpi	r18, 0x08	; 8
      ee:	31 05       	cpc	r19, r1
      f0:	19 f4       	brne	.+6      	; 0xf8 <update_now+0x9a>
		row = 0b00000001;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 c9 00 	sts	0x00C9, r24
	}
	
	if(time>9000){
      f8:	80 91 9b 00 	lds	r24, 0x009B
      fc:	90 91 9c 00 	lds	r25, 0x009C
     100:	23 e2       	ldi	r18, 0x23	; 35
     102:	89 32       	cpi	r24, 0x29	; 41
     104:	92 07       	cpc	r25, r18
     106:	1c f0       	brlt	.+6      	; 0x10e <update_now+0xb0>
		rowTime = 0b00000000;
     108:	10 92 c8 00 	sts	0x00C8, r1
     10c:	3e c0       	rjmp	.+124    	; 0x18a <update_now+0x12c>
	}
	else if(time>8000){
     10e:	2f e1       	ldi	r18, 0x1F	; 31
     110:	81 34       	cpi	r24, 0x41	; 65
     112:	92 07       	cpc	r25, r18
     114:	24 f0       	brlt	.+8      	; 0x11e <update_now+0xc0>
		rowTime = 0b10000000;
     116:	80 e8       	ldi	r24, 0x80	; 128
     118:	80 93 c8 00 	sts	0x00C8, r24
     11c:	36 c0       	rjmp	.+108    	; 0x18a <update_now+0x12c>
	}
	else if(time>7000){
     11e:	2b e1       	ldi	r18, 0x1B	; 27
     120:	89 35       	cpi	r24, 0x59	; 89
     122:	92 07       	cpc	r25, r18
     124:	24 f0       	brlt	.+8      	; 0x12e <update_now+0xd0>
		rowTime = 0b11000000;
     126:	80 ec       	ldi	r24, 0xC0	; 192
     128:	80 93 c8 00 	sts	0x00C8, r24
     12c:	2e c0       	rjmp	.+92     	; 0x18a <update_now+0x12c>
	}
	else if(time>6000){
     12e:	27 e1       	ldi	r18, 0x17	; 23
     130:	81 37       	cpi	r24, 0x71	; 113
     132:	92 07       	cpc	r25, r18
     134:	24 f0       	brlt	.+8      	; 0x13e <update_now+0xe0>
		rowTime = 0b11100000;
     136:	80 ee       	ldi	r24, 0xE0	; 224
     138:	80 93 c8 00 	sts	0x00C8, r24
     13c:	26 c0       	rjmp	.+76     	; 0x18a <update_now+0x12c>
	}
	else if(time>5000){
     13e:	23 e1       	ldi	r18, 0x13	; 19
     140:	89 38       	cpi	r24, 0x89	; 137
     142:	92 07       	cpc	r25, r18
     144:	24 f0       	brlt	.+8      	; 0x14e <update_now+0xf0>
		rowTime = 0b11110000;
     146:	80 ef       	ldi	r24, 0xF0	; 240
     148:	80 93 c8 00 	sts	0x00C8, r24
     14c:	1e c0       	rjmp	.+60     	; 0x18a <update_now+0x12c>
	}
	else if(time>4000){
     14e:	2f e0       	ldi	r18, 0x0F	; 15
     150:	81 3a       	cpi	r24, 0xA1	; 161
     152:	92 07       	cpc	r25, r18
     154:	24 f0       	brlt	.+8      	; 0x15e <update_now+0x100>
		rowTime = 0b11111000;
     156:	88 ef       	ldi	r24, 0xF8	; 248
     158:	80 93 c8 00 	sts	0x00C8, r24
     15c:	16 c0       	rjmp	.+44     	; 0x18a <update_now+0x12c>
	}
	else if(time>3000){
     15e:	2b e0       	ldi	r18, 0x0B	; 11
     160:	89 3b       	cpi	r24, 0xB9	; 185
     162:	92 07       	cpc	r25, r18
     164:	24 f0       	brlt	.+8      	; 0x16e <update_now+0x110>
		rowTime = 0b11111100;
     166:	8c ef       	ldi	r24, 0xFC	; 252
     168:	80 93 c8 00 	sts	0x00C8, r24
     16c:	0e c0       	rjmp	.+28     	; 0x18a <update_now+0x12c>
	}
	else if(time>2000){
     16e:	27 e0       	ldi	r18, 0x07	; 7
     170:	81 3d       	cpi	r24, 0xD1	; 209
     172:	92 07       	cpc	r25, r18
     174:	24 f0       	brlt	.+8      	; 0x17e <update_now+0x120>
		rowTime = 0b11111110;
     176:	8e ef       	ldi	r24, 0xFE	; 254
     178:	80 93 c8 00 	sts	0x00C8, r24
     17c:	06 c0       	rjmp	.+12     	; 0x18a <update_now+0x12c>
	}
	else if(time>1000){
     17e:	89 5e       	subi	r24, 0xE9	; 233
     180:	93 40       	sbci	r25, 0x03	; 3
     182:	1c f0       	brlt	.+6      	; 0x18a <update_now+0x12c>
		rowTime = 0b11111111;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 c8 00 	sts	0x00C8, r24
	}

	now[y-1] = row;
     18a:	ad e9       	ldi	r26, 0x9D	; 157
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	fd 01       	movw	r30, r26
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	80 91 c9 00 	lds	r24, 0x00C9
     19a:	80 83       	st	Z, r24
	now[7] = rowTime;
     19c:	80 91 c8 00 	lds	r24, 0x00C8
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	8c 93       	st	X, r24
}
     1a4:	08 95       	ret

000001a6 <spi_send>:

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
     1a6:	28 2f       	mov	r18, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
	{
		CLK_LOW();
     1aa:	e2 e3       	ldi	r30, 0x32	; 50
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 7d       	andi	r24, 0xDF	; 223
     1b2:	80 83       	st	Z, r24
		if (data & 0x80)
     1b4:	22 23       	and	r18, r18
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <spi_send+0x1a>
			DATA_HIGH();
     1b8:	80 81       	ld	r24, Z
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	80 83       	st	Z, r24
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <spi_send+0x20>
		else
			DATA_LOW();
     1c0:	80 81       	ld	r24, Z
     1c2:	87 7f       	andi	r24, 0xF7	; 247
     1c4:	80 83       	st	Z, r24
			CLK_HIGH();
     1c6:	80 81       	ld	r24, Z
     1c8:	80 62       	ori	r24, 0x20	; 32
     1ca:	80 83       	st	Z, r24
}

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
     1cc:	9f 5f       	subi	r25, 0xFF	; 255
     1ce:	98 30       	cpi	r25, 0x08	; 8
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <spi_send+0x30>
     1d2:	22 0f       	add	r18, r18
     1d4:	ec cf       	rjmp	.-40     	; 0x1ae <spi_send+0x8>
     1d6:	08 95       	ret

000001d8 <max7219_writec>:
	}
	
}
// ********** Escribir en la matriz ***************************************
void max7219_writec(uint8_t high_byte, uint8_t low_byte)
{
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	f6 2e       	mov	r15, r22
	CS_LOW();
     1e0:	02 e3       	ldi	r16, 0x32	; 50
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	f8 01       	movw	r30, r16
     1e6:	90 81       	ld	r25, Z
     1e8:	9f 7e       	andi	r25, 0xEF	; 239
     1ea:	90 83       	st	Z, r25
	spi_send(high_byte);
     1ec:	dc df       	rcall	.-72     	; 0x1a6 <spi_send>
	spi_send(low_byte);
     1ee:	8f 2d       	mov	r24, r15
     1f0:	da df       	rcall	.-76     	; 0x1a6 <spi_send>
	CS_HIGH();
     1f2:	f8 01       	movw	r30, r16
     1f4:	80 81       	ld	r24, Z
     1f6:	80 61       	ori	r24, 0x10	; 16
     1f8:	80 83       	st	Z, r24
}
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	ff 90       	pop	r15
     200:	08 95       	ret

00000202 <max7219_clear>:
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
     202:	1f 93       	push	r17
     204:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, 0);
     206:	1f 5f       	subi	r17, 0xFF	; 255
     208:	81 2f       	mov	r24, r17
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	e5 df       	rcall	.-54     	; 0x1d8 <max7219_writec>
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     20e:	18 30       	cpi	r17, 0x08	; 8
     210:	d1 f7       	brne	.-12     	; 0x206 <max7219_clear+0x4>
	{
		max7219_writec(i+1, 0);
	}
}
     212:	1f 91       	pop	r17
     214:	08 95       	ret

00000216 <max7219_init>:
// ********** Inicializar la matriz ***************************************
void max7219_init(void)
{
	INIT_PORT();
     216:	e1 e3       	ldi	r30, 0x31	; 49
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	88 63       	ori	r24, 0x38	; 56
     21e:	80 83       	st	Z, r24
	// Decode mode: none
	max7219_writec(0x04, 0);
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	d9 df       	rcall	.-78     	; 0x1d8 <max7219_writec>
	// Intensity: 3 (0-15)
	max7219_writec(0x0A, 1);
     226:	8a e0       	ldi	r24, 0x0A	; 10
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	d6 df       	rcall	.-84     	; 0x1d8 <max7219_writec>
	// Scan limit: All "digits" (rows) on
	max7219_writec(0x0B, 7);
     22c:	8b e0       	ldi	r24, 0x0B	; 11
     22e:	67 e0       	ldi	r22, 0x07	; 7
     230:	d3 df       	rcall	.-90     	; 0x1d8 <max7219_writec>
	// Shutdown register: Display on
	max7219_writec(0x0C, 1);
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	d0 df       	rcall	.-96     	; 0x1d8 <max7219_writec>
	// Display test: off
	max7219_writec(0x0F, 0);
     238:	8f e0       	ldi	r24, 0x0F	; 15
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	cd df       	rcall	.-102    	; 0x1d8 <max7219_writec>
	max7219_clear();
     23e:	e1 df       	rcall	.-62     	; 0x202 <max7219_clear>
}
     240:	08 95       	ret

00000242 <update_display>:
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	c0 e0       	ldi	r28, 0x00	; 0
     24c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, display[i]);
     24e:	00 ec       	ldi	r16, 0xC0	; 192
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	f8 01       	movw	r30, r16
     254:	ec 0f       	add	r30, r28
     256:	fd 1f       	adc	r31, r29
     258:	9e 01       	movw	r18, r28
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	82 2f       	mov	r24, r18
     25e:	60 81       	ld	r22, Z
     260:	bb df       	rcall	.-138    	; 0x1d8 <max7219_writec>
     262:	21 96       	adiw	r28, 0x01	; 1
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     264:	c8 30       	cpi	r28, 0x08	; 8
     266:	d1 05       	cpc	r29, r1
     268:	a1 f7       	brne	.-24     	; 0x252 <update_display+0x10>
	{
		max7219_writec(i+1, display[i]);
	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <image>:
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
     274:	bc 01       	movw	r22, r24
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	display[i] = im[i];
     27a:	40 ec       	ldi	r20, 0xC0	; 192
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	da 01       	movw	r26, r20
     280:	a2 0f       	add	r26, r18
     282:	b3 1f       	adc	r27, r19
     284:	fb 01       	movw	r30, r22
     286:	e2 0f       	add	r30, r18
     288:	f3 1f       	adc	r31, r19
     28a:	80 81       	ld	r24, Z
     28c:	8c 93       	st	X, r24
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	3f 4f       	sbci	r19, 0xFF	; 255
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     292:	28 30       	cpi	r18, 0x08	; 8
     294:	31 05       	cpc	r19, r1
     296:	99 f7       	brne	.-26     	; 0x27e <image+0xa>
	display[i] = im[i];
}
     298:	08 95       	ret

0000029a <main>:
}


// ------------ Inicio del programa ----------------------------------------
int main(void)
{
     29a:	2f 92       	push	r2
     29c:	3f 92       	push	r3
     29e:	4f 92       	push	r4
     2a0:	5f 92       	push	r5
     2a2:	6f 92       	push	r6
     2a4:	7f 92       	push	r7
     2a6:	8f 92       	push	r8
     2a8:	9f 92       	push	r9
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	a4 97       	sbiw	r28, 0x24	; 36
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
		DDRB = 0x01;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	87 bb       	out	0x17, r24	; 23
		int16_t ax = 0;
     2d2:	1a 82       	std	Y+2, r1	; 0x02
     2d4:	19 82       	std	Y+1, r1	; 0x01
		int16_t ay = 0;
     2d6:	1c 82       	std	Y+4, r1	; 0x04
     2d8:	1b 82       	std	Y+3, r1	; 0x03
		int16_t az = 0;
     2da:	1e 82       	std	Y+6, r1	; 0x06
     2dc:	1d 82       	std	Y+5, r1	; 0x05
		int16_t gx = 0;
     2de:	18 86       	std	Y+8, r1	; 0x08
     2e0:	1f 82       	std	Y+7, r1	; 0x07
		int16_t gy = 0;
     2e2:	1a 86       	std	Y+10, r1	; 0x0a
     2e4:	19 86       	std	Y+9, r1	; 0x09
		int16_t gz = 0;
     2e6:	1c 86       	std	Y+12, r1	; 0x0c
     2e8:	1b 86       	std	Y+11, r1	; 0x0b
		double axg = 0;
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	8d 87       	std	Y+13, r24	; 0x0d
     2f4:	9e 87       	std	Y+14, r25	; 0x0e
     2f6:	af 87       	std	Y+15, r26	; 0x0f
     2f8:	b8 8b       	std	Y+16, r27	; 0x10
		double ayg = 0;
     2fa:	89 8b       	std	Y+17, r24	; 0x11
     2fc:	9a 8b       	std	Y+18, r25	; 0x12
     2fe:	ab 8b       	std	Y+19, r26	; 0x13
     300:	bc 8b       	std	Y+20, r27	; 0x14
		double azg = 0;
     302:	8d 8b       	std	Y+21, r24	; 0x15
     304:	9e 8b       	std	Y+22, r25	; 0x16
     306:	af 8b       	std	Y+23, r26	; 0x17
     308:	b8 8f       	std	Y+24, r27	; 0x18
		double gxds = 0;
     30a:	89 8f       	std	Y+25, r24	; 0x19
     30c:	9a 8f       	std	Y+26, r25	; 0x1a
     30e:	ab 8f       	std	Y+27, r26	; 0x1b
     310:	bc 8f       	std	Y+28, r27	; 0x1c
		double gyds = 0;
     312:	8d 8f       	std	Y+29, r24	; 0x1d
     314:	9e 8f       	std	Y+30, r25	; 0x1e
     316:	af 8f       	std	Y+31, r26	; 0x1f
     318:	b8 a3       	std	Y+32, r27	; 0x20
		double gzds = 0;
     31a:	89 a3       	std	Y+33, r24	; 0x21
     31c:	9a a3       	std	Y+34, r25	; 0x22
     31e:	ab a3       	std	Y+35, r26	; 0x23
     320:	bc a3       	std	Y+36, r27	; 0x24

		//init interrupt
		sei();
     322:	78 94       	sei
		//init mpu6050
		mpu6050_init();
     324:	59 d8       	rcall	.-3918   	; 0xfffff3d8 <__eeprom_end+0xff7ef3d8>
     326:	84 ef       	ldi	r24, 0xF4	; 244
     328:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     32a:	20 e9       	ldi	r18, 0x90	; 144
     32c:	31 e0       	ldi	r19, 0x01	; 1
     32e:	f9 01       	movw	r30, r18
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <main+0x96>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     336:	d9 f7       	brne	.-10     	; 0x32e <main+0x94>
		_delay_ms(50);
	
	max7219_init(); // llamado de la funcion "max7219_init"
     338:	6e df       	rcall	.-292    	; 0x216 <max7219_init>
	update_now(x,y);
     33a:	60 91 62 00 	lds	r22, 0x0062
     33e:	70 91 63 00 	lds	r23, 0x0063
     342:	80 91 60 00 	lds	r24, 0x0060
     346:	90 91 61 00 	lds	r25, 0x0061
     34a:	89 de       	rcall	.-750    	; 0x5e <update_now>
	image(start);  // carga la imagen a visualizar
     34c:	88 e6       	ldi	r24, 0x68	; 104
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	91 df       	rcall	.-222    	; 0x274 <image>
	update_display();
     352:	77 df       	rcall	.-274    	; 0x242 <update_display>
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     354:	0f 2e       	mov	r0, r31
     356:	f0 e3       	ldi	r31, 0x30	; 48
     358:	cf 2e       	mov	r12, r31
     35a:	dd 24       	eor	r13, r13
     35c:	f0 2d       	mov	r31, r0
     35e:	aa 24       	eor	r10, r10
     360:	bb 24       	eor	r11, r11
     362:	a3 94       	inc	r10
			update_display();
			button7_down = 0;
		}
		
		
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     364:	3e 01       	movw	r6, r28
     366:	08 94       	sec
     368:	61 1c       	adc	r6, r1
     36a:	71 1c       	adc	r7, r1
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     36c:	0f 2e       	mov	r0, r31
     36e:	fd e0       	ldi	r31, 0x0D	; 13
     370:	4f 2e       	mov	r4, r31
     372:	55 24       	eor	r5, r5
     374:	f0 2d       	mov	r31, r0
     376:	4c 0e       	add	r4, r28
     378:	5d 1e       	adc	r5, r29
     37a:	0f 2e       	mov	r0, r31
     37c:	f1 e1       	ldi	r31, 0x11	; 17
     37e:	2f 2e       	mov	r2, r31
     380:	33 24       	eor	r3, r3
     382:	f0 2d       	mov	r31, r0
     384:	2c 0e       	add	r2, r28
     386:	3d 1e       	adc	r3, r29
     388:	0f 2e       	mov	r0, r31
     38a:	f0 e9       	ldi	r31, 0x90	; 144
     38c:	8f 2e       	mov	r8, r31
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	9f 2e       	mov	r9, r31
     392:	f0 2d       	mov	r31, r0
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     394:	f6 01       	movw	r30, r12
     396:	80 81       	ld	r24, Z
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	00 24       	eor	r0, r0
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	00 1c       	adc	r0, r0
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	00 1c       	adc	r0, r0
     3a8:	89 2f       	mov	r24, r25
     3aa:	90 2d       	mov	r25, r0
     3ac:	8a 25       	eor	r24, r10
     3ae:	9b 25       	eor	r25, r11
     3b0:	98 2f       	mov	r25, r24
     3b2:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     3b4:	80 91 90 00 	lds	r24, 0x0090
     3b8:	98 17       	cp	r25, r24
     3ba:	89 f0       	breq	.+34     	; 0x3de <main+0x144>
		// Button state is about to be changed, increase counter
		count++;
     3bc:	80 91 a5 00 	lds	r24, 0x00A5
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
     3c2:	80 93 a5 00 	sts	0x00A5, r24
		if (count >= 4) {
     3c6:	84 30       	cpi	r24, 0x04	; 4
     3c8:	60 f0       	brcs	.+24     	; 0x3e2 <main+0x148>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     3ca:	90 93 90 00 	sts	0x0090, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     3ce:	99 23       	and	r25, r25
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <main+0x13e>
				button6_down = 1;
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
     3d4:	f0 93 98 00 	sts	0x0098, r31
			}
			count = 0;
     3d8:	10 92 a5 00 	sts	0x00A5, r1
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <main+0x148>
		}
		} else {
		// Reset counter
		count = 0;
     3de:	10 92 a5 00 	sts	0x00A5, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON7_MASK) != 0;
     3e2:	f6 01       	movw	r30, r12
     3e4:	80 81       	ld	r24, Z
     3e6:	88 23       	and	r24, r24
     3e8:	80 95       	com	r24
     3ea:	98 2f       	mov	r25, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	99 27       	eor	r25, r25
     3f0:	99 1f       	adc	r25, r25
	if (current_state != button_state) {
     3f2:	80 91 91 00 	lds	r24, 0x0091
     3f6:	98 17       	cp	r25, r24
     3f8:	89 f0       	breq	.+34     	; 0x41c <main+0x182>
		// Button state is about to be changed, increase counter
		count++;
     3fa:	80 91 a6 00 	lds	r24, 0x00A6
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 a6 00 	sts	0x00A6, r24
		if (count >= 4) {
     404:	84 30       	cpi	r24, 0x04	; 4
     406:	60 f0       	brcs	.+24     	; 0x420 <main+0x186>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     408:	90 93 91 00 	sts	0x0091, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     40c:	99 23       	and	r25, r25
     40e:	19 f0       	breq	.+6      	; 0x416 <main+0x17c>
				button7_down = 1;
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	f0 93 99 00 	sts	0x0099, r31
			}
			count = 0;
     416:	10 92 a6 00 	sts	0x00A6, r1
     41a:	02 c0       	rjmp	.+4      	; 0x420 <main+0x186>
		}
		} else {
		// Reset counter
		count = 0;
     41c:	10 92 a6 00 	sts	0x00A6, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON2_MASK) != 0;
     420:	f6 01       	movw	r30, r12
     422:	80 81       	ld	r24, Z
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	96 95       	lsr	r25
     428:	87 95       	ror	r24
     42a:	96 95       	lsr	r25
     42c:	87 95       	ror	r24
     42e:	8a 25       	eor	r24, r10
     430:	9b 25       	eor	r25, r11
     432:	98 2f       	mov	r25, r24
     434:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     436:	80 91 92 00 	lds	r24, 0x0092
     43a:	98 17       	cp	r25, r24
     43c:	89 f0       	breq	.+34     	; 0x460 <__stack+0x1>
		// Button state is about to be changed, increase counter
		count++;
     43e:	80 91 a7 00 	lds	r24, 0x00A7
     442:	8f 5f       	subi	r24, 0xFF	; 255
     444:	80 93 a7 00 	sts	0x00A7, r24
		if (count >= 100) {
     448:	84 36       	cpi	r24, 0x64	; 100
     44a:	60 f0       	brcs	.+24     	; 0x464 <__stack+0x5>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     44c:	90 93 92 00 	sts	0x0092, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     450:	99 23       	and	r25, r25
     452:	19 f0       	breq	.+6      	; 0x45a <main+0x1c0>
				button2_down = 1;
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	f0 93 9a 00 	sts	0x009A, r31
			}
			count = 0;
     45a:	10 92 a7 00 	sts	0x00A7, r1
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__stack+0x5>
		}
		} else {
		// Reset counter
		count = 0;
     460:	10 92 a7 00 	sts	0x00A7, r1
	while(1)  // loop infinito
	{
		debouncebtn6();
		debouncebtn7();
		debouncebtn2();
		if(button6_down)
     464:	80 91 98 00 	lds	r24, 0x0098
     468:	88 23       	and	r24, r24
     46a:	49 f1       	breq	.+82     	; 0x4be <__stack+0x5f>
		{
			if(state==0){
     46c:	80 91 66 00 	lds	r24, 0x0066
     470:	90 91 67 00 	lds	r25, 0x0067
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	41 f4       	brne	.+16     	; 0x488 <__stack+0x29>
				image(start);  // carga la imagen a visualizar
     478:	88 e6       	ldi	r24, 0x68	; 104
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	fb de       	rcall	.-522    	; 0x274 <image>
				state = 1;
     47e:	b0 92 67 00 	sts	0x0067, r11
     482:	a0 92 66 00 	sts	0x0066, r10
     486:	18 c0       	rjmp	.+48     	; 0x4b8 <__stack+0x59>
			}
			else if(state == 1){
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	91 05       	cpc	r25, r1
     48c:	51 f4       	brne	.+20     	; 0x4a2 <__stack+0x43>
				image(menuLevel1);
     48e:	80 e7       	ldi	r24, 0x70	; 112
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	f0 de       	rcall	.-544    	; 0x274 <image>
				state = 2;
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	90 93 67 00 	sts	0x0067, r25
     49c:	80 93 66 00 	sts	0x0066, r24
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__stack+0x59>
			}
			else if(state == 2){
     4a2:	02 97       	sbiw	r24, 0x02	; 2
     4a4:	49 f4       	brne	.+18     	; 0x4b8 <__stack+0x59>
				image(now);
     4a6:	8d e9       	ldi	r24, 0x9D	; 157
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	e4 de       	rcall	.-568    	; 0x274 <image>
				state = 3;
     4ac:	e3 e0       	ldi	r30, 0x03	; 3
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	f0 93 67 00 	sts	0x0067, r31
     4b4:	e0 93 66 00 	sts	0x0066, r30
			}
			update_display();
     4b8:	c4 de       	rcall	.-632    	; 0x242 <update_display>
			button6_down = 0;
     4ba:	10 92 98 00 	sts	0x0098, r1
		}
		
		if(button7_down)
     4be:	80 91 99 00 	lds	r24, 0x0099
     4c2:	88 23       	and	r24, r24
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <__stack+0x69>
     4c6:	42 c0       	rjmp	.+132    	; 0x54c <__stack+0xed>
		{
			if(state!=2){
     4c8:	80 91 66 00 	lds	r24, 0x0066
     4cc:	90 91 67 00 	lds	r25, 0x0067
     4d0:	02 97       	sbiw	r24, 0x02	; 2
     4d2:	21 f0       	breq	.+8      	; 0x4dc <__stack+0x7d>
				image(start);
     4d4:	88 e6       	ldi	r24, 0x68	; 104
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	cd de       	rcall	.-614    	; 0x274 <image>
     4da:	11 c0       	rjmp	.+34     	; 0x4fe <__stack+0x9f>
			}
			else if(menu<4){
     4dc:	80 91 64 00 	lds	r24, 0x0064
     4e0:	90 91 65 00 	lds	r25, 0x0065
     4e4:	84 30       	cpi	r24, 0x04	; 4
     4e6:	91 05       	cpc	r25, r1
     4e8:	34 f4       	brge	.+12     	; 0x4f6 <__stack+0x97>
				menu = menu+1;
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	90 93 65 00 	sts	0x0065, r25
     4f0:	80 93 64 00 	sts	0x0064, r24
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__stack+0x9f>
			}
			else{
				menu = 1;
     4f6:	b0 92 65 00 	sts	0x0065, r11
     4fa:	a0 92 64 00 	sts	0x0064, r10
			}
			if(state==1){
     4fe:	80 91 66 00 	lds	r24, 0x0066
     502:	90 91 67 00 	lds	r25, 0x0067
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f0       	breq	.+60     	; 0x546 <__stack+0xe7>
			}
			else if(menu==1){image(menuLevel1);}
     50a:	80 91 64 00 	lds	r24, 0x0064
     50e:	90 91 65 00 	lds	r25, 0x0065
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	91 05       	cpc	r25, r1
     516:	21 f4       	brne	.+8      	; 0x520 <__stack+0xc1>
     518:	80 e7       	ldi	r24, 0x70	; 112
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	ab de       	rcall	.-682    	; 0x274 <image>
     51e:	13 c0       	rjmp	.+38     	; 0x546 <__stack+0xe7>
			else if(menu==2){image(menuLevel2);}
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	91 05       	cpc	r25, r1
     524:	21 f4       	brne	.+8      	; 0x52e <__stack+0xcf>
     526:	88 e7       	ldi	r24, 0x78	; 120
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	a4 de       	rcall	.-696    	; 0x274 <image>
     52c:	0c c0       	rjmp	.+24     	; 0x546 <__stack+0xe7>
			else if(menu==3){image(menuLevel3);}
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	91 05       	cpc	r25, r1
     532:	21 f4       	brne	.+8      	; 0x53c <__stack+0xdd>
     534:	80 e8       	ldi	r24, 0x80	; 128
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9d de       	rcall	.-710    	; 0x274 <image>
     53a:	05 c0       	rjmp	.+10     	; 0x546 <__stack+0xe7>
			else if(menu==4){image(menuLevel4);}
     53c:	04 97       	sbiw	r24, 0x04	; 4
     53e:	19 f4       	brne	.+6      	; 0x546 <__stack+0xe7>
     540:	88 e8       	ldi	r24, 0x88	; 136
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	97 de       	rcall	.-722    	; 0x274 <image>
			update_display();
     546:	7d de       	rcall	.-774    	; 0x242 <update_display>
			button7_down = 0;
     548:	10 92 99 00 	sts	0x0099, r1
		}
		
		
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     54c:	c3 01       	movw	r24, r6
     54e:	be 01       	movw	r22, r28
     550:	6d 5f       	subi	r22, 0xFD	; 253
     552:	7f 4f       	sbci	r23, 0xFF	; 255
     554:	ae 01       	movw	r20, r28
     556:	4b 5f       	subi	r20, 0xFB	; 251
     558:	5f 4f       	sbci	r21, 0xFF	; 255
     55a:	9e 01       	movw	r18, r28
     55c:	29 5f       	subi	r18, 0xF9	; 249
     55e:	3f 4f       	sbci	r19, 0xFF	; 255
     560:	8e 01       	movw	r16, r28
     562:	07 5f       	subi	r16, 0xF7	; 247
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	0f 2e       	mov	r0, r31
     568:	fb e0       	ldi	r31, 0x0B	; 11
     56a:	ef 2e       	mov	r14, r31
     56c:	ff 24       	eor	r15, r15
     56e:	f0 2d       	mov	r31, r0
     570:	ec 0e       	add	r14, r28
     572:	fd 1e       	adc	r15, r29
     574:	72 d5       	rcall	.+2788   	; 0x105a <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     576:	c2 01       	movw	r24, r4
     578:	b1 01       	movw	r22, r2
     57a:	ae 01       	movw	r20, r28
     57c:	4b 5e       	subi	r20, 0xEB	; 235
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
     580:	9e 01       	movw	r18, r28
     582:	27 5e       	subi	r18, 0xE7	; 231
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	8e 01       	movw	r16, r28
     588:	03 5e       	subi	r16, 0xE3	; 227
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
     58c:	0f 2e       	mov	r0, r31
     58e:	f1 e2       	ldi	r31, 0x21	; 33
     590:	ef 2e       	mov	r14, r31
     592:	ff 24       	eor	r15, r15
     594:	f0 2d       	mov	r31, r0
     596:	ec 0e       	add	r14, r28
     598:	fd 1e       	adc	r15, r29
     59a:	d9 d5       	rcall	.+2994   	; 0x114e <mpu6050_getConvData>
		if(state==3){
     59c:	80 91 66 00 	lds	r24, 0x0066
     5a0:	90 91 67 00 	lds	r25, 0x0067
     5a4:	03 97       	sbiw	r24, 0x03	; 3
     5a6:	09 f0       	breq	.+2      	; 0x5aa <__stack+0x14b>
     5a8:	f5 ce       	rjmp	.-534    	; 0x394 <main+0xfa>
			if(ayg<-0.3){
     5aa:	e9 88       	ldd	r14, Y+17	; 0x11
     5ac:	fa 88       	ldd	r15, Y+18	; 0x12
     5ae:	0b 89       	ldd	r16, Y+19	; 0x13
     5b0:	1c 89       	ldd	r17, Y+20	; 0x14
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	2a e9       	ldi	r18, 0x9A	; 154
     5b8:	39 e9       	ldi	r19, 0x99	; 153
     5ba:	49 e9       	ldi	r20, 0x99	; 153
     5bc:	5e eb       	ldi	r21, 0xBE	; 190
     5be:	96 d9       	rcall	.-3284   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     5c0:	88 23       	and	r24, r24
     5c2:	84 f4       	brge	.+32     	; 0x5e4 <__stack+0x185>
				PORTB = 0b00000001;
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	f8 bb       	out	0x18, r31	; 24
				if(y>1){
     5c8:	80 91 62 00 	lds	r24, 0x0062
     5cc:	90 91 63 00 	lds	r25, 0x0063
     5d0:	82 30       	cpi	r24, 0x02	; 2
     5d2:	91 05       	cpc	r25, r1
     5d4:	0c f4       	brge	.+2      	; 0x5d8 <__stack+0x179>
     5d6:	53 c0       	rjmp	.+166    	; 0x67e <__stack+0x21f>
					y=y-1;
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	90 93 63 00 	sts	0x0063, r25
     5de:	80 93 62 00 	sts	0x0062, r24
     5e2:	4d c0       	rjmp	.+154    	; 0x67e <__stack+0x21f>
				}
			}
			else if(ayg>0.3){
     5e4:	c8 01       	movw	r24, r16
     5e6:	b7 01       	movw	r22, r14
     5e8:	2a e9       	ldi	r18, 0x9A	; 154
     5ea:	39 e9       	ldi	r19, 0x99	; 153
     5ec:	49 e9       	ldi	r20, 0x99	; 153
     5ee:	5e e3       	ldi	r21, 0x3E	; 62
     5f0:	9b da       	rcall	.-2762   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     5f2:	18 16       	cp	r1, r24
     5f4:	7c f4       	brge	.+30     	; 0x614 <__stack+0x1b5>
				PORTB = 0b00000001;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	88 bb       	out	0x18, r24	; 24
				if(y<7){
     5fa:	80 91 62 00 	lds	r24, 0x0062
     5fe:	90 91 63 00 	lds	r25, 0x0063
     602:	87 30       	cpi	r24, 0x07	; 7
     604:	91 05       	cpc	r25, r1
     606:	dc f5       	brge	.+118    	; 0x67e <__stack+0x21f>
					y=y+1;
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	90 93 63 00 	sts	0x0063, r25
     60e:	80 93 62 00 	sts	0x0062, r24
     612:	35 c0       	rjmp	.+106    	; 0x67e <__stack+0x21f>
				}
			}
			else if(axg<-0.3){
     614:	ed 84       	ldd	r14, Y+13	; 0x0d
     616:	fe 84       	ldd	r15, Y+14	; 0x0e
     618:	0f 85       	ldd	r16, Y+15	; 0x0f
     61a:	18 89       	ldd	r17, Y+16	; 0x10
     61c:	c8 01       	movw	r24, r16
     61e:	b7 01       	movw	r22, r14
     620:	2a e9       	ldi	r18, 0x9A	; 154
     622:	39 e9       	ldi	r19, 0x99	; 153
     624:	49 e9       	ldi	r20, 0x99	; 153
     626:	5e eb       	ldi	r21, 0xBE	; 190
     628:	61 d9       	rcall	.-3390   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     62a:	88 23       	and	r24, r24
     62c:	7c f4       	brge	.+30     	; 0x64c <__stack+0x1ed>
				PORTB = 0b00000001;
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	98 bb       	out	0x18, r25	; 24
				if(x>1){
     632:	80 91 60 00 	lds	r24, 0x0060
     636:	90 91 61 00 	lds	r25, 0x0061
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	fc f0       	brlt	.+62     	; 0x67e <__stack+0x21f>
					x=x-1;
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	90 93 61 00 	sts	0x0061, r25
     646:	80 93 60 00 	sts	0x0060, r24
     64a:	19 c0       	rjmp	.+50     	; 0x67e <__stack+0x21f>
				}
			}
			else if(axg>0.3){
     64c:	c8 01       	movw	r24, r16
     64e:	b7 01       	movw	r22, r14
     650:	2a e9       	ldi	r18, 0x9A	; 154
     652:	39 e9       	ldi	r19, 0x99	; 153
     654:	49 e9       	ldi	r20, 0x99	; 153
     656:	5e e3       	ldi	r21, 0x3E	; 62
     658:	67 da       	rcall	.-2866   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     65a:	18 16       	cp	r1, r24
     65c:	7c f4       	brge	.+30     	; 0x67c <__stack+0x21d>
				PORTB = 0b00000001;
     65e:	e1 e0       	ldi	r30, 0x01	; 1
     660:	e8 bb       	out	0x18, r30	; 24
				if(x<8){
     662:	80 91 60 00 	lds	r24, 0x0060
     666:	90 91 61 00 	lds	r25, 0x0061
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	91 05       	cpc	r25, r1
     66e:	3c f4       	brge	.+14     	; 0x67e <__stack+0x21f>
					x=x+1;
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	90 93 61 00 	sts	0x0061, r25
     676:	80 93 60 00 	sts	0x0060, r24
     67a:	01 c0       	rjmp	.+2      	; 0x67e <__stack+0x21f>
				}
				
			}
			else{
				PORTB = 0b00000000;
     67c:	18 ba       	out	0x18, r1	; 24
     67e:	24 ec       	ldi	r18, 0xC4	; 196
     680:	39 e0       	ldi	r19, 0x09	; 9
     682:	c4 01       	movw	r24, r8
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <__stack+0x225>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     688:	21 50       	subi	r18, 0x01	; 1
     68a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68c:	d1 f7       	brne	.-12     	; 0x682 <__stack+0x223>
			}
			_delay_ms(250);
			time = time + 250;
     68e:	80 91 9b 00 	lds	r24, 0x009B
     692:	90 91 9c 00 	lds	r25, 0x009C
     696:	86 50       	subi	r24, 0x06	; 6
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	90 93 9c 00 	sts	0x009C, r25
     69e:	80 93 9b 00 	sts	0x009B, r24
			update_now(x,y);
     6a2:	60 91 62 00 	lds	r22, 0x0062
     6a6:	70 91 63 00 	lds	r23, 0x0063
     6aa:	80 91 60 00 	lds	r24, 0x0060
     6ae:	90 91 61 00 	lds	r25, 0x0061
     6b2:	d5 dc       	rcall	.-1622   	; 0x5e <update_now>
			image(now);
     6b4:	8d e9       	ldi	r24, 0x9D	; 157
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	dd dd       	rcall	.-1094   	; 0x274 <image>
			update_display();
     6ba:	c3 dd       	rcall	.-1146   	; 0x242 <update_display>
     6bc:	6b ce       	rjmp	.-810    	; 0x394 <main+0xfa>

000006be <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     6be:	2f 92       	push	r2
     6c0:	3f 92       	push	r3
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	cc 54       	subi	r28, 0x4C	; 76
     6e8:	d0 40       	sbci	r29, 0x00	; 0
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	6d a3       	std	Y+37, r22	; 0x25
     6f6:	7e a3       	std	Y+38, r23	; 0x26
     6f8:	8f a3       	std	Y+39, r24	; 0x27
     6fa:	98 a7       	std	Y+40, r25	; 0x28
     6fc:	29 a7       	std	Y+41, r18	; 0x29
     6fe:	3a a7       	std	Y+42, r19	; 0x2a
     700:	4b a7       	std	Y+43, r20	; 0x2b
     702:	5c a7       	std	Y+44, r21	; 0x2c
     704:	ed a6       	std	Y+45, r14	; 0x2d
     706:	fe a6       	std	Y+46, r15	; 0x2e
     708:	0f a7       	std	Y+47, r16	; 0x2f
     70a:	18 ab       	std	Y+48, r17	; 0x30
     70c:	a5 96       	adiw	r28, 0x25	; 37
     70e:	6c ac       	ldd	r6, Y+60	; 0x3c
     710:	7d ac       	ldd	r7, Y+61	; 0x3d
     712:	8e ac       	ldd	r8, Y+62	; 0x3e
     714:	9f ac       	ldd	r9, Y+63	; 0x3f
     716:	a5 97       	sbiw	r28, 0x25	; 37
     718:	a9 96       	adiw	r28, 0x29	; 41
     71a:	2c ac       	ldd	r2, Y+60	; 0x3c
     71c:	3d ac       	ldd	r3, Y+61	; 0x3d
     71e:	4e ac       	ldd	r4, Y+62	; 0x3e
     720:	5f ac       	ldd	r5, Y+63	; 0x3f
     722:	a9 97       	sbiw	r28, 0x29	; 41
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     724:	c6 01       	movw	r24, r12
     726:	b5 01       	movw	r22, r10
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	dd d8       	rcall	.-3654   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     732:	88 23       	and	r24, r24
     734:	99 f4       	brne	.+38     	; 0x75c <mpu6050_mahonyUpdate+0x9e>
     736:	c4 01       	movw	r24, r8
     738:	b3 01       	movw	r22, r6
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	d4 d8       	rcall	.-3672   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     744:	88 23       	and	r24, r24
     746:	51 f4       	brne	.+20     	; 0x75c <mpu6050_mahonyUpdate+0x9e>
     748:	c2 01       	movw	r24, r4
     74a:	b1 01       	movw	r22, r2
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	cb d8       	rcall	.-3690   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     756:	88 23       	and	r24, r24
     758:	09 f4       	brne	.+2      	; 0x75c <mpu6050_mahonyUpdate+0x9e>
     75a:	db c1       	rjmp	.+950    	; 0xb12 <mpu6050_mahonyUpdate+0x454>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     75c:	c6 01       	movw	r24, r12
     75e:	b5 01       	movw	r22, r10
     760:	a6 01       	movw	r20, r12
     762:	95 01       	movw	r18, r10
     764:	e5 d9       	rcall	.-3126   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     766:	7b 01       	movw	r14, r22
     768:	8c 01       	movw	r16, r24
     76a:	c4 01       	movw	r24, r8
     76c:	b3 01       	movw	r22, r6
     76e:	a4 01       	movw	r20, r8
     770:	93 01       	movw	r18, r6
     772:	de d9       	rcall	.-3140   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     774:	9b 01       	movw	r18, r22
     776:	ac 01       	movw	r20, r24
     778:	c8 01       	movw	r24, r16
     77a:	b7 01       	movw	r22, r14
     77c:	53 d8       	rcall	.-3930   	; 0xfffff824 <__eeprom_end+0xff7ef824>
     77e:	7b 01       	movw	r14, r22
     780:	8c 01       	movw	r16, r24
     782:	c2 01       	movw	r24, r4
     784:	b1 01       	movw	r22, r2
     786:	a2 01       	movw	r20, r4
     788:	91 01       	movw	r18, r2
     78a:	d2 d9       	rcall	.-3164   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c8 01       	movw	r24, r16
     792:	b7 01       	movw	r22, r14
     794:	47 d8       	rcall	.-3954   	; 0xfffff824 <__eeprom_end+0xff7ef824>
     796:	33 da       	rcall	.-2970   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
		ax /= norm;
     79c:	c6 01       	movw	r24, r12
     79e:	b5 01       	movw	r22, r10
     7a0:	a8 01       	movw	r20, r16
     7a2:	97 01       	movw	r18, r14
     7a4:	a7 d8       	rcall	.-3762   	; 0xfffff8f4 <__eeprom_end+0xff7ef8f4>
     7a6:	69 ab       	std	Y+49, r22	; 0x31
     7a8:	7a ab       	std	Y+50, r23	; 0x32
     7aa:	8b ab       	std	Y+51, r24	; 0x33
     7ac:	9c ab       	std	Y+52, r25	; 0x34
		ay /= norm;
     7ae:	c4 01       	movw	r24, r8
     7b0:	b3 01       	movw	r22, r6
     7b2:	a8 01       	movw	r20, r16
     7b4:	97 01       	movw	r18, r14
     7b6:	9e d8       	rcall	.-3780   	; 0xfffff8f4 <__eeprom_end+0xff7ef8f4>
     7b8:	6d ab       	std	Y+53, r22	; 0x35
     7ba:	7e ab       	std	Y+54, r23	; 0x36
     7bc:	8f ab       	std	Y+55, r24	; 0x37
     7be:	98 af       	std	Y+56, r25	; 0x38
		az /= norm;
     7c0:	c2 01       	movw	r24, r4
     7c2:	b1 01       	movw	r22, r2
     7c4:	a8 01       	movw	r20, r16
     7c6:	97 01       	movw	r18, r14
     7c8:	95 d8       	rcall	.-3798   	; 0xfffff8f4 <__eeprom_end+0xff7ef8f4>
     7ca:	69 af       	std	Y+57, r22	; 0x39
     7cc:	7a af       	std	Y+58, r23	; 0x3a
     7ce:	8b af       	std	Y+59, r24	; 0x3b
     7d0:	9c af       	std	Y+60, r25	; 0x3c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     7d2:	60 91 a8 00 	lds	r22, 0x00A8
     7d6:	70 91 a9 00 	lds	r23, 0x00A9
     7da:	80 91 aa 00 	lds	r24, 0x00AA
     7de:	90 91 ab 00 	lds	r25, 0x00AB
     7e2:	20 91 b0 00 	lds	r18, 0x00B0
     7e6:	30 91 b1 00 	lds	r19, 0x00B1
     7ea:	40 91 b2 00 	lds	r20, 0x00B2
     7ee:	50 91 b3 00 	lds	r21, 0x00B3
     7f2:	a0 90 93 00 	lds	r10, 0x0093
     7f6:	b0 90 94 00 	lds	r11, 0x0094
     7fa:	c0 90 95 00 	lds	r12, 0x0095
     7fe:	d0 90 96 00 	lds	r13, 0x0096
     802:	60 90 ac 00 	lds	r6, 0x00AC
     806:	70 90 ad 00 	lds	r7, 0x00AD
     80a:	80 90 ae 00 	lds	r8, 0x00AE
     80e:	90 90 af 00 	lds	r9, 0x00AF
     812:	8e d9       	rcall	.-3300   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     814:	7b 01       	movw	r14, r22
     816:	8c 01       	movw	r16, r24
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	a4 01       	movw	r20, r8
     81e:	93 01       	movw	r18, r6
     820:	87 d9       	rcall	.-3314   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c8 01       	movw	r24, r16
     828:	b7 01       	movw	r22, r14
     82a:	fb d7       	rcall	.+4086   	; 0x1822 <__subsf3>
     82c:	21 96       	adiw	r28, 0x01	; 1
     82e:	6c af       	std	Y+60, r22	; 0x3c
     830:	7d af       	std	Y+61, r23	; 0x3d
     832:	8e af       	std	Y+62, r24	; 0x3e
     834:	9f af       	std	Y+63, r25	; 0x3f
     836:	21 97       	sbiw	r28, 0x01	; 1
		halfvy = q0 * q1 + q2 * q3;
     838:	60 91 93 00 	lds	r22, 0x0093
     83c:	70 91 94 00 	lds	r23, 0x0094
     840:	80 91 95 00 	lds	r24, 0x0095
     844:	90 91 96 00 	lds	r25, 0x0096
     848:	20 91 a8 00 	lds	r18, 0x00A8
     84c:	30 91 a9 00 	lds	r19, 0x00A9
     850:	40 91 aa 00 	lds	r20, 0x00AA
     854:	50 91 ab 00 	lds	r21, 0x00AB
     858:	a0 90 ac 00 	lds	r10, 0x00AC
     85c:	b0 90 ad 00 	lds	r11, 0x00AD
     860:	c0 90 ae 00 	lds	r12, 0x00AE
     864:	d0 90 af 00 	lds	r13, 0x00AF
     868:	60 90 b0 00 	lds	r6, 0x00B0
     86c:	70 90 b1 00 	lds	r7, 0x00B1
     870:	80 90 b2 00 	lds	r8, 0x00B2
     874:	90 90 b3 00 	lds	r9, 0x00B3
     878:	5b d9       	rcall	.-3402   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     87a:	7b 01       	movw	r14, r22
     87c:	8c 01       	movw	r16, r24
     87e:	c6 01       	movw	r24, r12
     880:	b5 01       	movw	r22, r10
     882:	a4 01       	movw	r20, r8
     884:	93 01       	movw	r18, r6
     886:	54 d9       	rcall	.-3416   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	c8 01       	movw	r24, r16
     88e:	b7 01       	movw	r22, r14
     890:	c9 d7       	rcall	.+3986   	; 0x1824 <__addsf3>
     892:	1b 01       	movw	r2, r22
     894:	2c 01       	movw	r4, r24
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     896:	60 91 93 00 	lds	r22, 0x0093
     89a:	70 91 94 00 	lds	r23, 0x0094
     89e:	80 91 95 00 	lds	r24, 0x0095
     8a2:	90 91 96 00 	lds	r25, 0x0096
     8a6:	20 91 93 00 	lds	r18, 0x0093
     8aa:	30 91 94 00 	lds	r19, 0x0094
     8ae:	40 91 95 00 	lds	r20, 0x0095
     8b2:	50 91 96 00 	lds	r21, 0x0096
     8b6:	a0 90 b0 00 	lds	r10, 0x00B0
     8ba:	b0 90 b1 00 	lds	r11, 0x00B1
     8be:	c0 90 b2 00 	lds	r12, 0x00B2
     8c2:	d0 90 b3 00 	lds	r13, 0x00B3
     8c6:	60 90 b0 00 	lds	r6, 0x00B0
     8ca:	70 90 b1 00 	lds	r7, 0x00B1
     8ce:	80 90 b2 00 	lds	r8, 0x00B2
     8d2:	90 90 b3 00 	lds	r9, 0x00B3
     8d6:	2c d9       	rcall	.-3496   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	5f e3       	ldi	r21, 0x3F	; 63
     8e0:	a0 d7       	rcall	.+3904   	; 0x1822 <__subsf3>
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
     8e6:	c6 01       	movw	r24, r12
     8e8:	b5 01       	movw	r22, r10
     8ea:	a4 01       	movw	r20, r8
     8ec:	93 01       	movw	r18, r6
     8ee:	20 d9       	rcall	.-3520   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c8 01       	movw	r24, r16
     8f6:	b7 01       	movw	r22, r14
     8f8:	95 d7       	rcall	.+3882   	; 0x1824 <__addsf3>
     8fa:	5b 01       	movw	r10, r22
     8fc:	6c 01       	movw	r12, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     8fe:	6d a9       	ldd	r22, Y+53	; 0x35
     900:	7e a9       	ldd	r23, Y+54	; 0x36
     902:	8f a9       	ldd	r24, Y+55	; 0x37
     904:	98 ad       	ldd	r25, Y+56	; 0x38
     906:	a6 01       	movw	r20, r12
     908:	95 01       	movw	r18, r10
     90a:	12 d9       	rcall	.-3548   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     90c:	7b 01       	movw	r14, r22
     90e:	8c 01       	movw	r16, r24
     910:	69 ad       	ldd	r22, Y+57	; 0x39
     912:	7a ad       	ldd	r23, Y+58	; 0x3a
     914:	8b ad       	ldd	r24, Y+59	; 0x3b
     916:	9c ad       	ldd	r25, Y+60	; 0x3c
     918:	a2 01       	movw	r20, r4
     91a:	91 01       	movw	r18, r2
     91c:	09 d9       	rcall	.-3566   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	c8 01       	movw	r24, r16
     924:	b7 01       	movw	r22, r14
     926:	7d d7       	rcall	.+3834   	; 0x1822 <__subsf3>
     928:	25 96       	adiw	r28, 0x05	; 5
     92a:	6c af       	std	Y+60, r22	; 0x3c
     92c:	7d af       	std	Y+61, r23	; 0x3d
     92e:	8e af       	std	Y+62, r24	; 0x3e
     930:	9f af       	std	Y+63, r25	; 0x3f
     932:	25 97       	sbiw	r28, 0x05	; 5
		halfey = (az * halfvx - ax * halfvz);
     934:	69 ad       	ldd	r22, Y+57	; 0x39
     936:	7a ad       	ldd	r23, Y+58	; 0x3a
     938:	8b ad       	ldd	r24, Y+59	; 0x3b
     93a:	9c ad       	ldd	r25, Y+60	; 0x3c
     93c:	21 96       	adiw	r28, 0x01	; 1
     93e:	2c ad       	ldd	r18, Y+60	; 0x3c
     940:	3d ad       	ldd	r19, Y+61	; 0x3d
     942:	4e ad       	ldd	r20, Y+62	; 0x3e
     944:	5f ad       	ldd	r21, Y+63	; 0x3f
     946:	21 97       	sbiw	r28, 0x01	; 1
     948:	f3 d8       	rcall	.-3610   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     94a:	7b 01       	movw	r14, r22
     94c:	8c 01       	movw	r16, r24
     94e:	69 a9       	ldd	r22, Y+49	; 0x31
     950:	7a a9       	ldd	r23, Y+50	; 0x32
     952:	8b a9       	ldd	r24, Y+51	; 0x33
     954:	9c a9       	ldd	r25, Y+52	; 0x34
     956:	a6 01       	movw	r20, r12
     958:	95 01       	movw	r18, r10
     95a:	ea d8       	rcall	.-3628   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     95c:	9b 01       	movw	r18, r22
     95e:	ac 01       	movw	r20, r24
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	5e d7       	rcall	.+3772   	; 0x1822 <__subsf3>
     966:	29 96       	adiw	r28, 0x09	; 9
     968:	6c af       	std	Y+60, r22	; 0x3c
     96a:	7d af       	std	Y+61, r23	; 0x3d
     96c:	8e af       	std	Y+62, r24	; 0x3e
     96e:	9f af       	std	Y+63, r25	; 0x3f
     970:	29 97       	sbiw	r28, 0x09	; 9
		halfez = (ax * halfvy - ay * halfvx);
     972:	69 a9       	ldd	r22, Y+49	; 0x31
     974:	7a a9       	ldd	r23, Y+50	; 0x32
     976:	8b a9       	ldd	r24, Y+51	; 0x33
     978:	9c a9       	ldd	r25, Y+52	; 0x34
     97a:	a2 01       	movw	r20, r4
     97c:	91 01       	movw	r18, r2
     97e:	d8 d8       	rcall	.-3664   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     980:	7b 01       	movw	r14, r22
     982:	8c 01       	movw	r16, r24
     984:	6d a9       	ldd	r22, Y+53	; 0x35
     986:	7e a9       	ldd	r23, Y+54	; 0x36
     988:	8f a9       	ldd	r24, Y+55	; 0x37
     98a:	98 ad       	ldd	r25, Y+56	; 0x38
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	2c ad       	ldd	r18, Y+60	; 0x3c
     990:	3d ad       	ldd	r19, Y+61	; 0x3d
     992:	4e ad       	ldd	r20, Y+62	; 0x3e
     994:	5f ad       	ldd	r21, Y+63	; 0x3f
     996:	21 97       	sbiw	r28, 0x01	; 1
     998:	cb d8       	rcall	.-3690   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c8 01       	movw	r24, r16
     9a0:	b7 01       	movw	r22, r14
     9a2:	3f d7       	rcall	.+3710   	; 0x1822 <__subsf3>
     9a4:	1b 01       	movw	r2, r22
     9a6:	2c 01       	movw	r4, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     9a8:	e0 90 b4 00 	lds	r14, 0x00B4
     9ac:	f0 90 b5 00 	lds	r15, 0x00B5
     9b0:	00 91 b6 00 	lds	r16, 0x00B6
     9b4:	10 91 b7 00 	lds	r17, 0x00B7
     9b8:	25 96       	adiw	r28, 0x05	; 5
     9ba:	6c ad       	ldd	r22, Y+60	; 0x3c
     9bc:	7d ad       	ldd	r23, Y+61	; 0x3d
     9be:	8e ad       	ldd	r24, Y+62	; 0x3e
     9c0:	9f ad       	ldd	r25, Y+63	; 0x3f
     9c2:	25 97       	sbiw	r28, 0x05	; 5
     9c4:	2d ec       	ldi	r18, 0xCD	; 205
     9c6:	3c ec       	ldi	r19, 0xCC	; 204
     9c8:	4c e4       	ldi	r20, 0x4C	; 76
     9ca:	5e e3       	ldi	r21, 0x3E	; 62
     9cc:	b1 d8       	rcall	.-3742   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     9ce:	2a e8       	ldi	r18, 0x8A	; 138
     9d0:	3b e4       	ldi	r19, 0x4B	; 75
     9d2:	46 e8       	ldi	r20, 0x86	; 134
     9d4:	5c e3       	ldi	r21, 0x3C	; 60
     9d6:	ac d8       	rcall	.-3752   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     9d8:	a8 01       	movw	r20, r16
     9da:	97 01       	movw	r18, r14
     9dc:	23 d7       	rcall	.+3654   	; 0x1824 <__addsf3>
     9de:	60 93 b4 00 	sts	0x00B4, r22
     9e2:	70 93 b5 00 	sts	0x00B5, r23
     9e6:	80 93 b6 00 	sts	0x00B6, r24
     9ea:	90 93 b7 00 	sts	0x00B7, r25
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     9ee:	e0 90 b8 00 	lds	r14, 0x00B8
     9f2:	f0 90 b9 00 	lds	r15, 0x00B9
     9f6:	00 91 ba 00 	lds	r16, 0x00BA
     9fa:	10 91 bb 00 	lds	r17, 0x00BB
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	6c ad       	ldd	r22, Y+60	; 0x3c
     a02:	7d ad       	ldd	r23, Y+61	; 0x3d
     a04:	8e ad       	ldd	r24, Y+62	; 0x3e
     a06:	9f ad       	ldd	r25, Y+63	; 0x3f
     a08:	29 97       	sbiw	r28, 0x09	; 9
     a0a:	2d ec       	ldi	r18, 0xCD	; 205
     a0c:	3c ec       	ldi	r19, 0xCC	; 204
     a0e:	4c e4       	ldi	r20, 0x4C	; 76
     a10:	5e e3       	ldi	r21, 0x3E	; 62
     a12:	8e d8       	rcall	.-3812   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     a14:	2a e8       	ldi	r18, 0x8A	; 138
     a16:	3b e4       	ldi	r19, 0x4B	; 75
     a18:	46 e8       	ldi	r20, 0x86	; 134
     a1a:	5c e3       	ldi	r21, 0x3C	; 60
     a1c:	89 d8       	rcall	.-3822   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     a1e:	a8 01       	movw	r20, r16
     a20:	97 01       	movw	r18, r14
     a22:	00 d7       	rcall	.+3584   	; 0x1824 <__addsf3>
     a24:	60 93 b8 00 	sts	0x00B8, r22
     a28:	70 93 b9 00 	sts	0x00B9, r23
     a2c:	80 93 ba 00 	sts	0x00BA, r24
     a30:	90 93 bb 00 	sts	0x00BB, r25
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     a34:	e0 90 bc 00 	lds	r14, 0x00BC
     a38:	f0 90 bd 00 	lds	r15, 0x00BD
     a3c:	00 91 be 00 	lds	r16, 0x00BE
     a40:	10 91 bf 00 	lds	r17, 0x00BF
     a44:	c2 01       	movw	r24, r4
     a46:	b1 01       	movw	r22, r2
     a48:	2d ec       	ldi	r18, 0xCD	; 205
     a4a:	3c ec       	ldi	r19, 0xCC	; 204
     a4c:	4c e4       	ldi	r20, 0x4C	; 76
     a4e:	5e e3       	ldi	r21, 0x3E	; 62
     a50:	6f d8       	rcall	.-3874   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     a52:	2a e8       	ldi	r18, 0x8A	; 138
     a54:	3b e4       	ldi	r19, 0x4B	; 75
     a56:	46 e8       	ldi	r20, 0x86	; 134
     a58:	5c e3       	ldi	r21, 0x3C	; 60
     a5a:	6a d8       	rcall	.-3884   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     a5c:	a8 01       	movw	r20, r16
     a5e:	97 01       	movw	r18, r14
     a60:	e1 d6       	rcall	.+3522   	; 0x1824 <__addsf3>
     a62:	60 93 bc 00 	sts	0x00BC, r22
     a66:	70 93 bd 00 	sts	0x00BD, r23
     a6a:	80 93 be 00 	sts	0x00BE, r24
     a6e:	90 93 bf 00 	sts	0x00BF, r25
			gx += integralFBx;	// apply integral feedback
     a72:	20 91 b4 00 	lds	r18, 0x00B4
     a76:	30 91 b5 00 	lds	r19, 0x00B5
     a7a:	40 91 b6 00 	lds	r20, 0x00B6
     a7e:	50 91 b7 00 	lds	r21, 0x00B7
     a82:	6d a1       	ldd	r22, Y+37	; 0x25
     a84:	7e a1       	ldd	r23, Y+38	; 0x26
     a86:	8f a1       	ldd	r24, Y+39	; 0x27
     a88:	98 a5       	ldd	r25, Y+40	; 0x28
     a8a:	cc d6       	rcall	.+3480   	; 0x1824 <__addsf3>
     a8c:	3b 01       	movw	r6, r22
     a8e:	4c 01       	movw	r8, r24
			gy += integralFBy;
     a90:	20 91 b8 00 	lds	r18, 0x00B8
     a94:	30 91 b9 00 	lds	r19, 0x00B9
     a98:	40 91 ba 00 	lds	r20, 0x00BA
     a9c:	50 91 bb 00 	lds	r21, 0x00BB
     aa0:	69 a5       	ldd	r22, Y+41	; 0x29
     aa2:	7a a5       	ldd	r23, Y+42	; 0x2a
     aa4:	8b a5       	ldd	r24, Y+43	; 0x2b
     aa6:	9c a5       	ldd	r25, Y+44	; 0x2c
     aa8:	bd d6       	rcall	.+3450   	; 0x1824 <__addsf3>
     aaa:	5b 01       	movw	r10, r22
     aac:	6c 01       	movw	r12, r24
			gz += integralFBz;
     aae:	20 91 bc 00 	lds	r18, 0x00BC
     ab2:	30 91 bd 00 	lds	r19, 0x00BD
     ab6:	40 91 be 00 	lds	r20, 0x00BE
     aba:	50 91 bf 00 	lds	r21, 0x00BF
     abe:	6d a5       	ldd	r22, Y+45	; 0x2d
     ac0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ac4:	98 a9       	ldd	r25, Y+48	; 0x30
     ac6:	ae d6       	rcall	.+3420   	; 0x1824 <__addsf3>
     ac8:	7b 01       	movw	r14, r22
     aca:	8c 01       	movw	r16, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     acc:	c4 01       	movw	r24, r8
     ace:	b3 01       	movw	r22, r6
     ad0:	25 96       	adiw	r28, 0x05	; 5
     ad2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ad4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ad6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ad8:	5f ad       	ldd	r21, Y+63	; 0x3f
     ada:	25 97       	sbiw	r28, 0x05	; 5
     adc:	a3 d6       	rcall	.+3398   	; 0x1824 <__addsf3>
     ade:	6d a3       	std	Y+37, r22	; 0x25
     ae0:	7e a3       	std	Y+38, r23	; 0x26
     ae2:	8f a3       	std	Y+39, r24	; 0x27
     ae4:	98 a7       	std	Y+40, r25	; 0x28
		gy += mpu6050_mahonytwoKpDef * halfey;
     ae6:	c6 01       	movw	r24, r12
     ae8:	b5 01       	movw	r22, r10
     aea:	29 96       	adiw	r28, 0x09	; 9
     aec:	2c ad       	ldd	r18, Y+60	; 0x3c
     aee:	3d ad       	ldd	r19, Y+61	; 0x3d
     af0:	4e ad       	ldd	r20, Y+62	; 0x3e
     af2:	5f ad       	ldd	r21, Y+63	; 0x3f
     af4:	29 97       	sbiw	r28, 0x09	; 9
     af6:	96 d6       	rcall	.+3372   	; 0x1824 <__addsf3>
     af8:	69 a7       	std	Y+41, r22	; 0x29
     afa:	7a a7       	std	Y+42, r23	; 0x2a
     afc:	8b a7       	std	Y+43, r24	; 0x2b
     afe:	9c a7       	std	Y+44, r25	; 0x2c
		gz += mpu6050_mahonytwoKpDef * halfez;
     b00:	c8 01       	movw	r24, r16
     b02:	b7 01       	movw	r22, r14
     b04:	a2 01       	movw	r20, r4
     b06:	91 01       	movw	r18, r2
     b08:	8d d6       	rcall	.+3354   	; 0x1824 <__addsf3>
     b0a:	6d a7       	std	Y+45, r22	; 0x2d
     b0c:	7e a7       	std	Y+46, r23	; 0x2e
     b0e:	8f a7       	std	Y+47, r24	; 0x2f
     b10:	98 ab       	std	Y+48, r25	; 0x30
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     b12:	6d a1       	ldd	r22, Y+37	; 0x25
     b14:	7e a1       	ldd	r23, Y+38	; 0x26
     b16:	8f a1       	ldd	r24, Y+39	; 0x27
     b18:	98 a5       	ldd	r25, Y+40	; 0x28
     b1a:	2a e8       	ldi	r18, 0x8A	; 138
     b1c:	3b e4       	ldi	r19, 0x4B	; 75
     b1e:	46 e0       	ldi	r20, 0x06	; 6
     b20:	5c e3       	ldi	r21, 0x3C	; 60
     b22:	06 d8       	rcall	.-4084   	; 0xfffffb30 <__eeprom_end+0xff7efb30>
     b24:	2d 96       	adiw	r28, 0x0d	; 13
     b26:	6c af       	std	Y+60, r22	; 0x3c
     b28:	7d af       	std	Y+61, r23	; 0x3d
     b2a:	8e af       	std	Y+62, r24	; 0x3e
     b2c:	9f af       	std	Y+63, r25	; 0x3f
     b2e:	2d 97       	sbiw	r28, 0x0d	; 13
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b30:	69 a5       	ldd	r22, Y+41	; 0x29
     b32:	7a a5       	ldd	r23, Y+42	; 0x2a
     b34:	8b a5       	ldd	r24, Y+43	; 0x2b
     b36:	9c a5       	ldd	r25, Y+44	; 0x2c
     b38:	2a e8       	ldi	r18, 0x8A	; 138
     b3a:	3b e4       	ldi	r19, 0x4B	; 75
     b3c:	46 e0       	ldi	r20, 0x06	; 6
     b3e:	5c e3       	ldi	r21, 0x3C	; 60
     b40:	f7 d7       	rcall	.+4078   	; 0x1b30 <__mulsf3>
     b42:	1b 01       	movw	r2, r22
     b44:	2c 01       	movw	r4, r24
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b46:	6d a5       	ldd	r22, Y+45	; 0x2d
     b48:	7e a5       	ldd	r23, Y+46	; 0x2e
     b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     b4c:	98 a9       	ldd	r25, Y+48	; 0x30
     b4e:	2a e8       	ldi	r18, 0x8A	; 138
     b50:	3b e4       	ldi	r19, 0x4B	; 75
     b52:	46 e0       	ldi	r20, 0x06	; 6
     b54:	5c e3       	ldi	r21, 0x3C	; 60
     b56:	ec d7       	rcall	.+4056   	; 0x1b30 <__mulsf3>
     b58:	3b 01       	movw	r6, r22
     b5a:	4c 01       	movw	r8, r24
	qa = q0;
     b5c:	e0 90 93 00 	lds	r14, 0x0093
     b60:	f0 90 94 00 	lds	r15, 0x0094
     b64:	00 91 95 00 	lds	r16, 0x0095
     b68:	10 91 96 00 	lds	r17, 0x0096
     b6c:	e9 86       	std	Y+9, r14	; 0x09
     b6e:	fa 86       	std	Y+10, r15	; 0x0a
     b70:	0b 87       	std	Y+11, r16	; 0x0b
     b72:	1c 87       	std	Y+12, r17	; 0x0c
	qb = q1;
     b74:	80 91 a8 00 	lds	r24, 0x00A8
     b78:	90 91 a9 00 	lds	r25, 0x00A9
     b7c:	a0 91 aa 00 	lds	r26, 0x00AA
     b80:	b0 91 ab 00 	lds	r27, 0x00AB
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	9e 83       	std	Y+6, r25	; 0x06
     b88:	af 83       	std	Y+7, r26	; 0x07
     b8a:	b8 87       	std	Y+8, r27	; 0x08
	qc = q2;
     b8c:	e0 90 ac 00 	lds	r14, 0x00AC
     b90:	f0 90 ad 00 	lds	r15, 0x00AD
     b94:	00 91 ae 00 	lds	r16, 0x00AE
     b98:	10 91 af 00 	lds	r17, 0x00AF
     b9c:	e9 82       	std	Y+1, r14	; 0x01
     b9e:	fa 82       	std	Y+2, r15	; 0x02
     ba0:	0b 83       	std	Y+3, r16	; 0x03
     ba2:	1c 83       	std	Y+4, r17	; 0x04
	q0 += (-qb * gx - qc * gy - q3 * gz);
     ba4:	a0 90 b0 00 	lds	r10, 0x00B0
     ba8:	b0 90 b1 00 	lds	r11, 0x00B1
     bac:	c0 90 b2 00 	lds	r12, 0x00B2
     bb0:	d0 90 b3 00 	lds	r13, 0x00B3
     bb4:	80 91 93 00 	lds	r24, 0x0093
     bb8:	90 91 94 00 	lds	r25, 0x0094
     bbc:	a0 91 95 00 	lds	r26, 0x0095
     bc0:	b0 91 96 00 	lds	r27, 0x0096
     bc4:	89 a3       	std	Y+33, r24	; 0x21
     bc6:	9a a3       	std	Y+34, r25	; 0x22
     bc8:	ab a3       	std	Y+35, r26	; 0x23
     bca:	bc a3       	std	Y+36, r27	; 0x24
     bcc:	6d 81       	ldd	r22, Y+5	; 0x05
     bce:	7e 81       	ldd	r23, Y+6	; 0x06
     bd0:	8f 81       	ldd	r24, Y+7	; 0x07
     bd2:	98 85       	ldd	r25, Y+8	; 0x08
     bd4:	90 58       	subi	r25, 0x80	; 128
     bd6:	2d 96       	adiw	r28, 0x0d	; 13
     bd8:	2c ad       	ldd	r18, Y+60	; 0x3c
     bda:	3d ad       	ldd	r19, Y+61	; 0x3d
     bdc:	4e ad       	ldd	r20, Y+62	; 0x3e
     bde:	5f ad       	ldd	r21, Y+63	; 0x3f
     be0:	2d 97       	sbiw	r28, 0x0d	; 13
     be2:	a6 d7       	rcall	.+3916   	; 0x1b30 <__mulsf3>
     be4:	7b 01       	movw	r14, r22
     be6:	8c 01       	movw	r16, r24
     be8:	69 81       	ldd	r22, Y+1	; 0x01
     bea:	7a 81       	ldd	r23, Y+2	; 0x02
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	a2 01       	movw	r20, r4
     bf2:	91 01       	movw	r18, r2
     bf4:	9d d7       	rcall	.+3898   	; 0x1b30 <__mulsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c8 01       	movw	r24, r16
     bfc:	b7 01       	movw	r22, r14
     bfe:	11 d6       	rcall	.+3106   	; 0x1822 <__subsf3>
     c00:	7b 01       	movw	r14, r22
     c02:	8c 01       	movw	r16, r24
     c04:	c6 01       	movw	r24, r12
     c06:	b5 01       	movw	r22, r10
     c08:	a4 01       	movw	r20, r8
     c0a:	93 01       	movw	r18, r6
     c0c:	91 d7       	rcall	.+3874   	; 0x1b30 <__mulsf3>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c8 01       	movw	r24, r16
     c14:	b7 01       	movw	r22, r14
     c16:	05 d6       	rcall	.+3082   	; 0x1822 <__subsf3>
     c18:	29 a1       	ldd	r18, Y+33	; 0x21
     c1a:	3a a1       	ldd	r19, Y+34	; 0x22
     c1c:	4b a1       	ldd	r20, Y+35	; 0x23
     c1e:	5c a1       	ldd	r21, Y+36	; 0x24
     c20:	01 d6       	rcall	.+3074   	; 0x1824 <__addsf3>
     c22:	60 93 93 00 	sts	0x0093, r22
     c26:	70 93 94 00 	sts	0x0094, r23
     c2a:	80 93 95 00 	sts	0x0095, r24
     c2e:	90 93 96 00 	sts	0x0096, r25
	q1 += (qa * gx + qc * gz - q3 * gy);
     c32:	a0 90 b0 00 	lds	r10, 0x00B0
     c36:	b0 90 b1 00 	lds	r11, 0x00B1
     c3a:	c0 90 b2 00 	lds	r12, 0x00B2
     c3e:	d0 90 b3 00 	lds	r13, 0x00B3
     c42:	e0 90 a8 00 	lds	r14, 0x00A8
     c46:	f0 90 a9 00 	lds	r15, 0x00A9
     c4a:	00 91 aa 00 	lds	r16, 0x00AA
     c4e:	10 91 ab 00 	lds	r17, 0x00AB
     c52:	ed 8e       	std	Y+29, r14	; 0x1d
     c54:	fe 8e       	std	Y+30, r15	; 0x1e
     c56:	0f 8f       	std	Y+31, r16	; 0x1f
     c58:	18 a3       	std	Y+32, r17	; 0x20
     c5a:	69 85       	ldd	r22, Y+9	; 0x09
     c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c60:	9c 85       	ldd	r25, Y+12	; 0x0c
     c62:	2d 96       	adiw	r28, 0x0d	; 13
     c64:	2c ad       	ldd	r18, Y+60	; 0x3c
     c66:	3d ad       	ldd	r19, Y+61	; 0x3d
     c68:	4e ad       	ldd	r20, Y+62	; 0x3e
     c6a:	5f ad       	ldd	r21, Y+63	; 0x3f
     c6c:	2d 97       	sbiw	r28, 0x0d	; 13
     c6e:	60 d7       	rcall	.+3776   	; 0x1b30 <__mulsf3>
     c70:	7b 01       	movw	r14, r22
     c72:	8c 01       	movw	r16, r24
     c74:	69 81       	ldd	r22, Y+1	; 0x01
     c76:	7a 81       	ldd	r23, Y+2	; 0x02
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	a4 01       	movw	r20, r8
     c7e:	93 01       	movw	r18, r6
     c80:	57 d7       	rcall	.+3758   	; 0x1b30 <__mulsf3>
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	c8 01       	movw	r24, r16
     c88:	b7 01       	movw	r22, r14
     c8a:	cc d5       	rcall	.+2968   	; 0x1824 <__addsf3>
     c8c:	7b 01       	movw	r14, r22
     c8e:	8c 01       	movw	r16, r24
     c90:	c6 01       	movw	r24, r12
     c92:	b5 01       	movw	r22, r10
     c94:	a2 01       	movw	r20, r4
     c96:	91 01       	movw	r18, r2
     c98:	4b d7       	rcall	.+3734   	; 0x1b30 <__mulsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c8 01       	movw	r24, r16
     ca0:	b7 01       	movw	r22, r14
     ca2:	bf d5       	rcall	.+2942   	; 0x1822 <__subsf3>
     ca4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     ca6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ca8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     caa:	58 a1       	ldd	r21, Y+32	; 0x20
     cac:	bb d5       	rcall	.+2934   	; 0x1824 <__addsf3>
     cae:	60 93 a8 00 	sts	0x00A8, r22
     cb2:	70 93 a9 00 	sts	0x00A9, r23
     cb6:	80 93 aa 00 	sts	0x00AA, r24
     cba:	90 93 ab 00 	sts	0x00AB, r25
	q2 += (qa * gy - qb * gz + q3 * gx);
     cbe:	a0 90 b0 00 	lds	r10, 0x00B0
     cc2:	b0 90 b1 00 	lds	r11, 0x00B1
     cc6:	c0 90 b2 00 	lds	r12, 0x00B2
     cca:	d0 90 b3 00 	lds	r13, 0x00B3
     cce:	80 91 ac 00 	lds	r24, 0x00AC
     cd2:	90 91 ad 00 	lds	r25, 0x00AD
     cd6:	a0 91 ae 00 	lds	r26, 0x00AE
     cda:	b0 91 af 00 	lds	r27, 0x00AF
     cde:	89 8f       	std	Y+25, r24	; 0x19
     ce0:	9a 8f       	std	Y+26, r25	; 0x1a
     ce2:	ab 8f       	std	Y+27, r26	; 0x1b
     ce4:	bc 8f       	std	Y+28, r27	; 0x1c
     ce6:	69 85       	ldd	r22, Y+9	; 0x09
     ce8:	7a 85       	ldd	r23, Y+10	; 0x0a
     cea:	8b 85       	ldd	r24, Y+11	; 0x0b
     cec:	9c 85       	ldd	r25, Y+12	; 0x0c
     cee:	a2 01       	movw	r20, r4
     cf0:	91 01       	movw	r18, r2
     cf2:	1e d7       	rcall	.+3644   	; 0x1b30 <__mulsf3>
     cf4:	7b 01       	movw	r14, r22
     cf6:	8c 01       	movw	r16, r24
     cf8:	6d 81       	ldd	r22, Y+5	; 0x05
     cfa:	7e 81       	ldd	r23, Y+6	; 0x06
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	98 85       	ldd	r25, Y+8	; 0x08
     d00:	a4 01       	movw	r20, r8
     d02:	93 01       	movw	r18, r6
     d04:	15 d7       	rcall	.+3626   	; 0x1b30 <__mulsf3>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	c8 01       	movw	r24, r16
     d0c:	b7 01       	movw	r22, r14
     d0e:	89 d5       	rcall	.+2834   	; 0x1822 <__subsf3>
     d10:	7b 01       	movw	r14, r22
     d12:	8c 01       	movw	r16, r24
     d14:	c6 01       	movw	r24, r12
     d16:	b5 01       	movw	r22, r10
     d18:	2d 96       	adiw	r28, 0x0d	; 13
     d1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     d1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     d20:	5f ad       	ldd	r21, Y+63	; 0x3f
     d22:	2d 97       	sbiw	r28, 0x0d	; 13
     d24:	05 d7       	rcall	.+3594   	; 0x1b30 <__mulsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c8 01       	movw	r24, r16
     d2c:	b7 01       	movw	r22, r14
     d2e:	7a d5       	rcall	.+2804   	; 0x1824 <__addsf3>
     d30:	29 8d       	ldd	r18, Y+25	; 0x19
     d32:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d34:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d36:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d38:	75 d5       	rcall	.+2794   	; 0x1824 <__addsf3>
     d3a:	60 93 ac 00 	sts	0x00AC, r22
     d3e:	70 93 ad 00 	sts	0x00AD, r23
     d42:	80 93 ae 00 	sts	0x00AE, r24
     d46:	90 93 af 00 	sts	0x00AF, r25
	q3 += (qa * gz + qb * gy - qc * gx);
     d4a:	a0 90 b0 00 	lds	r10, 0x00B0
     d4e:	b0 90 b1 00 	lds	r11, 0x00B1
     d52:	c0 90 b2 00 	lds	r12, 0x00B2
     d56:	d0 90 b3 00 	lds	r13, 0x00B3
     d5a:	69 85       	ldd	r22, Y+9	; 0x09
     d5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	a4 01       	movw	r20, r8
     d64:	93 01       	movw	r18, r6
     d66:	e4 d6       	rcall	.+3528   	; 0x1b30 <__mulsf3>
     d68:	7b 01       	movw	r14, r22
     d6a:	8c 01       	movw	r16, r24
     d6c:	6d 81       	ldd	r22, Y+5	; 0x05
     d6e:	7e 81       	ldd	r23, Y+6	; 0x06
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	98 85       	ldd	r25, Y+8	; 0x08
     d74:	a2 01       	movw	r20, r4
     d76:	91 01       	movw	r18, r2
     d78:	db d6       	rcall	.+3510   	; 0x1b30 <__mulsf3>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	50 d5       	rcall	.+2720   	; 0x1824 <__addsf3>
     d84:	7b 01       	movw	r14, r22
     d86:	8c 01       	movw	r16, r24
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	7a 81       	ldd	r23, Y+2	; 0x02
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	2d 96       	adiw	r28, 0x0d	; 13
     d92:	2c ad       	ldd	r18, Y+60	; 0x3c
     d94:	3d ad       	ldd	r19, Y+61	; 0x3d
     d96:	4e ad       	ldd	r20, Y+62	; 0x3e
     d98:	5f ad       	ldd	r21, Y+63	; 0x3f
     d9a:	2d 97       	sbiw	r28, 0x0d	; 13
     d9c:	c9 d6       	rcall	.+3474   	; 0x1b30 <__mulsf3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	c8 01       	movw	r24, r16
     da4:	b7 01       	movw	r22, r14
     da6:	3d d5       	rcall	.+2682   	; 0x1822 <__subsf3>
     da8:	a6 01       	movw	r20, r12
     daa:	95 01       	movw	r18, r10
     dac:	3b d5       	rcall	.+2678   	; 0x1824 <__addsf3>
     dae:	60 93 b0 00 	sts	0x00B0, r22
     db2:	70 93 b1 00 	sts	0x00B1, r23
     db6:	80 93 b2 00 	sts	0x00B2, r24
     dba:	90 93 b3 00 	sts	0x00B3, r25

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     dbe:	60 91 93 00 	lds	r22, 0x0093
     dc2:	70 91 94 00 	lds	r23, 0x0094
     dc6:	80 91 95 00 	lds	r24, 0x0095
     dca:	90 91 96 00 	lds	r25, 0x0096
     dce:	20 91 93 00 	lds	r18, 0x0093
     dd2:	30 91 94 00 	lds	r19, 0x0094
     dd6:	40 91 95 00 	lds	r20, 0x0095
     dda:	50 91 96 00 	lds	r21, 0x0096
     dde:	a0 90 a8 00 	lds	r10, 0x00A8
     de2:	b0 90 a9 00 	lds	r11, 0x00A9
     de6:	c0 90 aa 00 	lds	r12, 0x00AA
     dea:	d0 90 ab 00 	lds	r13, 0x00AB
     dee:	60 90 a8 00 	lds	r6, 0x00A8
     df2:	70 90 a9 00 	lds	r7, 0x00A9
     df6:	80 90 aa 00 	lds	r8, 0x00AA
     dfa:	90 90 ab 00 	lds	r9, 0x00AB
     dfe:	20 90 ac 00 	lds	r2, 0x00AC
     e02:	30 90 ad 00 	lds	r3, 0x00AD
     e06:	40 90 ae 00 	lds	r4, 0x00AE
     e0a:	50 90 af 00 	lds	r5, 0x00AF
     e0e:	e0 90 ac 00 	lds	r14, 0x00AC
     e12:	f0 90 ad 00 	lds	r15, 0x00AD
     e16:	00 91 ae 00 	lds	r16, 0x00AE
     e1a:	10 91 af 00 	lds	r17, 0x00AF
     e1e:	ed 8a       	std	Y+21, r14	; 0x15
     e20:	fe 8a       	std	Y+22, r15	; 0x16
     e22:	0f 8b       	std	Y+23, r16	; 0x17
     e24:	18 8f       	std	Y+24, r17	; 0x18
     e26:	e0 90 b0 00 	lds	r14, 0x00B0
     e2a:	f0 90 b1 00 	lds	r15, 0x00B1
     e2e:	00 91 b2 00 	lds	r16, 0x00B2
     e32:	10 91 b3 00 	lds	r17, 0x00B3
     e36:	e9 8a       	std	Y+17, r14	; 0x11
     e38:	fa 8a       	std	Y+18, r15	; 0x12
     e3a:	0b 8b       	std	Y+19, r16	; 0x13
     e3c:	1c 8b       	std	Y+20, r17	; 0x14
     e3e:	e0 90 b0 00 	lds	r14, 0x00B0
     e42:	f0 90 b1 00 	lds	r15, 0x00B1
     e46:	00 91 b2 00 	lds	r16, 0x00B2
     e4a:	10 91 b3 00 	lds	r17, 0x00B3
     e4e:	ed 86       	std	Y+13, r14	; 0x0d
     e50:	fe 86       	std	Y+14, r15	; 0x0e
     e52:	0f 87       	std	Y+15, r16	; 0x0f
     e54:	18 8b       	std	Y+16, r17	; 0x10
     e56:	6c d6       	rcall	.+3288   	; 0x1b30 <__mulsf3>
     e58:	7b 01       	movw	r14, r22
     e5a:	8c 01       	movw	r16, r24
     e5c:	c6 01       	movw	r24, r12
     e5e:	b5 01       	movw	r22, r10
     e60:	a4 01       	movw	r20, r8
     e62:	93 01       	movw	r18, r6
     e64:	65 d6       	rcall	.+3274   	; 0x1b30 <__mulsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c8 01       	movw	r24, r16
     e6c:	b7 01       	movw	r22, r14
     e6e:	da d4       	rcall	.+2484   	; 0x1824 <__addsf3>
     e70:	7b 01       	movw	r14, r22
     e72:	8c 01       	movw	r16, r24
     e74:	c2 01       	movw	r24, r4
     e76:	b1 01       	movw	r22, r2
     e78:	2d 89       	ldd	r18, Y+21	; 0x15
     e7a:	3e 89       	ldd	r19, Y+22	; 0x16
     e7c:	4f 89       	ldd	r20, Y+23	; 0x17
     e7e:	58 8d       	ldd	r21, Y+24	; 0x18
     e80:	57 d6       	rcall	.+3246   	; 0x1b30 <__mulsf3>
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	c8 01       	movw	r24, r16
     e88:	b7 01       	movw	r22, r14
     e8a:	cc d4       	rcall	.+2456   	; 0x1824 <__addsf3>
     e8c:	7b 01       	movw	r14, r22
     e8e:	8c 01       	movw	r16, r24
     e90:	69 89       	ldd	r22, Y+17	; 0x11
     e92:	7a 89       	ldd	r23, Y+18	; 0x12
     e94:	8b 89       	ldd	r24, Y+19	; 0x13
     e96:	9c 89       	ldd	r25, Y+20	; 0x14
     e98:	2d 85       	ldd	r18, Y+13	; 0x0d
     e9a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e9c:	4f 85       	ldd	r20, Y+15	; 0x0f
     e9e:	58 89       	ldd	r21, Y+16	; 0x10
     ea0:	47 d6       	rcall	.+3214   	; 0x1b30 <__mulsf3>
     ea2:	9b 01       	movw	r18, r22
     ea4:	ac 01       	movw	r20, r24
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	bc d4       	rcall	.+2424   	; 0x1824 <__addsf3>
     eac:	a8 d6       	rcall	.+3408   	; 0x1bfe <sqrt>
     eae:	7b 01       	movw	r14, r22
     eb0:	8c 01       	movw	r16, r24
	q0 /= norm;
     eb2:	60 91 93 00 	lds	r22, 0x0093
     eb6:	70 91 94 00 	lds	r23, 0x0094
     eba:	80 91 95 00 	lds	r24, 0x0095
     ebe:	90 91 96 00 	lds	r25, 0x0096
     ec2:	a8 01       	movw	r20, r16
     ec4:	97 01       	movw	r18, r14
     ec6:	16 d5       	rcall	.+2604   	; 0x18f4 <__divsf3>
     ec8:	60 93 93 00 	sts	0x0093, r22
     ecc:	70 93 94 00 	sts	0x0094, r23
     ed0:	80 93 95 00 	sts	0x0095, r24
     ed4:	90 93 96 00 	sts	0x0096, r25
	q1 /= norm;
     ed8:	60 91 a8 00 	lds	r22, 0x00A8
     edc:	70 91 a9 00 	lds	r23, 0x00A9
     ee0:	80 91 aa 00 	lds	r24, 0x00AA
     ee4:	90 91 ab 00 	lds	r25, 0x00AB
     ee8:	a8 01       	movw	r20, r16
     eea:	97 01       	movw	r18, r14
     eec:	03 d5       	rcall	.+2566   	; 0x18f4 <__divsf3>
     eee:	60 93 a8 00 	sts	0x00A8, r22
     ef2:	70 93 a9 00 	sts	0x00A9, r23
     ef6:	80 93 aa 00 	sts	0x00AA, r24
     efa:	90 93 ab 00 	sts	0x00AB, r25
	q2 /= norm;
     efe:	60 91 ac 00 	lds	r22, 0x00AC
     f02:	70 91 ad 00 	lds	r23, 0x00AD
     f06:	80 91 ae 00 	lds	r24, 0x00AE
     f0a:	90 91 af 00 	lds	r25, 0x00AF
     f0e:	a8 01       	movw	r20, r16
     f10:	97 01       	movw	r18, r14
     f12:	f0 d4       	rcall	.+2528   	; 0x18f4 <__divsf3>
     f14:	60 93 ac 00 	sts	0x00AC, r22
     f18:	70 93 ad 00 	sts	0x00AD, r23
     f1c:	80 93 ae 00 	sts	0x00AE, r24
     f20:	90 93 af 00 	sts	0x00AF, r25
	q3 /= norm;
     f24:	60 91 b0 00 	lds	r22, 0x00B0
     f28:	70 91 b1 00 	lds	r23, 0x00B1
     f2c:	80 91 b2 00 	lds	r24, 0x00B2
     f30:	90 91 b3 00 	lds	r25, 0x00B3
     f34:	a8 01       	movw	r20, r16
     f36:	97 01       	movw	r18, r14
     f38:	dd d4       	rcall	.+2490   	; 0x18f4 <__divsf3>
     f3a:	60 93 b0 00 	sts	0x00B0, r22
     f3e:	70 93 b1 00 	sts	0x00B1, r23
     f42:	80 93 b2 00 	sts	0x00B2, r24
     f46:	90 93 b3 00 	sts	0x00B3, r25
}
     f4a:	c4 5b       	subi	r28, 0xB4	; 180
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	bf 90       	pop	r11
     f6a:	af 90       	pop	r10
     f6c:	9f 90       	pop	r9
     f6e:	8f 90       	pop	r8
     f70:	7f 90       	pop	r7
     f72:	6f 90       	pop	r6
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	3f 90       	pop	r3
     f7a:	2f 90       	pop	r2
     f7c:	08 95       	ret

00000f7e <mpu6050_writeBytes>:
}

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	18 2f       	mov	r17, r24
     f8c:	06 2f       	mov	r16, r22
     f8e:	f4 2e       	mov	r15, r20
     f90:	e5 2e       	mov	r14, r21
	if(length > 0) {
     f92:	66 23       	and	r22, r22
     f94:	79 f0       	breq	.+30     	; 0xfb4 <mpu6050_writeBytes+0x36>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     f96:	80 ed       	ldi	r24, 0xD0	; 208
     f98:	9d d3       	rcall	.+1850   	; 0x16d4 <i2c_start>
		i2c_write(regAddr); //reg
     f9a:	81 2f       	mov	r24, r17
     f9c:	ed d3       	rcall	.+2010   	; 0x1778 <i2c_write>
     f9e:	1f 2d       	mov	r17, r15
     fa0:	2f 2d       	mov	r18, r15
     fa2:	3e 2d       	mov	r19, r14
     fa4:	e9 01       	movw	r28, r18
		for (uint8_t i = 0; i < length; i++) {
			i2c_write((uint8_t) data[i]);
     fa6:	89 91       	ld	r24, Y+
     fa8:	e7 d3       	rcall	.+1998   	; 0x1778 <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
     faa:	9e 01       	movw	r18, r28
     fac:	21 1b       	sub	r18, r17
     fae:	20 17       	cp	r18, r16
     fb0:	d0 f3       	brcs	.-12     	; 0xfa6 <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
     fb2:	d2 d3       	rcall	.+1956   	; 0x1758 <i2c_stop>
	}
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	08 95       	ret

00000fc2 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	ae 01       	movw	r20, r28
     fd2:	4f 5f       	subi	r20, 0xFF	; 255
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	d3 df       	rcall	.-90     	; 0xf7e <mpu6050_writeBytes>
}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	18 2f       	mov	r17, r24
     ff0:	d6 2e       	mov	r13, r22
     ff2:	04 2f       	mov	r16, r20
     ff4:	f5 2e       	mov	r15, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     ff6:	66 23       	and	r22, r22
     ff8:	11 f4       	brne	.+4      	; 0xffe <mpu6050_readBytes+0x1e>
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	25 c0       	rjmp	.+74     	; 0x1048 <mpu6050_readBytes+0x68>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     ffe:	80 ed       	ldi	r24, 0xD0	; 208
    1000:	69 d3       	rcall	.+1746   	; 0x16d4 <i2c_start>
		i2c_write(regAddr);
    1002:	81 2f       	mov	r24, r17
    1004:	b9 d3       	rcall	.+1906   	; 0x1778 <i2c_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1006:	85 e3       	ldi	r24, 0x35	; 53
    1008:	8a 95       	dec	r24
    100a:	f1 f7       	brne	.-4      	; 0x1008 <mpu6050_readBytes+0x28>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
    100c:	81 ed       	ldi	r24, 0xD1	; 209
    100e:	62 d3       	rcall	.+1732   	; 0x16d4 <i2c_start>
    1010:	80 2f       	mov	r24, r16
    1012:	9f 2d       	mov	r25, r15
    1014:	8c 01       	movw	r16, r24
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    101a:	8d 2d       	mov	r24, r13
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	7c 01       	movw	r14, r24
    1020:	08 94       	sec
    1022:	e1 08       	sbc	r14, r1
    1024:	f1 08       	sbc	r15, r1
    1026:	ce 15       	cp	r28, r14
    1028:	df 05       	cpc	r29, r15
    102a:	21 f4       	brne	.+8      	; 0x1034 <mpu6050_readBytes+0x54>
				data[i] = i2c_readNak();
    102c:	e0 d3       	rcall	.+1984   	; 0x17ee <i2c_readNak>
    102e:	f8 01       	movw	r30, r16
    1030:	80 83       	st	Z, r24
    1032:	03 c0       	rjmp	.+6      	; 0x103a <mpu6050_readBytes+0x5a>
			else
				data[i] = i2c_readAck();
    1034:	c2 d3       	rcall	.+1924   	; 0x17ba <i2c_readAck>
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	0f 5f       	subi	r16, 0xFF	; 255
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    1040:	cd 15       	cp	r28, r13
    1042:	88 f3       	brcs	.-30     	; 0x1026 <mpu6050_readBytes+0x46>
    1044:	1d 2d       	mov	r17, r13
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    1046:	88 d3       	rcall	.+1808   	; 0x1758 <i2c_stop>
	}
	return count;
}
    1048:	81 2f       	mov	r24, r17
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	08 95       	ret

0000105a <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    105a:	4f 92       	push	r4
    105c:	5f 92       	push	r5
    105e:	6f 92       	push	r6
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	6c 01       	movw	r12, r24
    1078:	5b 01       	movw	r10, r22
    107a:	4a 01       	movw	r8, r20
    107c:	39 01       	movw	r6, r18
    107e:	28 01       	movw	r4, r16
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    1080:	0a ec       	ldi	r16, 0xCA	; 202
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	8b e3       	ldi	r24, 0x3B	; 59
    1086:	6e e0       	ldi	r22, 0x0E	; 14
    1088:	a8 01       	movw	r20, r16
    108a:	aa df       	rcall	.-172    	; 0xfe0 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    108c:	f8 01       	movw	r30, r16
    108e:	41 91       	ld	r20, Z+
    1090:	20 81       	ld	r18, Z
    1092:	94 2f       	mov	r25, r20
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	82 2b       	or	r24, r18
    109a:	93 2b       	or	r25, r19
    109c:	f6 01       	movw	r30, r12
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    10a2:	f8 01       	movw	r30, r16
    10a4:	32 96       	adiw	r30, 0x02	; 2
    10a6:	40 81       	ld	r20, Z
    10a8:	f8 01       	movw	r30, r16
    10aa:	33 96       	adiw	r30, 0x03	; 3
    10ac:	20 81       	ld	r18, Z
    10ae:	94 2f       	mov	r25, r20
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	82 2b       	or	r24, r18
    10b6:	93 2b       	or	r25, r19
    10b8:	f5 01       	movw	r30, r10
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    10be:	f8 01       	movw	r30, r16
    10c0:	34 96       	adiw	r30, 0x04	; 4
    10c2:	40 81       	ld	r20, Z
    10c4:	f8 01       	movw	r30, r16
    10c6:	35 96       	adiw	r30, 0x05	; 5
    10c8:	20 81       	ld	r18, Z
    10ca:	94 2f       	mov	r25, r20
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	82 2b       	or	r24, r18
    10d2:	93 2b       	or	r25, r19
    10d4:	f4 01       	movw	r30, r8
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    10da:	f8 01       	movw	r30, r16
    10dc:	38 96       	adiw	r30, 0x08	; 8
    10de:	40 81       	ld	r20, Z
    10e0:	f8 01       	movw	r30, r16
    10e2:	39 96       	adiw	r30, 0x09	; 9
    10e4:	20 81       	ld	r18, Z
    10e6:	94 2f       	mov	r25, r20
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	82 2b       	or	r24, r18
    10ee:	93 2b       	or	r25, r19
    10f0:	f3 01       	movw	r30, r6
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    10f6:	f8 01       	movw	r30, r16
    10f8:	3a 96       	adiw	r30, 0x0a	; 10
    10fa:	40 81       	ld	r20, Z
    10fc:	f8 01       	movw	r30, r16
    10fe:	3b 96       	adiw	r30, 0x0b	; 11
    1100:	20 81       	ld	r18, Z
    1102:	94 2f       	mov	r25, r20
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	82 2b       	or	r24, r18
    110a:	93 2b       	or	r25, r19
    110c:	f2 01       	movw	r30, r4
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1112:	f8 01       	movw	r30, r16
    1114:	3c 96       	adiw	r30, 0x0c	; 12
    1116:	40 81       	ld	r20, Z
    1118:	03 5f       	subi	r16, 0xF3	; 243
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	f8 01       	movw	r30, r16
    111e:	20 81       	ld	r18, Z
    1120:	94 2f       	mov	r25, r20
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	82 2b       	or	r24, r18
    1128:	93 2b       	or	r25, r19
    112a:	f7 01       	movw	r30, r14
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
}
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	5f 90       	pop	r5
    114a:	4f 90       	pop	r4
    114c:	08 95       	ret

0000114e <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	2c 97       	sbiw	r28, 0x0c	; 12
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	6c 01       	movw	r12, r24
    1184:	5b 01       	movw	r10, r22
    1186:	4a 01       	movw	r8, r20
    1188:	39 01       	movw	r6, r18
    118a:	28 01       	movw	r4, r16
    118c:	17 01       	movw	r2, r14
	int16_t ax = 0;
    118e:	1a 82       	std	Y+2, r1	; 0x02
    1190:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
    1192:	1c 82       	std	Y+4, r1	; 0x04
    1194:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
    1196:	1e 82       	std	Y+6, r1	; 0x06
    1198:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
    119a:	18 86       	std	Y+8, r1	; 0x08
    119c:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
    119e:	1a 86       	std	Y+10, r1	; 0x0a
    11a0:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
    11a2:	1c 86       	std	Y+12, r1	; 0x0c
    11a4:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	be 01       	movw	r22, r28
    11ac:	6d 5f       	subi	r22, 0xFD	; 253
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	ae 01       	movw	r20, r28
    11b2:	4b 5f       	subi	r20, 0xFB	; 251
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	9e 01       	movw	r18, r28
    11b8:	29 5f       	subi	r18, 0xF9	; 249
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	8e 01       	movw	r16, r28
    11be:	07 5f       	subi	r16, 0xF7	; 247
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	0f 2e       	mov	r0, r31
    11c4:	fb e0       	ldi	r31, 0x0B	; 11
    11c6:	ef 2e       	mov	r14, r31
    11c8:	ff 24       	eor	r15, r15
    11ca:	f0 2d       	mov	r31, r0
    11cc:	ec 0e       	add	r14, r28
    11ce:	fd 1e       	adc	r15, r29
    11d0:	44 df       	rcall	.-376    	; 0x105a <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    11d2:	69 81       	ldd	r22, Y+1	; 0x01
    11d4:	7a 81       	ldd	r23, Y+2	; 0x02
    11d6:	88 27       	eor	r24, r24
    11d8:	77 fd       	sbrc	r23, 7
    11da:	80 95       	com	r24
    11dc:	98 2f       	mov	r25, r24
    11de:	f4 d3       	rcall	.+2024   	; 0x19c8 <__floatsisf>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	58 e3       	ldi	r21, 0x38	; 56
    11e8:	a3 d4       	rcall	.+2374   	; 0x1b30 <__mulsf3>
    11ea:	f6 01       	movw	r30, r12
    11ec:	60 83       	st	Z, r22
    11ee:	71 83       	std	Z+1, r23	; 0x01
    11f0:	82 83       	std	Z+2, r24	; 0x02
    11f2:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    11f4:	6b 81       	ldd	r22, Y+3	; 0x03
    11f6:	7c 81       	ldd	r23, Y+4	; 0x04
    11f8:	88 27       	eor	r24, r24
    11fa:	77 fd       	sbrc	r23, 7
    11fc:	80 95       	com	r24
    11fe:	98 2f       	mov	r25, r24
    1200:	e3 d3       	rcall	.+1990   	; 0x19c8 <__floatsisf>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	58 e3       	ldi	r21, 0x38	; 56
    120a:	92 d4       	rcall	.+2340   	; 0x1b30 <__mulsf3>
    120c:	f5 01       	movw	r30, r10
    120e:	60 83       	st	Z, r22
    1210:	71 83       	std	Z+1, r23	; 0x01
    1212:	82 83       	std	Z+2, r24	; 0x02
    1214:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1216:	6d 81       	ldd	r22, Y+5	; 0x05
    1218:	7e 81       	ldd	r23, Y+6	; 0x06
    121a:	88 27       	eor	r24, r24
    121c:	77 fd       	sbrc	r23, 7
    121e:	80 95       	com	r24
    1220:	98 2f       	mov	r25, r24
    1222:	d2 d3       	rcall	.+1956   	; 0x19c8 <__floatsisf>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	58 e3       	ldi	r21, 0x38	; 56
    122c:	81 d4       	rcall	.+2306   	; 0x1b30 <__mulsf3>
    122e:	f4 01       	movw	r30, r8
    1230:	60 83       	st	Z, r22
    1232:	71 83       	std	Z+1, r23	; 0x01
    1234:	82 83       	std	Z+2, r24	; 0x02
    1236:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	66 5d       	subi	r22, 0xD6	; 214
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	88 27       	eor	r24, r24
    1242:	77 fd       	sbrc	r23, 7
    1244:	80 95       	com	r24
    1246:	98 2f       	mov	r25, r24
    1248:	bf d3       	rcall	.+1918   	; 0x19c8 <__floatsisf>
    124a:	23 e3       	ldi	r18, 0x33	; 51
    124c:	33 e3       	ldi	r19, 0x33	; 51
    124e:	43 e8       	ldi	r20, 0x83	; 131
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	50 d3       	rcall	.+1696   	; 0x18f4 <__divsf3>
    1254:	f3 01       	movw	r30, r6
    1256:	60 83       	st	Z, r22
    1258:	71 83       	std	Z+1, r23	; 0x01
    125a:	82 83       	std	Z+2, r24	; 0x02
    125c:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
    125e:	69 85       	ldd	r22, Y+9	; 0x09
    1260:	7a 85       	ldd	r23, Y+10	; 0x0a
    1262:	69 50       	subi	r22, 0x09	; 9
    1264:	70 40       	sbci	r23, 0x00	; 0
    1266:	88 27       	eor	r24, r24
    1268:	77 fd       	sbrc	r23, 7
    126a:	80 95       	com	r24
    126c:	98 2f       	mov	r25, r24
    126e:	ac d3       	rcall	.+1880   	; 0x19c8 <__floatsisf>
    1270:	23 e3       	ldi	r18, 0x33	; 51
    1272:	33 e3       	ldi	r19, 0x33	; 51
    1274:	43 e8       	ldi	r20, 0x83	; 131
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	3d d3       	rcall	.+1658   	; 0x18f4 <__divsf3>
    127a:	f2 01       	movw	r30, r4
    127c:	60 83       	st	Z, r22
    127e:	71 83       	std	Z+1, r23	; 0x01
    1280:	82 83       	std	Z+2, r24	; 0x02
    1282:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	63 5e       	subi	r22, 0xE3	; 227
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	88 27       	eor	r24, r24
    128e:	77 fd       	sbrc	r23, 7
    1290:	80 95       	com	r24
    1292:	98 2f       	mov	r25, r24
    1294:	99 d3       	rcall	.+1842   	; 0x19c8 <__floatsisf>
    1296:	23 e3       	ldi	r18, 0x33	; 51
    1298:	33 e3       	ldi	r19, 0x33	; 51
    129a:	43 e8       	ldi	r20, 0x83	; 131
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	2a d3       	rcall	.+1620   	; 0x18f4 <__divsf3>
    12a0:	f1 01       	movw	r30, r2
    12a2:	60 83       	st	Z, r22
    12a4:	71 83       	std	Z+1, r23	; 0x01
    12a6:	82 83       	std	Z+2, r24	; 0x02
    12a8:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
    12aa:	2c 96       	adiw	r28, 0x0c	; 12
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	08 95       	ret

000012dc <mpu6050_readByte>:
}

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    12dc:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	7f de       	rcall	.-770    	; 0xfe0 <mpu6050_readBytes>
}
    12e2:	08 95       	ret

000012e4 <mpu6050_writeBit>:
}

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	f8 2e       	mov	r15, r24
    12f6:	06 2f       	mov	r16, r22
    12f8:	14 2f       	mov	r17, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    12fa:	be 01       	movw	r22, r28
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	ed df       	rcall	.-38     	; 0x12dc <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1302:	11 23       	and	r17, r17
    1304:	59 f0       	breq	.+22     	; 0x131c <mpu6050_writeBit+0x38>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <mpu6050_writeBit+0x2c>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 95       	dec	r16
    1312:	e2 f7       	brpl	.-8      	; 0x130c <mpu6050_writeBit+0x28>
    1314:	29 81       	ldd	r18, Y+1	; 0x01
    1316:	62 2f       	mov	r22, r18
    1318:	68 2b       	or	r22, r24
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <mpu6050_writeBit+0x4e>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <mpu6050_writeBit+0x42>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 95       	dec	r16
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <mpu6050_writeBit+0x3e>
    132a:	80 95       	com	r24
    132c:	29 81       	ldd	r18, Y+1	; 0x01
    132e:	68 2f       	mov	r22, r24
    1330:	62 23       	and	r22, r18
    1332:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    1334:	8f 2d       	mov	r24, r15
    1336:	45 de       	rcall	.-886    	; 0xfc2 <mpu6050_writeByte>
}
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	08 95       	ret

00001346 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    1346:	8b e6       	ldi	r24, 0x6B	; 107
    1348:	66 e0       	ldi	r22, 0x06	; 6
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	cb df       	rcall	.-106    	; 0x12e4 <mpu6050_writeBit>
}
    134e:	08 95       	ret

00001350 <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	e8 2e       	mov	r14, r24
    1364:	06 2f       	mov	r16, r22
    1366:	14 2f       	mov	r17, r20
    1368:	f2 2e       	mov	r15, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    136a:	44 23       	and	r20, r20
    136c:	69 f1       	breq	.+90     	; 0x13c8 <mpu6050_writeBits+0x78>
		uint8_t b = 0;
    136e:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    1370:	be 01       	movw	r22, r28
    1372:	6f 5f       	subi	r22, 0xFF	; 255
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	b2 df       	rcall	.-156    	; 0x12dc <mpu6050_readByte>
    1378:	88 23       	and	r24, r24
    137a:	31 f1       	breq	.+76     	; 0x13c8 <mpu6050_writeBits+0x78>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    137c:	21 2f       	mov	r18, r17
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 2f       	mov	r20, r16
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	4f 5f       	subi	r20, 0xFF	; 255
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    1388:	42 1b       	sub	r20, r18
    138a:	53 0b       	sbc	r21, r19
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <mpu6050_writeBits+0x46>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	1a 95       	dec	r17
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <mpu6050_writeBits+0x42>
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	04 2e       	mov	r0, r20
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <mpu6050_writeBits+0x54>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <mpu6050_writeBits+0x50>
			data <<= (bitStart - length + 1); // shift data into correct position
    13a8:	2f 2d       	mov	r18, r15
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <mpu6050_writeBits+0x62>
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	4a 95       	dec	r20
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <mpu6050_writeBits+0x5e>
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    13b6:	68 2f       	mov	r22, r24
    13b8:	60 95       	com	r22
    13ba:	49 81       	ldd	r20, Y+1	; 0x01
    13bc:	64 23       	and	r22, r20
    13be:	82 23       	and	r24, r18
    13c0:	68 2b       	or	r22, r24
    13c2:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    13c4:	8e 2d       	mov	r24, r14
    13c6:	fd dd       	rcall	.-1030   	; 0xfc2 <mpu6050_writeByte>
		}
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	08 95       	ret

000013d8 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    13d8:	79 d1       	rcall	.+754    	; 0x16cc <i2c_init>
    13da:	85 e3       	ldi	r24, 0x35	; 53
    13dc:	8a 95       	dec	r24
    13de:	f1 f7       	brne	.-4      	; 0x13dc <mpu6050_init+0x4>
    13e0:	28 ee       	ldi	r18, 0xE8	; 232
    13e2:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e4:	40 e9       	ldi	r20, 0x90	; 144
    13e6:	51 e0       	ldi	r21, 0x01	; 1
    13e8:	ca 01       	movw	r24, r20
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <mpu6050_init+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	21 50       	subi	r18, 0x01	; 1
    13f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f2:	d1 f7       	brne	.-12     	; 0x13e8 <mpu6050_init+0x10>

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    13f4:	a8 df       	rcall	.-176    	; 0x1346 <mpu6050_setSleepDisabled>
    13f6:	80 e4       	ldi	r24, 0x40	; 64
    13f8:	9c e9       	ldi	r25, 0x9C	; 156
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <mpu6050_init+0x22>
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    13fe:	8b e6       	ldi	r24, 0x6B	; 107
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	43 e0       	ldi	r20, 0x03	; 3
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	a4 df       	rcall	.-184    	; 0x1350 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1408:	8a e1       	ldi	r24, 0x1A	; 26
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	43 e0       	ldi	r20, 0x03	; 3
    140e:	23 e0       	ldi	r18, 0x03	; 3
    1410:	9f df       	rcall	.-194    	; 0x1350 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1412:	89 e1       	ldi	r24, 0x19	; 25
    1414:	64 e0       	ldi	r22, 0x04	; 4
    1416:	d5 dd       	rcall	.-1110   	; 0xfc2 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    1418:	8b e1       	ldi	r24, 0x1B	; 27
    141a:	64 e0       	ldi	r22, 0x04	; 4
    141c:	42 e0       	ldi	r20, 0x02	; 2
    141e:	23 e0       	ldi	r18, 0x03	; 3
    1420:	97 df       	rcall	.-210    	; 0x1350 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1422:	8c e1       	ldi	r24, 0x1C	; 28
    1424:	64 e0       	ldi	r22, 0x04	; 4
    1426:	42 e0       	ldi	r20, 0x02	; 2
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	92 df       	rcall	.-220    	; 0x1350 <mpu6050_writeBits>

}
    142c:	08 95       	ret

0000142e <mpu6050_readBit>:
}

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	f6 2e       	mov	r15, r22
    1440:	8a 01       	movw	r16, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    1442:	be 01       	movw	r22, r28
    1444:	6f 5f       	subi	r22, 0xFF	; 255
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	49 df       	rcall	.-366    	; 0x12dc <mpu6050_readByte>
    *data = b & (1 << bitNum);
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <mpu6050_readBit+0x26>
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	fa 94       	dec	r15
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <mpu6050_readBit+0x22>
    1458:	99 81       	ldd	r25, Y+1	; 0x01
    145a:	92 23       	and	r25, r18
    145c:	f8 01       	movw	r30, r16
    145e:	90 83       	st	Z, r25
    return count;
}
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	08 95       	ret

0000146e <mpu6050_updateQuaternion>:
}

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    146e:	2f 92       	push	r2
    1470:	3f 92       	push	r3
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <mpu6050_updateQuaternion+0x26>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <mpu6050_updateQuaternion+0x28>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <mpu6050_updateQuaternion+0x2a>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    149c:	0f 2e       	mov	r0, r31
    149e:	fa ec       	ldi	r31, 0xCA	; 202
    14a0:	ef 2e       	mov	r14, r31
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	ff 2e       	mov	r15, r31
    14a6:	f0 2d       	mov	r31, r0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14a8:	15 e3       	ldi	r17, 0x35	; 53
    14aa:	8a e3       	ldi	r24, 0x3A	; 58
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	a7 01       	movw	r20, r14
    14b0:	be df       	rcall	.-132    	; 0x142e <mpu6050_readBit>
		if(buffer[0])
    14b2:	f7 01       	movw	r30, r14
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <mpu6050_updateQuaternion+0x54>
    14ba:	81 2f       	mov	r24, r17
    14bc:	8a 95       	dec	r24
    14be:	f1 f7       	brne	.-4      	; 0x14bc <mpu6050_updateQuaternion+0x4e>
    14c0:	f4 cf       	rjmp	.-24     	; 0x14aa <mpu6050_updateQuaternion+0x3c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    14c2:	0a ec       	ldi	r16, 0xCA	; 202
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	8b e3       	ldi	r24, 0x3B	; 59
    14c8:	6e e0       	ldi	r22, 0x0E	; 14
    14ca:	a8 01       	movw	r20, r16
    14cc:	89 dd       	rcall	.-1262   	; 0xfe0 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    14ce:	f8 01       	movw	r30, r16
    14d0:	d1 90       	ld	r13, Z+
    14d2:	c0 80       	ld	r12, Z
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    14d4:	f8 01       	movw	r30, r16
    14d6:	32 96       	adiw	r30, 0x02	; 2
    14d8:	90 80       	ld	r9, Z
    14da:	f8 01       	movw	r30, r16
    14dc:	33 96       	adiw	r30, 0x03	; 3
    14de:	80 80       	ld	r8, Z
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    14e0:	f8 01       	movw	r30, r16
    14e2:	34 96       	adiw	r30, 0x04	; 4
    14e4:	70 80       	ld	r7, Z
    14e6:	f8 01       	movw	r30, r16
    14e8:	35 96       	adiw	r30, 0x05	; 5
    14ea:	60 80       	ld	r6, Z
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    14ec:	f8 01       	movw	r30, r16
    14ee:	38 96       	adiw	r30, 0x08	; 8
    14f0:	40 81       	ld	r20, Z
    14f2:	f8 01       	movw	r30, r16
    14f4:	39 96       	adiw	r30, 0x09	; 9
    14f6:	20 81       	ld	r18, Z
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    14f8:	f8 01       	movw	r30, r16
    14fa:	3a 96       	adiw	r30, 0x0a	; 10
    14fc:	b0 80       	ld	r11, Z
    14fe:	f8 01       	movw	r30, r16
    1500:	3b 96       	adiw	r30, 0x0b	; 11
    1502:	e0 80       	ld	r14, Z
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1504:	f8 01       	movw	r30, r16
    1506:	3c 96       	adiw	r30, 0x0c	; 12
    1508:	a0 80       	ld	r10, Z
    150a:	03 5f       	subi	r16, 0xF3	; 243
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	f8 01       	movw	r30, r16
    1510:	00 81       	ld	r16, Z
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    1512:	8d b7       	in	r24, 0x3d	; 61
    1514:	9e b7       	in	r25, 0x3e	; 62
    1516:	08 97       	sbiw	r24, 0x08	; 8
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	9e bf       	out	0x3e, r25	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	8d bf       	out	0x3d, r24	; 61
    1522:	ed b7       	in	r30, 0x3d	; 61
    1524:	fe b7       	in	r31, 0x3e	; 62
    1526:	31 96       	adiw	r30, 0x01	; 1
    1528:	fe 83       	std	Y+6, r31	; 0x06
    152a:	ed 83       	std	Y+5, r30	; 0x05
    152c:	74 2f       	mov	r23, r20
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	62 2b       	or	r22, r18
    1534:	73 2b       	or	r23, r19
    1536:	66 5d       	subi	r22, 0xD6	; 214
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	88 27       	eor	r24, r24
    153c:	77 fd       	sbrc	r23, 7
    153e:	80 95       	com	r24
    1540:	98 2f       	mov	r25, r24
    1542:	42 d2       	rcall	.+1156   	; 0x19c8 <__floatsisf>
    1544:	23 e3       	ldi	r18, 0x33	; 51
    1546:	33 e3       	ldi	r19, 0x33	; 51
    1548:	43 e8       	ldi	r20, 0x83	; 131
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	d3 d1       	rcall	.+934    	; 0x18f4 <__divsf3>
    154e:	24 e3       	ldi	r18, 0x34	; 52
    1550:	3a ef       	ldi	r19, 0xFA	; 250
    1552:	4e e8       	ldi	r20, 0x8E	; 142
    1554:	5c e3       	ldi	r21, 0x3C	; 60
    1556:	ec d2       	rcall	.+1496   	; 0x1b30 <__mulsf3>
    1558:	69 83       	std	Y+1, r22	; 0x01
    155a:	7a 83       	std	Y+2, r23	; 0x02
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	7b 2d       	mov	r23, r11
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	ff 24       	eor	r15, r15
    1566:	6e 29       	or	r22, r14
    1568:	7f 29       	or	r23, r15
    156a:	69 50       	subi	r22, 0x09	; 9
    156c:	70 40       	sbci	r23, 0x00	; 0
    156e:	88 27       	eor	r24, r24
    1570:	77 fd       	sbrc	r23, 7
    1572:	80 95       	com	r24
    1574:	98 2f       	mov	r25, r24
    1576:	28 d2       	rcall	.+1104   	; 0x19c8 <__floatsisf>
    1578:	23 e3       	ldi	r18, 0x33	; 51
    157a:	33 e3       	ldi	r19, 0x33	; 51
    157c:	43 e8       	ldi	r20, 0x83	; 131
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	b9 d1       	rcall	.+882    	; 0x18f4 <__divsf3>
    1582:	24 e3       	ldi	r18, 0x34	; 52
    1584:	3a ef       	ldi	r19, 0xFA	; 250
    1586:	4e e8       	ldi	r20, 0x8E	; 142
    1588:	5c e3       	ldi	r21, 0x3C	; 60
    158a:	d2 d2       	rcall	.+1444   	; 0x1b30 <__mulsf3>
    158c:	1b 01       	movw	r2, r22
    158e:	2c 01       	movw	r4, r24
    1590:	7a 2d       	mov	r23, r10
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	10 e0       	ldi	r17, 0x00	; 0
    1596:	60 2b       	or	r22, r16
    1598:	71 2b       	or	r23, r17
    159a:	63 5e       	subi	r22, 0xE3	; 227
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	88 27       	eor	r24, r24
    15a0:	77 fd       	sbrc	r23, 7
    15a2:	80 95       	com	r24
    15a4:	98 2f       	mov	r25, r24
    15a6:	10 d2       	rcall	.+1056   	; 0x19c8 <__floatsisf>
    15a8:	23 e3       	ldi	r18, 0x33	; 51
    15aa:	33 e3       	ldi	r19, 0x33	; 51
    15ac:	43 e8       	ldi	r20, 0x83	; 131
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	a1 d1       	rcall	.+834    	; 0x18f4 <__divsf3>
    15b2:	24 e3       	ldi	r18, 0x34	; 52
    15b4:	3a ef       	ldi	r19, 0xFA	; 250
    15b6:	4e e8       	ldi	r20, 0x8E	; 142
    15b8:	5c e3       	ldi	r21, 0x3C	; 60
    15ba:	ba d2       	rcall	.+1396   	; 0x1b30 <__mulsf3>
    15bc:	7b 01       	movw	r14, r22
    15be:	8c 01       	movw	r16, r24
    15c0:	7d 2d       	mov	r23, r13
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	dd 24       	eor	r13, r13
    15c6:	6c 29       	or	r22, r12
    15c8:	7d 29       	or	r23, r13
    15ca:	88 27       	eor	r24, r24
    15cc:	77 fd       	sbrc	r23, 7
    15ce:	80 95       	com	r24
    15d0:	98 2f       	mov	r25, r24
    15d2:	fa d1       	rcall	.+1012   	; 0x19c8 <__floatsisf>
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	58 e3       	ldi	r21, 0x38	; 56
    15dc:	a9 d2       	rcall	.+1362   	; 0x1b30 <__mulsf3>
    15de:	5b 01       	movw	r10, r22
    15e0:	6c 01       	movw	r12, r24
    15e2:	79 2d       	mov	r23, r9
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	99 24       	eor	r9, r9
    15e8:	68 29       	or	r22, r8
    15ea:	79 29       	or	r23, r9
    15ec:	88 27       	eor	r24, r24
    15ee:	77 fd       	sbrc	r23, 7
    15f0:	80 95       	com	r24
    15f2:	98 2f       	mov	r25, r24
    15f4:	e9 d1       	rcall	.+978    	; 0x19c8 <__floatsisf>
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	58 e3       	ldi	r21, 0x38	; 56
    15fe:	98 d2       	rcall	.+1328   	; 0x1b30 <__mulsf3>
    1600:	ed 81       	ldd	r30, Y+5	; 0x05
    1602:	fe 81       	ldd	r31, Y+6	; 0x06
    1604:	60 83       	st	Z, r22
    1606:	71 83       	std	Z+1, r23	; 0x01
    1608:	82 83       	std	Z+2, r24	; 0x02
    160a:	93 83       	std	Z+3, r25	; 0x03
    160c:	77 2d       	mov	r23, r7
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	77 24       	eor	r7, r7
    1612:	66 29       	or	r22, r6
    1614:	77 29       	or	r23, r7
    1616:	88 27       	eor	r24, r24
    1618:	77 fd       	sbrc	r23, 7
    161a:	80 95       	com	r24
    161c:	98 2f       	mov	r25, r24
    161e:	d4 d1       	rcall	.+936    	; 0x19c8 <__floatsisf>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	58 e3       	ldi	r21, 0x38	; 56
    1628:	83 d2       	rcall	.+1286   	; 0x1b30 <__mulsf3>
    162a:	ed 81       	ldd	r30, Y+5	; 0x05
    162c:	fe 81       	ldd	r31, Y+6	; 0x06
    162e:	64 83       	std	Z+4, r22	; 0x04
    1630:	75 83       	std	Z+5, r23	; 0x05
    1632:	86 83       	std	Z+6, r24	; 0x06
    1634:	97 83       	std	Z+7, r25	; 0x07
    1636:	69 81       	ldd	r22, Y+1	; 0x01
    1638:	7a 81       	ldd	r23, Y+2	; 0x02
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	a2 01       	movw	r20, r4
    1640:	91 01       	movw	r18, r2
    1642:	3d d8       	rcall	.-3974   	; 0x6be <mpu6050_mahonyUpdate>
    1644:	8d b7       	in	r24, 0x3d	; 61
    1646:	9e b7       	in	r25, 0x3e	; 62
    1648:	08 96       	adiw	r24, 0x08	; 8
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	9e bf       	out	0x3e, r25	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	8d bf       	out	0x3d, r24	; 61
}
    1654:	26 96       	adiw	r28, 0x06	; 6
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	6f 90       	pop	r6
    167c:	5f 90       	pop	r5
    167e:	4f 90       	pop	r4
    1680:	3f 90       	pop	r3
    1682:	2f 90       	pop	r2
    1684:	08 95       	ret

00001686 <__vector_9>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	4f 93       	push	r20
    1696:	5f 93       	push	r21
    1698:	6f 93       	push	r22
    169a:	7f 93       	push	r23
    169c:	8f 93       	push	r24
    169e:	9f 93       	push	r25
    16a0:	af 93       	push	r26
    16a2:	bf 93       	push	r27
    16a4:	ef 93       	push	r30
    16a6:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    16a8:	e2 de       	rcall	.-572    	; 0x146e <mpu6050_updateQuaternion>
}
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    16cc:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    16ce:	8c e0       	ldi	r24, 0x0C	; 12
    16d0:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
    16d2:	08 95       	ret

000016d4 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    16d4:	98 2f       	mov	r25, r24
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    16d6:	84 ea       	ldi	r24, 0xA4	; 164
    16d8:	86 bf       	out	0x36, r24	; 54
    16da:	2f ef       	ldi	r18, 0xFF	; 255
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    16e2:	e6 e5       	ldi	r30, 0x56	; 86
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	88 23       	and	r24, r24
    16ea:	34 f0       	brlt	.+12     	; 0x16f8 <i2c_start+0x24>
    16ec:	21 50       	subi	r18, 0x01	; 1
    16ee:	31 09       	sbc	r19, r1
    16f0:	41 09       	sbc	r20, r1
    16f2:	51 09       	sbc	r21, r1
    16f4:	c0 f7       	brcc	.-16     	; 0x16e6 <i2c_start+0x12>
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <i2c_start+0x2e>
	if(i2c_timer == 0)
    16f8:	21 15       	cp	r18, r1
    16fa:	31 05       	cpc	r19, r1
    16fc:	41 05       	cpc	r20, r1
    16fe:	51 05       	cpc	r21, r1
    1700:	49 f1       	breq	.+82     	; 0x1754 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1702:	81 b1       	in	r24, 0x01	; 1
    1704:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	11 f0       	breq	.+4      	; 0x170e <i2c_start+0x3a>
    170a:	80 31       	cpi	r24, 0x10	; 16
    170c:	19 f5       	brne	.+70     	; 0x1754 <i2c_start+0x80>

	// send device address
	TWDR = address;
    170e:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1710:	84 e8       	ldi	r24, 0x84	; 132
    1712:	86 bf       	out	0x36, r24	; 54
    1714:	2f ef       	ldi	r18, 0xFF	; 255
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    171c:	e6 e5       	ldi	r30, 0x56	; 86
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 23       	and	r24, r24
    1724:	34 f0       	brlt	.+12     	; 0x1732 <i2c_start+0x5e>
    1726:	21 50       	subi	r18, 0x01	; 1
    1728:	31 09       	sbc	r19, r1
    172a:	41 09       	sbc	r20, r1
    172c:	51 09       	sbc	r21, r1
    172e:	c0 f7       	brcc	.-16     	; 0x1720 <i2c_start+0x4c>
    1730:	05 c0       	rjmp	.+10     	; 0x173c <i2c_start+0x68>
	if(i2c_timer == 0)
    1732:	21 15       	cp	r18, r1
    1734:	31 05       	cpc	r19, r1
    1736:	41 05       	cpc	r20, r1
    1738:	51 05       	cpc	r21, r1
    173a:	61 f0       	breq	.+24     	; 0x1754 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    173c:	81 b1       	in	r24, 0x01	; 1
    173e:	98 2f       	mov	r25, r24
    1740:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1742:	98 31       	cpi	r25, 0x18	; 24
    1744:	11 f4       	brne	.+4      	; 0x174a <i2c_start+0x76>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	08 95       	ret
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 34       	cpi	r25, 0x40	; 64
    174e:	19 f0       	breq	.+6      	; 0x1756 <i2c_start+0x82>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	08 95       	ret
    1754:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    1756:	08 95       	ret

00001758 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1758:	84 e9       	ldi	r24, 0x94	; 148
    175a:	86 bf       	out	0x36, r24	; 54
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1760:	e6 e5       	ldi	r30, 0x56	; 86
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 ff       	sbrs	r24, 4
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <i2c_stop+0x1e>
    176a:	2f 5f       	subi	r18, 0xFF	; 255
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	20 30       	cpi	r18, 0x00	; 0
    1772:	38 07       	cpc	r19, r24
    1774:	b9 f7       	brne	.-18     	; 0x1764 <i2c_stop+0xc>
    1776:	08 95       	ret

00001778 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1778:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    177a:	84 e8       	ldi	r24, 0x84	; 132
    177c:	86 bf       	out	0x36, r24	; 54
    177e:	2f ef       	ldi	r18, 0xFF	; 255
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1786:	e6 e5       	ldi	r30, 0x56	; 86
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	88 23       	and	r24, r24
    178e:	34 f0       	brlt	.+12     	; 0x179c <i2c_write+0x24>
    1790:	21 50       	subi	r18, 0x01	; 1
    1792:	31 09       	sbc	r19, r1
    1794:	41 09       	sbc	r20, r1
    1796:	51 09       	sbc	r21, r1
    1798:	c0 f7       	brcc	.-16     	; 0x178a <i2c_write+0x12>
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <i2c_write+0x32>
	if(i2c_timer == 0)
    179c:	21 15       	cp	r18, r1
    179e:	31 05       	cpc	r19, r1
    17a0:	41 05       	cpc	r20, r1
    17a2:	51 05       	cpc	r21, r1
    17a4:	11 f4       	brne	.+4      	; 0x17aa <i2c_write+0x32>
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    17aa:	81 b1       	in	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 7f       	andi	r24, 0xF8	; 248
    17b0:	88 32       	cpi	r24, 0x28	; 40
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <i2c_write+0x3e>
    17b4:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    17b6:	89 2f       	mov	r24, r25
    17b8:	08 95       	ret

000017ba <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    17ba:	84 ec       	ldi	r24, 0xC4	; 196
    17bc:	86 bf       	out	0x36, r24	; 54
    17be:	2f ef       	ldi	r18, 0xFF	; 255
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    17c6:	e6 e5       	ldi	r30, 0x56	; 86
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	88 23       	and	r24, r24
    17ce:	34 f0       	brlt	.+12     	; 0x17dc <i2c_readAck+0x22>
    17d0:	21 50       	subi	r18, 0x01	; 1
    17d2:	31 09       	sbc	r19, r1
    17d4:	41 09       	sbc	r20, r1
    17d6:	51 09       	sbc	r21, r1
    17d8:	c0 f7       	brcc	.-16     	; 0x17ca <i2c_readAck+0x10>
    17da:	07 c0       	rjmp	.+14     	; 0x17ea <i2c_readAck+0x30>
	if(i2c_timer == 0)
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	41 05       	cpc	r20, r1
    17e2:	51 05       	cpc	r21, r1
    17e4:	11 f4       	brne	.+4      	; 0x17ea <i2c_readAck+0x30>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	08 95       	ret
		return 0;

    return TWDR;
    17ea:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
    17ec:	08 95       	ret

000017ee <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    17ee:	84 e8       	ldi	r24, 0x84	; 132
    17f0:	86 bf       	out	0x36, r24	; 54
    17f2:	2f ef       	ldi	r18, 0xFF	; 255
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    17fa:	e6 e5       	ldi	r30, 0x56	; 86
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	88 23       	and	r24, r24
    1802:	34 f0       	brlt	.+12     	; 0x1810 <i2c_readNak+0x22>
    1804:	21 50       	subi	r18, 0x01	; 1
    1806:	31 09       	sbc	r19, r1
    1808:	41 09       	sbc	r20, r1
    180a:	51 09       	sbc	r21, r1
    180c:	c0 f7       	brcc	.-16     	; 0x17fe <i2c_readNak+0x10>
    180e:	07 c0       	rjmp	.+14     	; 0x181e <i2c_readNak+0x30>
	if(i2c_timer == 0)
    1810:	21 15       	cp	r18, r1
    1812:	31 05       	cpc	r19, r1
    1814:	41 05       	cpc	r20, r1
    1816:	51 05       	cpc	r21, r1
    1818:	11 f4       	brne	.+4      	; 0x181e <i2c_readNak+0x30>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret
		return 0;
	
    return TWDR;
    181e:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
    1820:	08 95       	ret

00001822 <__subsf3>:
    1822:	50 58       	subi	r21, 0x80	; 128

00001824 <__addsf3>:
    1824:	bb 27       	eor	r27, r27
    1826:	aa 27       	eor	r26, r26
    1828:	0e d0       	rcall	.+28     	; 0x1846 <__addsf3x>
    182a:	44 c1       	rjmp	.+648    	; 0x1ab4 <__fp_round>
    182c:	35 d1       	rcall	.+618    	; 0x1a98 <__fp_pscA>
    182e:	30 f0       	brcs	.+12     	; 0x183c <__addsf3+0x18>
    1830:	3a d1       	rcall	.+628    	; 0x1aa6 <__fp_pscB>
    1832:	20 f0       	brcs	.+8      	; 0x183c <__addsf3+0x18>
    1834:	31 f4       	brne	.+12     	; 0x1842 <__addsf3+0x1e>
    1836:	9f 3f       	cpi	r25, 0xFF	; 255
    1838:	11 f4       	brne	.+4      	; 0x183e <__addsf3+0x1a>
    183a:	1e f4       	brtc	.+6      	; 0x1842 <__addsf3+0x1e>
    183c:	2a c1       	rjmp	.+596    	; 0x1a92 <__fp_nan>
    183e:	0e f4       	brtc	.+2      	; 0x1842 <__addsf3+0x1e>
    1840:	e0 95       	com	r30
    1842:	e7 fb       	bst	r30, 7
    1844:	20 c1       	rjmp	.+576    	; 0x1a86 <__fp_inf>

00001846 <__addsf3x>:
    1846:	e9 2f       	mov	r30, r25
    1848:	46 d1       	rcall	.+652    	; 0x1ad6 <__fp_split3>
    184a:	80 f3       	brcs	.-32     	; 0x182c <__addsf3+0x8>
    184c:	ba 17       	cp	r27, r26
    184e:	62 07       	cpc	r22, r18
    1850:	73 07       	cpc	r23, r19
    1852:	84 07       	cpc	r24, r20
    1854:	95 07       	cpc	r25, r21
    1856:	18 f0       	brcs	.+6      	; 0x185e <__addsf3x+0x18>
    1858:	71 f4       	brne	.+28     	; 0x1876 <__addsf3x+0x30>
    185a:	9e f5       	brtc	.+102    	; 0x18c2 <__addsf3x+0x7c>
    185c:	5e c1       	rjmp	.+700    	; 0x1b1a <__fp_zero>
    185e:	0e f4       	brtc	.+2      	; 0x1862 <__addsf3x+0x1c>
    1860:	e0 95       	com	r30
    1862:	0b 2e       	mov	r0, r27
    1864:	ba 2f       	mov	r27, r26
    1866:	a0 2d       	mov	r26, r0
    1868:	0b 01       	movw	r0, r22
    186a:	b9 01       	movw	r22, r18
    186c:	90 01       	movw	r18, r0
    186e:	0c 01       	movw	r0, r24
    1870:	ca 01       	movw	r24, r20
    1872:	a0 01       	movw	r20, r0
    1874:	11 24       	eor	r1, r1
    1876:	ff 27       	eor	r31, r31
    1878:	59 1b       	sub	r21, r25
    187a:	99 f0       	breq	.+38     	; 0x18a2 <__addsf3x+0x5c>
    187c:	59 3f       	cpi	r21, 0xF9	; 249
    187e:	50 f4       	brcc	.+20     	; 0x1894 <__addsf3x+0x4e>
    1880:	50 3e       	cpi	r21, 0xE0	; 224
    1882:	68 f1       	brcs	.+90     	; 0x18de <__addsf3x+0x98>
    1884:	1a 16       	cp	r1, r26
    1886:	f0 40       	sbci	r31, 0x00	; 0
    1888:	a2 2f       	mov	r26, r18
    188a:	23 2f       	mov	r18, r19
    188c:	34 2f       	mov	r19, r20
    188e:	44 27       	eor	r20, r20
    1890:	58 5f       	subi	r21, 0xF8	; 248
    1892:	f3 cf       	rjmp	.-26     	; 0x187a <__addsf3x+0x34>
    1894:	46 95       	lsr	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	a7 95       	ror	r26
    189c:	f0 40       	sbci	r31, 0x00	; 0
    189e:	53 95       	inc	r21
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <__addsf3x+0x4e>
    18a2:	7e f4       	brtc	.+30     	; 0x18c2 <__addsf3x+0x7c>
    18a4:	1f 16       	cp	r1, r31
    18a6:	ba 0b       	sbc	r27, r26
    18a8:	62 0b       	sbc	r22, r18
    18aa:	73 0b       	sbc	r23, r19
    18ac:	84 0b       	sbc	r24, r20
    18ae:	ba f0       	brmi	.+46     	; 0x18de <__addsf3x+0x98>
    18b0:	91 50       	subi	r25, 0x01	; 1
    18b2:	a1 f0       	breq	.+40     	; 0x18dc <__addsf3x+0x96>
    18b4:	ff 0f       	add	r31, r31
    18b6:	bb 1f       	adc	r27, r27
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	c2 f7       	brpl	.-16     	; 0x18b0 <__addsf3x+0x6a>
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <__addsf3x+0x98>
    18c2:	ba 0f       	add	r27, r26
    18c4:	62 1f       	adc	r22, r18
    18c6:	73 1f       	adc	r23, r19
    18c8:	84 1f       	adc	r24, r20
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__addsf3x+0x98>
    18cc:	87 95       	ror	r24
    18ce:	77 95       	ror	r23
    18d0:	67 95       	ror	r22
    18d2:	b7 95       	ror	r27
    18d4:	f7 95       	ror	r31
    18d6:	9e 3f       	cpi	r25, 0xFE	; 254
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <__addsf3x+0x96>
    18da:	b3 cf       	rjmp	.-154    	; 0x1842 <__addsf3+0x1e>
    18dc:	93 95       	inc	r25
    18de:	88 0f       	add	r24, r24
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <__addsf3x+0x9e>
    18e2:	99 27       	eor	r25, r25
    18e4:	ee 0f       	add	r30, r30
    18e6:	97 95       	ror	r25
    18e8:	87 95       	ror	r24
    18ea:	08 95       	ret

000018ec <__cmpsf2>:
    18ec:	a8 d0       	rcall	.+336    	; 0x1a3e <__fp_cmp>
    18ee:	08 f4       	brcc	.+2      	; 0x18f2 <__cmpsf2+0x6>
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	08 95       	ret

000018f4 <__divsf3>:
    18f4:	0c d0       	rcall	.+24     	; 0x190e <__divsf3x>
    18f6:	de c0       	rjmp	.+444    	; 0x1ab4 <__fp_round>
    18f8:	d6 d0       	rcall	.+428    	; 0x1aa6 <__fp_pscB>
    18fa:	40 f0       	brcs	.+16     	; 0x190c <__divsf3+0x18>
    18fc:	cd d0       	rcall	.+410    	; 0x1a98 <__fp_pscA>
    18fe:	30 f0       	brcs	.+12     	; 0x190c <__divsf3+0x18>
    1900:	21 f4       	brne	.+8      	; 0x190a <__divsf3+0x16>
    1902:	5f 3f       	cpi	r21, 0xFF	; 255
    1904:	19 f0       	breq	.+6      	; 0x190c <__divsf3+0x18>
    1906:	bf c0       	rjmp	.+382    	; 0x1a86 <__fp_inf>
    1908:	51 11       	cpse	r21, r1
    190a:	08 c1       	rjmp	.+528    	; 0x1b1c <__fp_szero>
    190c:	c2 c0       	rjmp	.+388    	; 0x1a92 <__fp_nan>

0000190e <__divsf3x>:
    190e:	e3 d0       	rcall	.+454    	; 0x1ad6 <__fp_split3>
    1910:	98 f3       	brcs	.-26     	; 0x18f8 <__divsf3+0x4>

00001912 <__divsf3_pse>:
    1912:	99 23       	and	r25, r25
    1914:	c9 f3       	breq	.-14     	; 0x1908 <__divsf3+0x14>
    1916:	55 23       	and	r21, r21
    1918:	b1 f3       	breq	.-20     	; 0x1906 <__divsf3+0x12>
    191a:	95 1b       	sub	r25, r21
    191c:	55 0b       	sbc	r21, r21
    191e:	bb 27       	eor	r27, r27
    1920:	aa 27       	eor	r26, r26
    1922:	62 17       	cp	r22, r18
    1924:	73 07       	cpc	r23, r19
    1926:	84 07       	cpc	r24, r20
    1928:	38 f0       	brcs	.+14     	; 0x1938 <__divsf3_pse+0x26>
    192a:	9f 5f       	subi	r25, 0xFF	; 255
    192c:	5f 4f       	sbci	r21, 0xFF	; 255
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	44 1f       	adc	r20, r20
    1934:	aa 1f       	adc	r26, r26
    1936:	a9 f3       	breq	.-22     	; 0x1922 <__divsf3_pse+0x10>
    1938:	33 d0       	rcall	.+102    	; 0x19a0 <__divsf3_pse+0x8e>
    193a:	0e 2e       	mov	r0, r30
    193c:	3a f0       	brmi	.+14     	; 0x194c <__divsf3_pse+0x3a>
    193e:	e0 e8       	ldi	r30, 0x80	; 128
    1940:	30 d0       	rcall	.+96     	; 0x19a2 <__divsf3_pse+0x90>
    1942:	91 50       	subi	r25, 0x01	; 1
    1944:	50 40       	sbci	r21, 0x00	; 0
    1946:	e6 95       	lsr	r30
    1948:	00 1c       	adc	r0, r0
    194a:	ca f7       	brpl	.-14     	; 0x193e <__divsf3_pse+0x2c>
    194c:	29 d0       	rcall	.+82     	; 0x19a0 <__divsf3_pse+0x8e>
    194e:	fe 2f       	mov	r31, r30
    1950:	27 d0       	rcall	.+78     	; 0x19a0 <__divsf3_pse+0x8e>
    1952:	66 0f       	add	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	88 1f       	adc	r24, r24
    1958:	bb 1f       	adc	r27, r27
    195a:	26 17       	cp	r18, r22
    195c:	37 07       	cpc	r19, r23
    195e:	48 07       	cpc	r20, r24
    1960:	ab 07       	cpc	r26, r27
    1962:	b0 e8       	ldi	r27, 0x80	; 128
    1964:	09 f0       	breq	.+2      	; 0x1968 <__divsf3_pse+0x56>
    1966:	bb 0b       	sbc	r27, r27
    1968:	80 2d       	mov	r24, r0
    196a:	bf 01       	movw	r22, r30
    196c:	ff 27       	eor	r31, r31
    196e:	93 58       	subi	r25, 0x83	; 131
    1970:	5f 4f       	sbci	r21, 0xFF	; 255
    1972:	2a f0       	brmi	.+10     	; 0x197e <__divsf3_pse+0x6c>
    1974:	9e 3f       	cpi	r25, 0xFE	; 254
    1976:	51 05       	cpc	r21, r1
    1978:	68 f0       	brcs	.+26     	; 0x1994 <__divsf3_pse+0x82>
    197a:	85 c0       	rjmp	.+266    	; 0x1a86 <__fp_inf>
    197c:	cf c0       	rjmp	.+414    	; 0x1b1c <__fp_szero>
    197e:	5f 3f       	cpi	r21, 0xFF	; 255
    1980:	ec f3       	brlt	.-6      	; 0x197c <__divsf3_pse+0x6a>
    1982:	98 3e       	cpi	r25, 0xE8	; 232
    1984:	dc f3       	brlt	.-10     	; 0x197c <__divsf3_pse+0x6a>
    1986:	86 95       	lsr	r24
    1988:	77 95       	ror	r23
    198a:	67 95       	ror	r22
    198c:	b7 95       	ror	r27
    198e:	f7 95       	ror	r31
    1990:	9f 5f       	subi	r25, 0xFF	; 255
    1992:	c9 f7       	brne	.-14     	; 0x1986 <__divsf3_pse+0x74>
    1994:	88 0f       	add	r24, r24
    1996:	91 1d       	adc	r25, r1
    1998:	96 95       	lsr	r25
    199a:	87 95       	ror	r24
    199c:	97 f9       	bld	r25, 7
    199e:	08 95       	ret
    19a0:	e1 e0       	ldi	r30, 0x01	; 1
    19a2:	66 0f       	add	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	bb 1f       	adc	r27, r27
    19aa:	62 17       	cp	r22, r18
    19ac:	73 07       	cpc	r23, r19
    19ae:	84 07       	cpc	r24, r20
    19b0:	ba 07       	cpc	r27, r26
    19b2:	20 f0       	brcs	.+8      	; 0x19bc <__divsf3_pse+0xaa>
    19b4:	62 1b       	sub	r22, r18
    19b6:	73 0b       	sbc	r23, r19
    19b8:	84 0b       	sbc	r24, r20
    19ba:	ba 0b       	sbc	r27, r26
    19bc:	ee 1f       	adc	r30, r30
    19be:	88 f7       	brcc	.-30     	; 0x19a2 <__divsf3_pse+0x90>
    19c0:	e0 95       	com	r30
    19c2:	08 95       	ret

000019c4 <__floatunsisf>:
    19c4:	e8 94       	clt
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <__floatsisf+0x12>

000019c8 <__floatsisf>:
    19c8:	97 fb       	bst	r25, 7
    19ca:	3e f4       	brtc	.+14     	; 0x19da <__floatsisf+0x12>
    19cc:	90 95       	com	r25
    19ce:	80 95       	com	r24
    19d0:	70 95       	com	r23
    19d2:	61 95       	neg	r22
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	99 23       	and	r25, r25
    19dc:	a9 f0       	breq	.+42     	; 0x1a08 <__floatsisf+0x40>
    19de:	f9 2f       	mov	r31, r25
    19e0:	96 e9       	ldi	r25, 0x96	; 150
    19e2:	bb 27       	eor	r27, r27
    19e4:	93 95       	inc	r25
    19e6:	f6 95       	lsr	r31
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b7 95       	ror	r27
    19f0:	f1 11       	cpse	r31, r1
    19f2:	f8 cf       	rjmp	.-16     	; 0x19e4 <__floatsisf+0x1c>
    19f4:	fa f4       	brpl	.+62     	; 0x1a34 <__floatsisf+0x6c>
    19f6:	bb 0f       	add	r27, r27
    19f8:	11 f4       	brne	.+4      	; 0x19fe <__floatsisf+0x36>
    19fa:	60 ff       	sbrs	r22, 0
    19fc:	1b c0       	rjmp	.+54     	; 0x1a34 <__floatsisf+0x6c>
    19fe:	6f 5f       	subi	r22, 0xFF	; 255
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <__floatsisf+0x6c>
    1a08:	88 23       	and	r24, r24
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <__floatsisf+0x48>
    1a0c:	96 e9       	ldi	r25, 0x96	; 150
    1a0e:	11 c0       	rjmp	.+34     	; 0x1a32 <__floatsisf+0x6a>
    1a10:	77 23       	and	r23, r23
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <__floatsisf+0x54>
    1a14:	9e e8       	ldi	r25, 0x8E	; 142
    1a16:	87 2f       	mov	r24, r23
    1a18:	76 2f       	mov	r23, r22
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <__floatsisf+0x5e>
    1a1c:	66 23       	and	r22, r22
    1a1e:	71 f0       	breq	.+28     	; 0x1a3c <__floatsisf+0x74>
    1a20:	96 e8       	ldi	r25, 0x86	; 134
    1a22:	86 2f       	mov	r24, r22
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	2a f0       	brmi	.+10     	; 0x1a34 <__floatsisf+0x6c>
    1a2a:	9a 95       	dec	r25
    1a2c:	66 0f       	add	r22, r22
    1a2e:	77 1f       	adc	r23, r23
    1a30:	88 1f       	adc	r24, r24
    1a32:	da f7       	brpl	.-10     	; 0x1a2a <__floatsisf+0x62>
    1a34:	88 0f       	add	r24, r24
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <__fp_cmp>:
    1a3e:	99 0f       	add	r25, r25
    1a40:	00 08       	sbc	r0, r0
    1a42:	55 0f       	add	r21, r21
    1a44:	aa 0b       	sbc	r26, r26
    1a46:	e0 e8       	ldi	r30, 0x80	; 128
    1a48:	fe ef       	ldi	r31, 0xFE	; 254
    1a4a:	16 16       	cp	r1, r22
    1a4c:	17 06       	cpc	r1, r23
    1a4e:	e8 07       	cpc	r30, r24
    1a50:	f9 07       	cpc	r31, r25
    1a52:	c0 f0       	brcs	.+48     	; 0x1a84 <__fp_cmp+0x46>
    1a54:	12 16       	cp	r1, r18
    1a56:	13 06       	cpc	r1, r19
    1a58:	e4 07       	cpc	r30, r20
    1a5a:	f5 07       	cpc	r31, r21
    1a5c:	98 f0       	brcs	.+38     	; 0x1a84 <__fp_cmp+0x46>
    1a5e:	62 1b       	sub	r22, r18
    1a60:	73 0b       	sbc	r23, r19
    1a62:	84 0b       	sbc	r24, r20
    1a64:	95 0b       	sbc	r25, r21
    1a66:	39 f4       	brne	.+14     	; 0x1a76 <__fp_cmp+0x38>
    1a68:	0a 26       	eor	r0, r26
    1a6a:	61 f0       	breq	.+24     	; 0x1a84 <__fp_cmp+0x46>
    1a6c:	23 2b       	or	r18, r19
    1a6e:	24 2b       	or	r18, r20
    1a70:	25 2b       	or	r18, r21
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <__fp_cmp+0x3e>
    1a74:	08 95       	ret
    1a76:	0a 26       	eor	r0, r26
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <__fp_cmp+0x3e>
    1a7a:	a1 40       	sbci	r26, 0x01	; 1
    1a7c:	a6 95       	lsr	r26
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	81 1d       	adc	r24, r1
    1a82:	81 1d       	adc	r24, r1
    1a84:	08 95       	ret

00001a86 <__fp_inf>:
    1a86:	97 f9       	bld	r25, 7
    1a88:	9f 67       	ori	r25, 0x7F	; 127
    1a8a:	80 e8       	ldi	r24, 0x80	; 128
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	08 95       	ret

00001a92 <__fp_nan>:
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	80 ec       	ldi	r24, 0xC0	; 192
    1a96:	08 95       	ret

00001a98 <__fp_pscA>:
    1a98:	00 24       	eor	r0, r0
    1a9a:	0a 94       	dec	r0
    1a9c:	16 16       	cp	r1, r22
    1a9e:	17 06       	cpc	r1, r23
    1aa0:	18 06       	cpc	r1, r24
    1aa2:	09 06       	cpc	r0, r25
    1aa4:	08 95       	ret

00001aa6 <__fp_pscB>:
    1aa6:	00 24       	eor	r0, r0
    1aa8:	0a 94       	dec	r0
    1aaa:	12 16       	cp	r1, r18
    1aac:	13 06       	cpc	r1, r19
    1aae:	14 06       	cpc	r1, r20
    1ab0:	05 06       	cpc	r0, r21
    1ab2:	08 95       	ret

00001ab4 <__fp_round>:
    1ab4:	09 2e       	mov	r0, r25
    1ab6:	03 94       	inc	r0
    1ab8:	00 0c       	add	r0, r0
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <__fp_round+0xc>
    1abc:	88 23       	and	r24, r24
    1abe:	52 f0       	brmi	.+20     	; 0x1ad4 <__fp_round+0x20>
    1ac0:	bb 0f       	add	r27, r27
    1ac2:	40 f4       	brcc	.+16     	; 0x1ad4 <__fp_round+0x20>
    1ac4:	bf 2b       	or	r27, r31
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <__fp_round+0x18>
    1ac8:	60 ff       	sbrs	r22, 0
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <__fp_round+0x20>
    1acc:	6f 5f       	subi	r22, 0xFF	; 255
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	08 95       	ret

00001ad6 <__fp_split3>:
    1ad6:	57 fd       	sbrc	r21, 7
    1ad8:	90 58       	subi	r25, 0x80	; 128
    1ada:	44 0f       	add	r20, r20
    1adc:	55 1f       	adc	r21, r21
    1ade:	59 f0       	breq	.+22     	; 0x1af6 <__fp_splitA+0x10>
    1ae0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <__fp_splitA+0x1a>
    1ae4:	47 95       	ror	r20

00001ae6 <__fp_splitA>:
    1ae6:	88 0f       	add	r24, r24
    1ae8:	97 fb       	bst	r25, 7
    1aea:	99 1f       	adc	r25, r25
    1aec:	61 f0       	breq	.+24     	; 0x1b06 <__fp_splitA+0x20>
    1aee:	9f 3f       	cpi	r25, 0xFF	; 255
    1af0:	79 f0       	breq	.+30     	; 0x1b10 <__fp_splitA+0x2a>
    1af2:	87 95       	ror	r24
    1af4:	08 95       	ret
    1af6:	12 16       	cp	r1, r18
    1af8:	13 06       	cpc	r1, r19
    1afa:	14 06       	cpc	r1, r20
    1afc:	55 1f       	adc	r21, r21
    1afe:	f2 cf       	rjmp	.-28     	; 0x1ae4 <__fp_split3+0xe>
    1b00:	46 95       	lsr	r20
    1b02:	f1 df       	rcall	.-30     	; 0x1ae6 <__fp_splitA>
    1b04:	08 c0       	rjmp	.+16     	; 0x1b16 <__fp_splitA+0x30>
    1b06:	16 16       	cp	r1, r22
    1b08:	17 06       	cpc	r1, r23
    1b0a:	18 06       	cpc	r1, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	f1 cf       	rjmp	.-30     	; 0x1af2 <__fp_splitA+0xc>
    1b10:	86 95       	lsr	r24
    1b12:	71 05       	cpc	r23, r1
    1b14:	61 05       	cpc	r22, r1
    1b16:	08 94       	sec
    1b18:	08 95       	ret

00001b1a <__fp_zero>:
    1b1a:	e8 94       	clt

00001b1c <__fp_szero>:
    1b1c:	bb 27       	eor	r27, r27
    1b1e:	66 27       	eor	r22, r22
    1b20:	77 27       	eor	r23, r23
    1b22:	cb 01       	movw	r24, r22
    1b24:	97 f9       	bld	r25, 7
    1b26:	08 95       	ret

00001b28 <__gesf2>:
    1b28:	8a df       	rcall	.-236    	; 0x1a3e <__fp_cmp>
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__gesf2+0x6>
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	08 95       	ret

00001b30 <__mulsf3>:
    1b30:	0b d0       	rcall	.+22     	; 0x1b48 <__mulsf3x>
    1b32:	c0 cf       	rjmp	.-128    	; 0x1ab4 <__fp_round>
    1b34:	b1 df       	rcall	.-158    	; 0x1a98 <__fp_pscA>
    1b36:	28 f0       	brcs	.+10     	; 0x1b42 <__mulsf3+0x12>
    1b38:	b6 df       	rcall	.-148    	; 0x1aa6 <__fp_pscB>
    1b3a:	18 f0       	brcs	.+6      	; 0x1b42 <__mulsf3+0x12>
    1b3c:	95 23       	and	r25, r21
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <__mulsf3+0x12>
    1b40:	a2 cf       	rjmp	.-188    	; 0x1a86 <__fp_inf>
    1b42:	a7 cf       	rjmp	.-178    	; 0x1a92 <__fp_nan>
    1b44:	11 24       	eor	r1, r1
    1b46:	ea cf       	rjmp	.-44     	; 0x1b1c <__fp_szero>

00001b48 <__mulsf3x>:
    1b48:	c6 df       	rcall	.-116    	; 0x1ad6 <__fp_split3>
    1b4a:	a0 f3       	brcs	.-24     	; 0x1b34 <__mulsf3+0x4>

00001b4c <__mulsf3_pse>:
    1b4c:	95 9f       	mul	r25, r21
    1b4e:	d1 f3       	breq	.-12     	; 0x1b44 <__mulsf3+0x14>
    1b50:	95 0f       	add	r25, r21
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	55 1f       	adc	r21, r21
    1b56:	62 9f       	mul	r22, r18
    1b58:	f0 01       	movw	r30, r0
    1b5a:	72 9f       	mul	r23, r18
    1b5c:	bb 27       	eor	r27, r27
    1b5e:	f0 0d       	add	r31, r0
    1b60:	b1 1d       	adc	r27, r1
    1b62:	63 9f       	mul	r22, r19
    1b64:	aa 27       	eor	r26, r26
    1b66:	f0 0d       	add	r31, r0
    1b68:	b1 1d       	adc	r27, r1
    1b6a:	aa 1f       	adc	r26, r26
    1b6c:	64 9f       	mul	r22, r20
    1b6e:	66 27       	eor	r22, r22
    1b70:	b0 0d       	add	r27, r0
    1b72:	a1 1d       	adc	r26, r1
    1b74:	66 1f       	adc	r22, r22
    1b76:	82 9f       	mul	r24, r18
    1b78:	22 27       	eor	r18, r18
    1b7a:	b0 0d       	add	r27, r0
    1b7c:	a1 1d       	adc	r26, r1
    1b7e:	62 1f       	adc	r22, r18
    1b80:	73 9f       	mul	r23, r19
    1b82:	b0 0d       	add	r27, r0
    1b84:	a1 1d       	adc	r26, r1
    1b86:	62 1f       	adc	r22, r18
    1b88:	83 9f       	mul	r24, r19
    1b8a:	a0 0d       	add	r26, r0
    1b8c:	61 1d       	adc	r22, r1
    1b8e:	22 1f       	adc	r18, r18
    1b90:	74 9f       	mul	r23, r20
    1b92:	33 27       	eor	r19, r19
    1b94:	a0 0d       	add	r26, r0
    1b96:	61 1d       	adc	r22, r1
    1b98:	23 1f       	adc	r18, r19
    1b9a:	84 9f       	mul	r24, r20
    1b9c:	60 0d       	add	r22, r0
    1b9e:	21 1d       	adc	r18, r1
    1ba0:	82 2f       	mov	r24, r18
    1ba2:	76 2f       	mov	r23, r22
    1ba4:	6a 2f       	mov	r22, r26
    1ba6:	11 24       	eor	r1, r1
    1ba8:	9f 57       	subi	r25, 0x7F	; 127
    1baa:	50 40       	sbci	r21, 0x00	; 0
    1bac:	8a f0       	brmi	.+34     	; 0x1bd0 <__mulsf3_pse+0x84>
    1bae:	e1 f0       	breq	.+56     	; 0x1be8 <__mulsf3_pse+0x9c>
    1bb0:	88 23       	and	r24, r24
    1bb2:	4a f0       	brmi	.+18     	; 0x1bc6 <__mulsf3_pse+0x7a>
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	bb 1f       	adc	r27, r27
    1bba:	66 1f       	adc	r22, r22
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 1f       	adc	r24, r24
    1bc0:	91 50       	subi	r25, 0x01	; 1
    1bc2:	50 40       	sbci	r21, 0x00	; 0
    1bc4:	a9 f7       	brne	.-22     	; 0x1bb0 <__mulsf3_pse+0x64>
    1bc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc8:	51 05       	cpc	r21, r1
    1bca:	70 f0       	brcs	.+28     	; 0x1be8 <__mulsf3_pse+0x9c>
    1bcc:	5c cf       	rjmp	.-328    	; 0x1a86 <__fp_inf>
    1bce:	a6 cf       	rjmp	.-180    	; 0x1b1c <__fp_szero>
    1bd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd2:	ec f3       	brlt	.-6      	; 0x1bce <__mulsf3_pse+0x82>
    1bd4:	98 3e       	cpi	r25, 0xE8	; 232
    1bd6:	dc f3       	brlt	.-10     	; 0x1bce <__mulsf3_pse+0x82>
    1bd8:	86 95       	lsr	r24
    1bda:	77 95       	ror	r23
    1bdc:	67 95       	ror	r22
    1bde:	b7 95       	ror	r27
    1be0:	f7 95       	ror	r31
    1be2:	e7 95       	ror	r30
    1be4:	9f 5f       	subi	r25, 0xFF	; 255
    1be6:	c1 f7       	brne	.-16     	; 0x1bd8 <__mulsf3_pse+0x8c>
    1be8:	fe 2b       	or	r31, r30
    1bea:	88 0f       	add	r24, r24
    1bec:	91 1d       	adc	r25, r1
    1bee:	96 95       	lsr	r25
    1bf0:	87 95       	ror	r24
    1bf2:	97 f9       	bld	r25, 7
    1bf4:	08 95       	ret
    1bf6:	11 f4       	brne	.+4      	; 0x1bfc <__mulsf3_pse+0xb0>
    1bf8:	0e f4       	brtc	.+2      	; 0x1bfc <__mulsf3_pse+0xb0>
    1bfa:	4b cf       	rjmp	.-362    	; 0x1a92 <__fp_nan>
    1bfc:	3e c0       	rjmp	.+124    	; 0x1c7a <__fp_mpack>

00001bfe <sqrt>:
    1bfe:	73 df       	rcall	.-282    	; 0x1ae6 <__fp_splitA>
    1c00:	d0 f3       	brcs	.-12     	; 0x1bf6 <__mulsf3_pse+0xaa>
    1c02:	99 23       	and	r25, r25
    1c04:	d9 f3       	breq	.-10     	; 0x1bfc <__mulsf3_pse+0xb0>
    1c06:	ce f3       	brts	.-14     	; 0x1bfa <__mulsf3_pse+0xae>
    1c08:	9f 57       	subi	r25, 0x7F	; 127
    1c0a:	55 0b       	sbc	r21, r21
    1c0c:	87 ff       	sbrs	r24, 7
    1c0e:	43 d0       	rcall	.+134    	; 0x1c96 <__fp_norm2>
    1c10:	00 24       	eor	r0, r0
    1c12:	a0 e6       	ldi	r26, 0x60	; 96
    1c14:	40 ea       	ldi	r20, 0xA0	; 160
    1c16:	90 01       	movw	r18, r0
    1c18:	80 58       	subi	r24, 0x80	; 128
    1c1a:	56 95       	lsr	r21
    1c1c:	97 95       	ror	r25
    1c1e:	28 f4       	brcc	.+10     	; 0x1c2a <sqrt+0x2c>
    1c20:	80 5c       	subi	r24, 0xC0	; 192
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <sqrt+0x34>
    1c2a:	26 17       	cp	r18, r22
    1c2c:	37 07       	cpc	r19, r23
    1c2e:	48 07       	cpc	r20, r24
    1c30:	30 f4       	brcc	.+12     	; 0x1c3e <sqrt+0x40>
    1c32:	62 1b       	sub	r22, r18
    1c34:	73 0b       	sbc	r23, r19
    1c36:	84 0b       	sbc	r24, r20
    1c38:	20 29       	or	r18, r0
    1c3a:	31 29       	or	r19, r1
    1c3c:	4a 2b       	or	r20, r26
    1c3e:	a6 95       	lsr	r26
    1c40:	17 94       	ror	r1
    1c42:	07 94       	ror	r0
    1c44:	20 25       	eor	r18, r0
    1c46:	31 25       	eor	r19, r1
    1c48:	4a 27       	eor	r20, r26
    1c4a:	58 f7       	brcc	.-42     	; 0x1c22 <sqrt+0x24>
    1c4c:	66 0f       	add	r22, r22
    1c4e:	77 1f       	adc	r23, r23
    1c50:	88 1f       	adc	r24, r24
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <sqrt+0x5e>
    1c54:	26 17       	cp	r18, r22
    1c56:	37 07       	cpc	r19, r23
    1c58:	48 07       	cpc	r20, r24
    1c5a:	30 f4       	brcc	.+12     	; 0x1c68 <sqrt+0x6a>
    1c5c:	62 0b       	sbc	r22, r18
    1c5e:	73 0b       	sbc	r23, r19
    1c60:	84 0b       	sbc	r24, r20
    1c62:	20 0d       	add	r18, r0
    1c64:	31 1d       	adc	r19, r1
    1c66:	41 1d       	adc	r20, r1
    1c68:	a0 95       	com	r26
    1c6a:	81 f7       	brne	.-32     	; 0x1c4c <sqrt+0x4e>
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	84 2f       	mov	r24, r20
    1c70:	91 58       	subi	r25, 0x81	; 129
    1c72:	88 0f       	add	r24, r24
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	08 95       	ret

00001c7a <__fp_mpack>:
    1c7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c7c:	31 f0       	breq	.+12     	; 0x1c8a <__fp_mpack_finite+0xc>

00001c7e <__fp_mpack_finite>:
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	20 f4       	brcc	.+8      	; 0x1c8a <__fp_mpack_finite+0xc>
    1c82:	87 95       	ror	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b7 95       	ror	r27
    1c8a:	88 0f       	add	r24, r24
    1c8c:	91 1d       	adc	r25, r1
    1c8e:	96 95       	lsr	r25
    1c90:	87 95       	ror	r24
    1c92:	97 f9       	bld	r25, 7
    1c94:	08 95       	ret

00001c96 <__fp_norm2>:
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	50 40       	sbci	r21, 0x00	; 0
    1c9a:	66 0f       	add	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	d2 f7       	brpl	.-12     	; 0x1c96 <__fp_norm2>
    1ca2:	08 95       	ret

00001ca4 <_exit>:
    1ca4:	f8 94       	cli

00001ca6 <__stop_program>:
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <__stop_program>
