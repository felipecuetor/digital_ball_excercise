
digital_ball_excercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00001e50  00001ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800098  00800098  00001f1c  2**0
                  ALLOC
  3 .debug_aranges 00000168  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000412  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012f8  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fa  00000000  00000000  0000378e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001209  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00004f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000508  00000000  00000000  00005204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e03  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000650f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (i = 0; i < 8; i++)
	display[i] = im[i];
}
// ************************** fijar Pixel ***************************************
void set_pixel(uint8_t r, uint8_t c, uint8_t value)
{
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
}
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	e1 cb       	rjmp	.-2110   	; 0xfffff7d6 <__eeprom_end+0xff7ef7d6>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e5       	ldi	r30, 0x50	; 80
      3a:	fe e1       	ldi	r31, 0x1E	; 30
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a8 39       	cpi	r26, 0x98	; 152
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	10 e0       	ldi	r17, 0x00	; 0
      4a:	a8 e9       	ldi	r26, 0x98	; 152
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3d       	cpi	r26, 0xD8	; 216
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	20 d1       	rcall	.+576    	; 0x29a <main>
      5a:	f8 ce       	rjmp	.-528    	; 0xfffffe4c <__eeprom_end+0xff7efe4c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <update_now>:
};

//--------definición funciones del sistema ---------------------------------

// ********** Funcion enviar por SPI ***************************************
void update_now(int x, int y){
      5e:	9c 01       	movw	r18, r24
	uint8_t empty = 0b00000000;
	now[0] = empty;
      60:	ad e9       	ldi	r26, 0x9D	; 157
      62:	b0 e0       	ldi	r27, 0x00	; 0
      64:	fd 01       	movw	r30, r26
      66:	11 92       	st	Z+, r1
	now[1] = empty;
      68:	10 82       	st	Z, r1
	now[2] = empty;
      6a:	12 96       	adiw	r26, 0x02	; 2
      6c:	1c 92       	st	X, r1
      6e:	12 97       	sbiw	r26, 0x02	; 2
	now[3] = empty;
      70:	13 96       	adiw	r26, 0x03	; 3
      72:	1c 92       	st	X, r1
      74:	13 97       	sbiw	r26, 0x03	; 3
	now[4] = empty;
      76:	14 96       	adiw	r26, 0x04	; 4
      78:	1c 92       	st	X, r1
      7a:	14 97       	sbiw	r26, 0x04	; 4
	now[5] = empty;
      7c:	15 96       	adiw	r26, 0x05	; 5
      7e:	1c 92       	st	X, r1
      80:	15 97       	sbiw	r26, 0x05	; 5
	now[6] = empty;
      82:	16 96       	adiw	r26, 0x06	; 6
      84:	1c 92       	st	X, r1
	now[7] = empty;
	
	row = 0b10000000;
      86:	80 e8       	ldi	r24, 0x80	; 128
      88:	80 93 c9 00 	sts	0x00C9, r24
	rowTime = 0b11111111;
      8c:	8f ef       	ldi	r24, 0xFF	; 255
      8e:	80 93 c8 00 	sts	0x00C8, r24
	if (x==1)
      92:	21 30       	cpi	r18, 0x01	; 1
      94:	31 05       	cpc	r19, r1
      96:	81 f1       	breq	.+96     	; 0xf8 <update_now+0x9a>
	{
		row = 0b10000000;
	}
	else if (x==2){
      98:	22 30       	cpi	r18, 0x02	; 2
      9a:	31 05       	cpc	r19, r1
      9c:	21 f4       	brne	.+8      	; 0xa6 <update_now+0x48>
		row = 0b01000000;
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	80 93 c9 00 	sts	0x00C9, r24
      a4:	29 c0       	rjmp	.+82     	; 0xf8 <update_now+0x9a>
	}
	else if (x==3){
      a6:	23 30       	cpi	r18, 0x03	; 3
      a8:	31 05       	cpc	r19, r1
      aa:	21 f4       	brne	.+8      	; 0xb4 <update_now+0x56>
		row = 0b00100000;
      ac:	80 e2       	ldi	r24, 0x20	; 32
      ae:	80 93 c9 00 	sts	0x00C9, r24
      b2:	22 c0       	rjmp	.+68     	; 0xf8 <update_now+0x9a>
	}
	else if (x==4){
      b4:	24 30       	cpi	r18, 0x04	; 4
      b6:	31 05       	cpc	r19, r1
      b8:	21 f4       	brne	.+8      	; 0xc2 <update_now+0x64>
		row = 0b00010000;
      ba:	80 e1       	ldi	r24, 0x10	; 16
      bc:	80 93 c9 00 	sts	0x00C9, r24
      c0:	1b c0       	rjmp	.+54     	; 0xf8 <update_now+0x9a>
	}
	else if (x==5){
      c2:	25 30       	cpi	r18, 0x05	; 5
      c4:	31 05       	cpc	r19, r1
      c6:	21 f4       	brne	.+8      	; 0xd0 <update_now+0x72>
		row = 0b00001000;
      c8:	88 e0       	ldi	r24, 0x08	; 8
      ca:	80 93 c9 00 	sts	0x00C9, r24
      ce:	14 c0       	rjmp	.+40     	; 0xf8 <update_now+0x9a>
	}
	else if (x==6){
      d0:	26 30       	cpi	r18, 0x06	; 6
      d2:	31 05       	cpc	r19, r1
      d4:	21 f4       	brne	.+8      	; 0xde <update_now+0x80>
		row = 0b00000100;
      d6:	84 e0       	ldi	r24, 0x04	; 4
      d8:	80 93 c9 00 	sts	0x00C9, r24
      dc:	0d c0       	rjmp	.+26     	; 0xf8 <update_now+0x9a>
	}
	else if (x==7){
      de:	27 30       	cpi	r18, 0x07	; 7
      e0:	31 05       	cpc	r19, r1
      e2:	21 f4       	brne	.+8      	; 0xec <update_now+0x8e>
		row = 0b00000010;
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	80 93 c9 00 	sts	0x00C9, r24
      ea:	06 c0       	rjmp	.+12     	; 0xf8 <update_now+0x9a>
	}
	else if (x==8){
      ec:	28 30       	cpi	r18, 0x08	; 8
      ee:	31 05       	cpc	r19, r1
      f0:	19 f4       	brne	.+6      	; 0xf8 <update_now+0x9a>
		row = 0b00000001;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 c9 00 	sts	0x00C9, r24
	}
	
	if(time>9000){
      f8:	80 91 9b 00 	lds	r24, 0x009B
      fc:	90 91 9c 00 	lds	r25, 0x009C
     100:	23 e2       	ldi	r18, 0x23	; 35
     102:	89 32       	cpi	r24, 0x29	; 41
     104:	92 07       	cpc	r25, r18
     106:	1c f0       	brlt	.+6      	; 0x10e <update_now+0xb0>
		rowTime = 0b00000000;
     108:	10 92 c8 00 	sts	0x00C8, r1
     10c:	3e c0       	rjmp	.+124    	; 0x18a <update_now+0x12c>
	}
	else if(time>8000){
     10e:	2f e1       	ldi	r18, 0x1F	; 31
     110:	81 34       	cpi	r24, 0x41	; 65
     112:	92 07       	cpc	r25, r18
     114:	24 f0       	brlt	.+8      	; 0x11e <update_now+0xc0>
		rowTime = 0b10000000;
     116:	80 e8       	ldi	r24, 0x80	; 128
     118:	80 93 c8 00 	sts	0x00C8, r24
     11c:	36 c0       	rjmp	.+108    	; 0x18a <update_now+0x12c>
	}
	else if(time>7000){
     11e:	2b e1       	ldi	r18, 0x1B	; 27
     120:	89 35       	cpi	r24, 0x59	; 89
     122:	92 07       	cpc	r25, r18
     124:	24 f0       	brlt	.+8      	; 0x12e <update_now+0xd0>
		rowTime = 0b11000000;
     126:	80 ec       	ldi	r24, 0xC0	; 192
     128:	80 93 c8 00 	sts	0x00C8, r24
     12c:	2e c0       	rjmp	.+92     	; 0x18a <update_now+0x12c>
	}
	else if(time>6000){
     12e:	27 e1       	ldi	r18, 0x17	; 23
     130:	81 37       	cpi	r24, 0x71	; 113
     132:	92 07       	cpc	r25, r18
     134:	24 f0       	brlt	.+8      	; 0x13e <update_now+0xe0>
		rowTime = 0b11100000;
     136:	80 ee       	ldi	r24, 0xE0	; 224
     138:	80 93 c8 00 	sts	0x00C8, r24
     13c:	26 c0       	rjmp	.+76     	; 0x18a <update_now+0x12c>
	}
	else if(time>5000){
     13e:	23 e1       	ldi	r18, 0x13	; 19
     140:	89 38       	cpi	r24, 0x89	; 137
     142:	92 07       	cpc	r25, r18
     144:	24 f0       	brlt	.+8      	; 0x14e <update_now+0xf0>
		rowTime = 0b11110000;
     146:	80 ef       	ldi	r24, 0xF0	; 240
     148:	80 93 c8 00 	sts	0x00C8, r24
     14c:	1e c0       	rjmp	.+60     	; 0x18a <update_now+0x12c>
	}
	else if(time>4000){
     14e:	2f e0       	ldi	r18, 0x0F	; 15
     150:	81 3a       	cpi	r24, 0xA1	; 161
     152:	92 07       	cpc	r25, r18
     154:	24 f0       	brlt	.+8      	; 0x15e <update_now+0x100>
		rowTime = 0b11111000;
     156:	88 ef       	ldi	r24, 0xF8	; 248
     158:	80 93 c8 00 	sts	0x00C8, r24
     15c:	16 c0       	rjmp	.+44     	; 0x18a <update_now+0x12c>
	}
	else if(time>3000){
     15e:	2b e0       	ldi	r18, 0x0B	; 11
     160:	89 3b       	cpi	r24, 0xB9	; 185
     162:	92 07       	cpc	r25, r18
     164:	24 f0       	brlt	.+8      	; 0x16e <update_now+0x110>
		rowTime = 0b11111100;
     166:	8c ef       	ldi	r24, 0xFC	; 252
     168:	80 93 c8 00 	sts	0x00C8, r24
     16c:	0e c0       	rjmp	.+28     	; 0x18a <update_now+0x12c>
	}
	else if(time>2000){
     16e:	27 e0       	ldi	r18, 0x07	; 7
     170:	81 3d       	cpi	r24, 0xD1	; 209
     172:	92 07       	cpc	r25, r18
     174:	24 f0       	brlt	.+8      	; 0x17e <update_now+0x120>
		rowTime = 0b11111110;
     176:	8e ef       	ldi	r24, 0xFE	; 254
     178:	80 93 c8 00 	sts	0x00C8, r24
     17c:	06 c0       	rjmp	.+12     	; 0x18a <update_now+0x12c>
	}
	else if(time>1000){
     17e:	89 5e       	subi	r24, 0xE9	; 233
     180:	93 40       	sbci	r25, 0x03	; 3
     182:	1c f0       	brlt	.+6      	; 0x18a <update_now+0x12c>
		rowTime = 0b11111111;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 c8 00 	sts	0x00C8, r24
	}

	now[y-1] = row;
     18a:	ad e9       	ldi	r26, 0x9D	; 157
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	fd 01       	movw	r30, r26
     190:	e6 0f       	add	r30, r22
     192:	f7 1f       	adc	r31, r23
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	80 91 c9 00 	lds	r24, 0x00C9
     19a:	80 83       	st	Z, r24
	now[7] = rowTime;
     19c:	80 91 c8 00 	lds	r24, 0x00C8
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	8c 93       	st	X, r24
}
     1a4:	08 95       	ret

000001a6 <spi_send>:

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
     1a6:	28 2f       	mov	r18, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
	{
		CLK_LOW();
     1aa:	e2 e3       	ldi	r30, 0x32	; 50
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 7d       	andi	r24, 0xDF	; 223
     1b2:	80 83       	st	Z, r24
		if (data & 0x80)
     1b4:	22 23       	and	r18, r18
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <spi_send+0x1a>
			DATA_HIGH();
     1b8:	80 81       	ld	r24, Z
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	80 83       	st	Z, r24
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <spi_send+0x20>
		else
			DATA_LOW();
     1c0:	80 81       	ld	r24, Z
     1c2:	87 7f       	andi	r24, 0xF7	; 247
     1c4:	80 83       	st	Z, r24
			CLK_HIGH();
     1c6:	80 81       	ld	r24, Z
     1c8:	80 62       	ori	r24, 0x20	; 32
     1ca:	80 83       	st	Z, r24
}

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
     1cc:	9f 5f       	subi	r25, 0xFF	; 255
     1ce:	98 30       	cpi	r25, 0x08	; 8
     1d0:	11 f0       	breq	.+4      	; 0x1d6 <spi_send+0x30>
     1d2:	22 0f       	add	r18, r18
     1d4:	ec cf       	rjmp	.-40     	; 0x1ae <spi_send+0x8>
     1d6:	08 95       	ret

000001d8 <max7219_writec>:
	}
	
}
// ********** Escribir en la matriz ***************************************
void max7219_writec(uint8_t high_byte, uint8_t low_byte)
{
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	f6 2e       	mov	r15, r22
	CS_LOW();
     1e0:	02 e3       	ldi	r16, 0x32	; 50
     1e2:	10 e0       	ldi	r17, 0x00	; 0
     1e4:	f8 01       	movw	r30, r16
     1e6:	90 81       	ld	r25, Z
     1e8:	9f 7e       	andi	r25, 0xEF	; 239
     1ea:	90 83       	st	Z, r25
	spi_send(high_byte);
     1ec:	dc df       	rcall	.-72     	; 0x1a6 <spi_send>
	spi_send(low_byte);
     1ee:	8f 2d       	mov	r24, r15
     1f0:	da df       	rcall	.-76     	; 0x1a6 <spi_send>
	CS_HIGH();
     1f2:	f8 01       	movw	r30, r16
     1f4:	80 81       	ld	r24, Z
     1f6:	80 61       	ori	r24, 0x10	; 16
     1f8:	80 83       	st	Z, r24
}
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	ff 90       	pop	r15
     200:	08 95       	ret

00000202 <max7219_clear>:
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
     202:	1f 93       	push	r17
     204:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, 0);
     206:	1f 5f       	subi	r17, 0xFF	; 255
     208:	81 2f       	mov	r24, r17
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	e5 df       	rcall	.-54     	; 0x1d8 <max7219_writec>
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     20e:	18 30       	cpi	r17, 0x08	; 8
     210:	d1 f7       	brne	.-12     	; 0x206 <max7219_clear+0x4>
	{
		max7219_writec(i+1, 0);
	}
}
     212:	1f 91       	pop	r17
     214:	08 95       	ret

00000216 <max7219_init>:
// ********** Inicializar la matriz ***************************************
void max7219_init(void)
{
	INIT_PORT();
     216:	e1 e3       	ldi	r30, 0x31	; 49
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	88 63       	ori	r24, 0x38	; 56
     21e:	80 83       	st	Z, r24
	// Decode mode: none
	max7219_writec(0x04, 0);
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	d9 df       	rcall	.-78     	; 0x1d8 <max7219_writec>
	// Intensity: 3 (0-15)
	max7219_writec(0x0A, 1);
     226:	8a e0       	ldi	r24, 0x0A	; 10
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	d6 df       	rcall	.-84     	; 0x1d8 <max7219_writec>
	// Scan limit: All "digits" (rows) on
	max7219_writec(0x0B, 7);
     22c:	8b e0       	ldi	r24, 0x0B	; 11
     22e:	67 e0       	ldi	r22, 0x07	; 7
     230:	d3 df       	rcall	.-90     	; 0x1d8 <max7219_writec>
	// Shutdown register: Display on
	max7219_writec(0x0C, 1);
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	d0 df       	rcall	.-96     	; 0x1d8 <max7219_writec>
	// Display test: off
	max7219_writec(0x0F, 0);
     238:	8f e0       	ldi	r24, 0x0F	; 15
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	cd df       	rcall	.-102    	; 0x1d8 <max7219_writec>
	max7219_clear();
     23e:	e1 df       	rcall	.-62     	; 0x202 <max7219_clear>
}
     240:	08 95       	ret

00000242 <update_display>:
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	c0 e0       	ldi	r28, 0x00	; 0
     24c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, display[i]);
     24e:	00 ec       	ldi	r16, 0xC0	; 192
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	f8 01       	movw	r30, r16
     254:	ec 0f       	add	r30, r28
     256:	fd 1f       	adc	r31, r29
     258:	9e 01       	movw	r18, r28
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	82 2f       	mov	r24, r18
     25e:	60 81       	ld	r22, Z
     260:	bb df       	rcall	.-138    	; 0x1d8 <max7219_writec>
     262:	21 96       	adiw	r28, 0x01	; 1
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     264:	c8 30       	cpi	r28, 0x08	; 8
     266:	d1 05       	cpc	r29, r1
     268:	a1 f7       	brne	.-24     	; 0x252 <update_display+0x10>
	{
		max7219_writec(i+1, display[i]);
	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <image>:
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
     274:	bc 01       	movw	r22, r24
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	display[i] = im[i];
     27a:	40 ec       	ldi	r20, 0xC0	; 192
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	da 01       	movw	r26, r20
     280:	a2 0f       	add	r26, r18
     282:	b3 1f       	adc	r27, r19
     284:	fb 01       	movw	r30, r22
     286:	e2 0f       	add	r30, r18
     288:	f3 1f       	adc	r31, r19
     28a:	80 81       	ld	r24, Z
     28c:	8c 93       	st	X, r24
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	3f 4f       	sbci	r19, 0xFF	; 255
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     292:	28 30       	cpi	r18, 0x08	; 8
     294:	31 05       	cpc	r19, r1
     296:	99 f7       	brne	.-26     	; 0x27e <image+0xa>
	display[i] = im[i];
}
     298:	08 95       	ret

0000029a <main>:
}


// ------------ Inicio del programa ----------------------------------------
int main(void)
{
     29a:	3f 92       	push	r3
     29c:	4f 92       	push	r4
     29e:	5f 92       	push	r5
     2a0:	6f 92       	push	r6
     2a2:	7f 92       	push	r7
     2a4:	8f 92       	push	r8
     2a6:	9f 92       	push	r9
     2a8:	af 92       	push	r10
     2aa:	bf 92       	push	r11
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	df 93       	push	r29
     2ba:	cf 93       	push	r28
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	a4 97       	sbiw	r28, 0x24	; 36
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
		DDRB = 0x01;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	87 bb       	out	0x17, r24	; 23
		int16_t ax = 0;
     2d0:	1a 82       	std	Y+2, r1	; 0x02
     2d2:	19 82       	std	Y+1, r1	; 0x01
		int16_t ay = 0;
     2d4:	1c 82       	std	Y+4, r1	; 0x04
     2d6:	1b 82       	std	Y+3, r1	; 0x03
		int16_t az = 0;
     2d8:	1e 82       	std	Y+6, r1	; 0x06
     2da:	1d 82       	std	Y+5, r1	; 0x05
		int16_t gx = 0;
     2dc:	18 86       	std	Y+8, r1	; 0x08
     2de:	1f 82       	std	Y+7, r1	; 0x07
		int16_t gy = 0;
     2e0:	1a 86       	std	Y+10, r1	; 0x0a
     2e2:	19 86       	std	Y+9, r1	; 0x09
		int16_t gz = 0;
     2e4:	1c 86       	std	Y+12, r1	; 0x0c
     2e6:	1b 86       	std	Y+11, r1	; 0x0b
		double axg = 0;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	8d 87       	std	Y+13, r24	; 0x0d
     2f2:	9e 87       	std	Y+14, r25	; 0x0e
     2f4:	af 87       	std	Y+15, r26	; 0x0f
     2f6:	b8 8b       	std	Y+16, r27	; 0x10
		double ayg = 0;
     2f8:	89 8b       	std	Y+17, r24	; 0x11
     2fa:	9a 8b       	std	Y+18, r25	; 0x12
     2fc:	ab 8b       	std	Y+19, r26	; 0x13
     2fe:	bc 8b       	std	Y+20, r27	; 0x14
		double azg = 0;
     300:	8d 8b       	std	Y+21, r24	; 0x15
     302:	9e 8b       	std	Y+22, r25	; 0x16
     304:	af 8b       	std	Y+23, r26	; 0x17
     306:	b8 8f       	std	Y+24, r27	; 0x18
		double gxds = 0;
     308:	89 8f       	std	Y+25, r24	; 0x19
     30a:	9a 8f       	std	Y+26, r25	; 0x1a
     30c:	ab 8f       	std	Y+27, r26	; 0x1b
     30e:	bc 8f       	std	Y+28, r27	; 0x1c
		double gyds = 0;
     310:	8d 8f       	std	Y+29, r24	; 0x1d
     312:	9e 8f       	std	Y+30, r25	; 0x1e
     314:	af 8f       	std	Y+31, r26	; 0x1f
     316:	b8 a3       	std	Y+32, r27	; 0x20
		double gzds = 0;
     318:	89 a3       	std	Y+33, r24	; 0x21
     31a:	9a a3       	std	Y+34, r25	; 0x22
     31c:	ab a3       	std	Y+35, r26	; 0x23
     31e:	bc a3       	std	Y+36, r27	; 0x24

		//init interrupt
		sei();
     320:	78 94       	sei
		//init mpu6050
		mpu6050_init();
     322:	02 d9       	rcall	.-3580   	; 0xfffff528 <__eeprom_end+0xff7ef528>
     324:	84 ef       	ldi	r24, 0xF4	; 244
     326:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     328:	20 e9       	ldi	r18, 0x90	; 144
     32a:	31 e0       	ldi	r19, 0x01	; 1
     32c:	f9 01       	movw	r30, r18
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <main+0x94>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     334:	d9 f7       	brne	.-10     	; 0x32c <main+0x92>
		_delay_ms(50);
	
	
	int velocity_delay = 250;
	max7219_init(); // llamado de la funcion "max7219_init"
     336:	6f df       	rcall	.-290    	; 0x216 <max7219_init>
	update_now(x,y);
     338:	60 91 62 00 	lds	r22, 0x0062
     33c:	70 91 63 00 	lds	r23, 0x0063
     340:	80 91 60 00 	lds	r24, 0x0060
     344:	90 91 61 00 	lds	r25, 0x0061
     348:	8a de       	rcall	.-748    	; 0x5e <update_now>
	image(start);  // carga la imagen a visualizar
     34a:	88 e6       	ldi	r24, 0x68	; 104
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	92 df       	rcall	.-220    	; 0x274 <image>
	update_display();
     350:	78 df       	rcall	.-272    	; 0x242 <update_display>
     352:	0f 2e       	mov	r0, r31
     354:	fa ef       	ldi	r31, 0xFA	; 250
     356:	4f 2e       	mov	r4, r31
     358:	55 24       	eor	r5, r5
     35a:	f0 2d       	mov	r31, r0
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     35c:	0f 2e       	mov	r0, r31
     35e:	f0 e3       	ldi	r31, 0x30	; 48
     360:	8f 2e       	mov	r8, r31
     362:	99 24       	eor	r9, r9
     364:	f0 2d       	mov	r31, r0
     366:	66 24       	eor	r6, r6
     368:	77 24       	eor	r7, r7
     36a:	63 94       	inc	r6
		if (count >= 4) {
			// The button have not bounced for four checks, change state
			button_state = current_state;
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
				button6_down = 1;
     36c:	33 24       	eor	r3, r3
     36e:	33 94       	inc	r3
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     370:	f4 01       	movw	r30, r8
     372:	80 81       	ld	r24, Z
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	00 24       	eor	r0, r0
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	00 1c       	adc	r0, r0
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	00 1c       	adc	r0, r0
     384:	89 2f       	mov	r24, r25
     386:	90 2d       	mov	r25, r0
     388:	86 25       	eor	r24, r6
     38a:	97 25       	eor	r25, r7
     38c:	98 2f       	mov	r25, r24
     38e:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     390:	80 91 90 00 	lds	r24, 0x0090
     394:	98 17       	cp	r25, r24
     396:	81 f0       	breq	.+32     	; 0x3b8 <main+0x11e>
		// Button state is about to be changed, increase counter
		count++;
     398:	80 91 a5 00 	lds	r24, 0x00A5
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 a5 00 	sts	0x00A5, r24
		if (count >= 4) {
     3a2:	84 30       	cpi	r24, 0x04	; 4
     3a4:	58 f0       	brcs	.+22     	; 0x3bc <main+0x122>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     3a6:	90 93 90 00 	sts	0x0090, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     3aa:	99 23       	and	r25, r25
     3ac:	11 f0       	breq	.+4      	; 0x3b2 <main+0x118>
				button6_down = 1;
     3ae:	30 92 98 00 	sts	0x0098, r3
			}
			count = 0;
     3b2:	10 92 a5 00 	sts	0x00A5, r1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <main+0x122>
		}
		} else {
		// Reset counter
		count = 0;
     3b8:	10 92 a5 00 	sts	0x00A5, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON7_MASK) != 0;
     3bc:	f4 01       	movw	r30, r8
     3be:	80 81       	ld	r24, Z
     3c0:	88 23       	and	r24, r24
     3c2:	80 95       	com	r24
     3c4:	98 2f       	mov	r25, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	99 27       	eor	r25, r25
     3ca:	99 1f       	adc	r25, r25
	if (current_state != button_state) {
     3cc:	80 91 91 00 	lds	r24, 0x0091
     3d0:	98 17       	cp	r25, r24
     3d2:	81 f0       	breq	.+32     	; 0x3f4 <main+0x15a>
		// Button state is about to be changed, increase counter
		count++;
     3d4:	80 91 a6 00 	lds	r24, 0x00A6
     3d8:	8f 5f       	subi	r24, 0xFF	; 255
     3da:	80 93 a6 00 	sts	0x00A6, r24
		if (count >= 4) {
     3de:	84 30       	cpi	r24, 0x04	; 4
     3e0:	58 f0       	brcs	.+22     	; 0x3f8 <main+0x15e>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     3e2:	90 93 91 00 	sts	0x0091, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     3e6:	99 23       	and	r25, r25
     3e8:	11 f0       	breq	.+4      	; 0x3ee <main+0x154>
				button7_down = 1;
     3ea:	30 92 99 00 	sts	0x0099, r3
			}
			count = 0;
     3ee:	10 92 a6 00 	sts	0x00A6, r1
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <main+0x15e>
		}
		} else {
		// Reset counter
		count = 0;
     3f4:	10 92 a6 00 	sts	0x00A6, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON2_MASK) != 0;
     3f8:	f4 01       	movw	r30, r8
     3fa:	80 81       	ld	r24, Z
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	96 95       	lsr	r25
     400:	87 95       	ror	r24
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	86 25       	eor	r24, r6
     408:	97 25       	eor	r25, r7
     40a:	98 2f       	mov	r25, r24
     40c:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     40e:	80 91 92 00 	lds	r24, 0x0092
     412:	98 17       	cp	r25, r24
     414:	81 f0       	breq	.+32     	; 0x436 <main+0x19c>
		// Button state is about to be changed, increase counter
		count++;
     416:	80 91 a7 00 	lds	r24, 0x00A7
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	80 93 a7 00 	sts	0x00A7, r24
		if (count >= 100) {
     420:	84 36       	cpi	r24, 0x64	; 100
     422:	58 f0       	brcs	.+22     	; 0x43a <main+0x1a0>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     424:	90 93 92 00 	sts	0x0092, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     428:	99 23       	and	r25, r25
     42a:	11 f0       	breq	.+4      	; 0x430 <main+0x196>
				button2_down = 1;
     42c:	30 92 9a 00 	sts	0x009A, r3
			}
			count = 0;
     430:	10 92 a7 00 	sts	0x00A7, r1
     434:	02 c0       	rjmp	.+4      	; 0x43a <main+0x1a0>
		}
		} else {
		// Reset counter
		count = 0;
     436:	10 92 a7 00 	sts	0x00A7, r1
	while(1)  // loop infinito
	{
		debouncebtn6();
		debouncebtn7();
		debouncebtn2();
		if(button6_down)
     43a:	80 91 98 00 	lds	r24, 0x0098
     43e:	88 23       	and	r24, r24
     440:	49 f1       	breq	.+82     	; 0x494 <__stack+0x35>
		{
			if(state==0){
     442:	80 91 66 00 	lds	r24, 0x0066
     446:	90 91 67 00 	lds	r25, 0x0067
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	41 f4       	brne	.+16     	; 0x45e <main+0x1c4>
				image(start);  // carga la imagen a visualizar
     44e:	88 e6       	ldi	r24, 0x68	; 104
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	10 df       	rcall	.-480    	; 0x274 <image>
				state = 1;
     454:	70 92 67 00 	sts	0x0067, r7
     458:	60 92 66 00 	sts	0x0066, r6
     45c:	18 c0       	rjmp	.+48     	; 0x48e <__stack+0x2f>
			}
			else if(state == 1){
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	91 05       	cpc	r25, r1
     462:	51 f4       	brne	.+20     	; 0x478 <__stack+0x19>
				image(menuLevel1);
     464:	80 e7       	ldi	r24, 0x70	; 112
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	05 df       	rcall	.-502    	; 0x274 <image>
				state = 2;
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	90 93 67 00 	sts	0x0067, r25
     472:	80 93 66 00 	sts	0x0066, r24
     476:	0b c0       	rjmp	.+22     	; 0x48e <__stack+0x2f>
			}
			else if(state == 2){
     478:	02 97       	sbiw	r24, 0x02	; 2
     47a:	49 f4       	brne	.+18     	; 0x48e <__stack+0x2f>
				image(now);
     47c:	8d e9       	ldi	r24, 0x9D	; 157
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	f9 de       	rcall	.-526    	; 0x274 <image>
				state = 3;
     482:	e3 e0       	ldi	r30, 0x03	; 3
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	f0 93 67 00 	sts	0x0067, r31
     48a:	e0 93 66 00 	sts	0x0066, r30
			}
			update_display();
     48e:	d9 de       	rcall	.-590    	; 0x242 <update_display>
			button6_down = 0;
     490:	10 92 98 00 	sts	0x0098, r1
		}
		
		if(button7_down)
     494:	80 91 99 00 	lds	r24, 0x0099
     498:	88 23       	and	r24, r24
     49a:	09 f4       	brne	.+2      	; 0x49e <__stack+0x3f>
     49c:	42 c0       	rjmp	.+132    	; 0x522 <__stack+0xc3>
		{
			if(state!=2){
     49e:	80 91 66 00 	lds	r24, 0x0066
     4a2:	90 91 67 00 	lds	r25, 0x0067
     4a6:	02 97       	sbiw	r24, 0x02	; 2
     4a8:	21 f0       	breq	.+8      	; 0x4b2 <__stack+0x53>
				image(start);
     4aa:	88 e6       	ldi	r24, 0x68	; 104
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	e2 de       	rcall	.-572    	; 0x274 <image>
     4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__stack+0x75>
			}
			else if(menu<4){
     4b2:	80 91 64 00 	lds	r24, 0x0064
     4b6:	90 91 65 00 	lds	r25, 0x0065
     4ba:	84 30       	cpi	r24, 0x04	; 4
     4bc:	91 05       	cpc	r25, r1
     4be:	34 f4       	brge	.+12     	; 0x4cc <__stack+0x6d>
				menu = menu+1;
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 65 00 	sts	0x0065, r25
     4c6:	80 93 64 00 	sts	0x0064, r24
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__stack+0x75>
			}
			else{
				menu = 1;
     4cc:	70 92 65 00 	sts	0x0065, r7
     4d0:	60 92 64 00 	sts	0x0064, r6
			}
			if(state==1){
     4d4:	80 91 66 00 	lds	r24, 0x0066
     4d8:	90 91 67 00 	lds	r25, 0x0067
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f0       	breq	.+60     	; 0x51c <__stack+0xbd>
			}
			else if(menu==1){image(menuLevel1);}
     4e0:	80 91 64 00 	lds	r24, 0x0064
     4e4:	90 91 65 00 	lds	r25, 0x0065
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	91 05       	cpc	r25, r1
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <__stack+0x97>
     4ee:	80 e7       	ldi	r24, 0x70	; 112
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	c0 de       	rcall	.-640    	; 0x274 <image>
     4f4:	13 c0       	rjmp	.+38     	; 0x51c <__stack+0xbd>
			else if(menu==2){image(menuLevel2);}
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	91 05       	cpc	r25, r1
     4fa:	21 f4       	brne	.+8      	; 0x504 <__stack+0xa5>
     4fc:	88 e7       	ldi	r24, 0x78	; 120
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	b9 de       	rcall	.-654    	; 0x274 <image>
     502:	0c c0       	rjmp	.+24     	; 0x51c <__stack+0xbd>
			else if(menu==3){image(menuLevel3);}
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	91 05       	cpc	r25, r1
     508:	21 f4       	brne	.+8      	; 0x512 <__stack+0xb3>
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	b2 de       	rcall	.-668    	; 0x274 <image>
     510:	05 c0       	rjmp	.+10     	; 0x51c <__stack+0xbd>
			else if(menu==4){image(menuLevel4);}
     512:	04 97       	sbiw	r24, 0x04	; 4
     514:	19 f4       	brne	.+6      	; 0x51c <__stack+0xbd>
     516:	88 e8       	ldi	r24, 0x88	; 136
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	ac de       	rcall	.-680    	; 0x274 <image>
			update_display();
     51c:	92 de       	rcall	.-732    	; 0x242 <update_display>
			button7_down = 0;
     51e:	10 92 99 00 	sts	0x0099, r1
		}
		
		
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	be 01       	movw	r22, r28
     528:	6d 5f       	subi	r22, 0xFD	; 253
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	ae 01       	movw	r20, r28
     52e:	4b 5f       	subi	r20, 0xFB	; 251
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	9e 01       	movw	r18, r28
     534:	29 5f       	subi	r18, 0xF9	; 249
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	8e 01       	movw	r16, r28
     53a:	07 5f       	subi	r16, 0xF7	; 247
     53c:	1f 4f       	sbci	r17, 0xFF	; 255
     53e:	0f 2e       	mov	r0, r31
     540:	fb e0       	ldi	r31, 0x0B	; 11
     542:	ef 2e       	mov	r14, r31
     544:	ff 24       	eor	r15, r15
     546:	f0 2d       	mov	r31, r0
     548:	ec 0e       	add	r14, r28
     54a:	fd 1e       	adc	r15, r29
     54c:	2e d6       	rcall	.+3164   	; 0x11aa <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     54e:	ce 01       	movw	r24, r28
     550:	0d 96       	adiw	r24, 0x0d	; 13
     552:	be 01       	movw	r22, r28
     554:	6f 5e       	subi	r22, 0xEF	; 239
     556:	7f 4f       	sbci	r23, 0xFF	; 255
     558:	ae 01       	movw	r20, r28
     55a:	4b 5e       	subi	r20, 0xEB	; 235
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	9e 01       	movw	r18, r28
     560:	27 5e       	subi	r18, 0xE7	; 231
     562:	3f 4f       	sbci	r19, 0xFF	; 255
     564:	8e 01       	movw	r16, r28
     566:	03 5e       	subi	r16, 0xE3	; 227
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	0f 2e       	mov	r0, r31
     56c:	f1 e2       	ldi	r31, 0x21	; 33
     56e:	ef 2e       	mov	r14, r31
     570:	ff 24       	eor	r15, r15
     572:	f0 2d       	mov	r31, r0
     574:	ec 0e       	add	r14, r28
     576:	fd 1e       	adc	r15, r29
     578:	92 d6       	rcall	.+3364   	; 0x129e <mpu6050_getConvData>
		if(state==3){
     57a:	80 91 66 00 	lds	r24, 0x0066
     57e:	90 91 67 00 	lds	r25, 0x0067
     582:	03 97       	sbiw	r24, 0x03	; 3
     584:	09 f0       	breq	.+2      	; 0x588 <__stack+0x129>
     586:	f4 ce       	rjmp	.-536    	; 0x370 <main+0xd6>
			if(ayg<-0.1){
     588:	e9 88       	ldd	r14, Y+17	; 0x11
     58a:	fa 88       	ldd	r15, Y+18	; 0x12
     58c:	0b 89       	ldd	r16, Y+19	; 0x13
     58e:	1c 89       	ldd	r17, Y+20	; 0x14
     590:	c8 01       	movw	r24, r16
     592:	b7 01       	movw	r22, r14
     594:	2d ec       	ldi	r18, 0xCD	; 205
     596:	3c ec       	ldi	r19, 0xCC	; 204
     598:	4c ec       	ldi	r20, 0xCC	; 204
     59a:	5d eb       	ldi	r21, 0xBD	; 189
     59c:	4f da       	rcall	.-2914   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     59e:	88 23       	and	r24, r24
     5a0:	94 f5       	brge	.+100    	; 0x606 <__stack+0x1a7>
				if(ayg<-0.5){
     5a2:	c8 01       	movw	r24, r16
     5a4:	b7 01       	movw	r22, r14
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	5f eb       	ldi	r21, 0xBF	; 191
     5ae:	46 da       	rcall	.-2932   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     5b0:	88 23       	and	r24, r24
     5b2:	34 f4       	brge	.+12     	; 0x5c0 <__stack+0x161>
     5b4:	0f 2e       	mov	r0, r31
     5b6:	f2 e3       	ldi	r31, 0x32	; 50
     5b8:	4f 2e       	mov	r4, r31
     5ba:	55 24       	eor	r5, r5
     5bc:	f0 2d       	mov	r31, r0
     5be:	14 c0       	rjmp	.+40     	; 0x5e8 <__stack+0x189>
					velocity_delay = 50;
				}
				else if(ayg<-0.3){
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	2a e9       	ldi	r18, 0x9A	; 154
     5c6:	39 e9       	ldi	r19, 0x99	; 153
     5c8:	49 e9       	ldi	r20, 0x99	; 153
     5ca:	5e eb       	ldi	r21, 0xBE	; 190
     5cc:	37 da       	rcall	.-2962   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     5ce:	88 23       	and	r24, r24
     5d0:	34 f0       	brlt	.+12     	; 0x5de <__stack+0x17f>
     5d2:	0f 2e       	mov	r0, r31
     5d4:	fa ef       	ldi	r31, 0xFA	; 250
     5d6:	4f 2e       	mov	r4, r31
     5d8:	55 24       	eor	r5, r5
     5da:	f0 2d       	mov	r31, r0
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__stack+0x189>
     5de:	0f 2e       	mov	r0, r31
     5e0:	f6 e9       	ldi	r31, 0x96	; 150
     5e2:	4f 2e       	mov	r4, r31
     5e4:	55 24       	eor	r5, r5
     5e6:	f0 2d       	mov	r31, r0
				}
				else{
					velocity_delay = 250;
				}
				
				PORTB = 0b00000001;
     5e8:	38 ba       	out	0x18, r3	; 24
				if(y>1){
     5ea:	80 91 62 00 	lds	r24, 0x0062
     5ee:	90 91 63 00 	lds	r25, 0x0063
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	91 05       	cpc	r25, r1
     5f6:	0c f4       	brge	.+2      	; 0x5fa <__stack+0x19b>
     5f8:	3f c0       	rjmp	.+126    	; 0x678 <__stack+0x219>
					y=y-1;
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	90 93 63 00 	sts	0x0063, r25
     600:	80 93 62 00 	sts	0x0062, r24
     604:	39 c0       	rjmp	.+114    	; 0x678 <__stack+0x219>
				}
			}
			else if(ayg>0.1){
     606:	c8 01       	movw	r24, r16
     608:	b7 01       	movw	r22, r14
     60a:	2d ec       	ldi	r18, 0xCD	; 205
     60c:	3c ec       	ldi	r19, 0xCC	; 204
     60e:	4c ec       	ldi	r20, 0xCC	; 204
     610:	5d e3       	ldi	r21, 0x3D	; 61
     612:	5e db       	rcall	.-2372   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     614:	18 16       	cp	r1, r24
     616:	84 f5       	brge	.+96     	; 0x678 <__stack+0x219>
				if(ayg>0.5){
     618:	c8 01       	movw	r24, r16
     61a:	b7 01       	movw	r22, r14
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	5f e3       	ldi	r21, 0x3F	; 63
     624:	55 db       	rcall	.-2390   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     626:	18 16       	cp	r1, r24
     628:	34 f4       	brge	.+12     	; 0x636 <__stack+0x1d7>
     62a:	0f 2e       	mov	r0, r31
     62c:	f2 e3       	ldi	r31, 0x32	; 50
     62e:	4f 2e       	mov	r4, r31
     630:	55 24       	eor	r5, r5
     632:	f0 2d       	mov	r31, r0
     634:	14 c0       	rjmp	.+40     	; 0x65e <__stack+0x1ff>
					velocity_delay = 50;
				}
				else if(ayg>0.3){
     636:	c8 01       	movw	r24, r16
     638:	b7 01       	movw	r22, r14
     63a:	2a e9       	ldi	r18, 0x9A	; 154
     63c:	39 e9       	ldi	r19, 0x99	; 153
     63e:	49 e9       	ldi	r20, 0x99	; 153
     640:	5e e3       	ldi	r21, 0x3E	; 62
     642:	46 db       	rcall	.-2420   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     644:	18 16       	cp	r1, r24
     646:	34 f0       	brlt	.+12     	; 0x654 <__stack+0x1f5>
     648:	0f 2e       	mov	r0, r31
     64a:	fa ef       	ldi	r31, 0xFA	; 250
     64c:	4f 2e       	mov	r4, r31
     64e:	55 24       	eor	r5, r5
     650:	f0 2d       	mov	r31, r0
     652:	05 c0       	rjmp	.+10     	; 0x65e <__stack+0x1ff>
     654:	0f 2e       	mov	r0, r31
     656:	f6 e9       	ldi	r31, 0x96	; 150
     658:	4f 2e       	mov	r4, r31
     65a:	55 24       	eor	r5, r5
     65c:	f0 2d       	mov	r31, r0
					velocity_delay = 150;
				}
				else{
					velocity_delay = 250;
				}
				PORTB = 0b00000001;
     65e:	38 ba       	out	0x18, r3	; 24
				if(y<7){
     660:	80 91 62 00 	lds	r24, 0x0062
     664:	90 91 63 00 	lds	r25, 0x0063
     668:	87 30       	cpi	r24, 0x07	; 7
     66a:	91 05       	cpc	r25, r1
     66c:	2c f4       	brge	.+10     	; 0x678 <__stack+0x219>
					y=y+1;
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	90 93 63 00 	sts	0x0063, r25
     674:	80 93 62 00 	sts	0x0062, r24
				}
			}
			if(axg<-0.1){
     678:	ed 84       	ldd	r14, Y+13	; 0x0d
     67a:	fe 84       	ldd	r15, Y+14	; 0x0e
     67c:	0f 85       	ldd	r16, Y+15	; 0x0f
     67e:	18 89       	ldd	r17, Y+16	; 0x10
     680:	c8 01       	movw	r24, r16
     682:	b7 01       	movw	r22, r14
     684:	2d ec       	ldi	r18, 0xCD	; 205
     686:	3c ec       	ldi	r19, 0xCC	; 204
     688:	4c ec       	ldi	r20, 0xCC	; 204
     68a:	5d eb       	ldi	r21, 0xBD	; 189
     68c:	d7 d9       	rcall	.-3154   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     68e:	88 23       	and	r24, r24
     690:	94 f5       	brge	.+100    	; 0x6f6 <__stack+0x297>
				if(axg<-0.5){
     692:	c8 01       	movw	r24, r16
     694:	b7 01       	movw	r22, r14
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	5f eb       	ldi	r21, 0xBF	; 191
     69e:	ce d9       	rcall	.-3172   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     6a0:	88 23       	and	r24, r24
     6a2:	34 f4       	brge	.+12     	; 0x6b0 <__stack+0x251>
     6a4:	0f 2e       	mov	r0, r31
     6a6:	f2 e3       	ldi	r31, 0x32	; 50
     6a8:	4f 2e       	mov	r4, r31
     6aa:	55 24       	eor	r5, r5
     6ac:	f0 2d       	mov	r31, r0
     6ae:	14 c0       	rjmp	.+40     	; 0x6d8 <__stack+0x279>
					velocity_delay = 50;
				}
				else if(axg<-0.3){
     6b0:	c8 01       	movw	r24, r16
     6b2:	b7 01       	movw	r22, r14
     6b4:	2a e9       	ldi	r18, 0x9A	; 154
     6b6:	39 e9       	ldi	r19, 0x99	; 153
     6b8:	49 e9       	ldi	r20, 0x99	; 153
     6ba:	5e eb       	ldi	r21, 0xBE	; 190
     6bc:	bf d9       	rcall	.-3202   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     6be:	88 23       	and	r24, r24
     6c0:	34 f0       	brlt	.+12     	; 0x6ce <__stack+0x26f>
     6c2:	0f 2e       	mov	r0, r31
     6c4:	fa ef       	ldi	r31, 0xFA	; 250
     6c6:	4f 2e       	mov	r4, r31
     6c8:	55 24       	eor	r5, r5
     6ca:	f0 2d       	mov	r31, r0
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__stack+0x279>
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f6 e9       	ldi	r31, 0x96	; 150
     6d2:	4f 2e       	mov	r4, r31
     6d4:	55 24       	eor	r5, r5
     6d6:	f0 2d       	mov	r31, r0
				}
				else{
					velocity_delay = 250;
				}
				
				PORTB = 0b00000001;
     6d8:	38 ba       	out	0x18, r3	; 24
				if(x>1){
     6da:	80 91 60 00 	lds	r24, 0x0060
     6de:	90 91 61 00 	lds	r25, 0x0061
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	91 05       	cpc	r25, r1
     6e6:	0c f4       	brge	.+2      	; 0x6ea <__stack+0x28b>
     6e8:	41 c0       	rjmp	.+130    	; 0x76c <__stack+0x30d>
					x=x-1;
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	90 93 61 00 	sts	0x0061, r25
     6f0:	80 93 60 00 	sts	0x0060, r24
     6f4:	3b c0       	rjmp	.+118    	; 0x76c <__stack+0x30d>
				}
			}
			else if(axg>0.1){
     6f6:	c8 01       	movw	r24, r16
     6f8:	b7 01       	movw	r22, r14
     6fa:	2d ec       	ldi	r18, 0xCD	; 205
     6fc:	3c ec       	ldi	r19, 0xCC	; 204
     6fe:	4c ec       	ldi	r20, 0xCC	; 204
     700:	5d e3       	ldi	r21, 0x3D	; 61
     702:	e6 da       	rcall	.-2612   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     704:	18 16       	cp	r1, r24
     706:	8c f5       	brge	.+98     	; 0x76a <__stack+0x30b>
				if(axg>0.5){
     708:	c8 01       	movw	r24, r16
     70a:	b7 01       	movw	r22, r14
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	dd da       	rcall	.-2630   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     716:	18 16       	cp	r1, r24
     718:	34 f4       	brge	.+12     	; 0x726 <__stack+0x2c7>
     71a:	0f 2e       	mov	r0, r31
     71c:	f2 e3       	ldi	r31, 0x32	; 50
     71e:	4f 2e       	mov	r4, r31
     720:	55 24       	eor	r5, r5
     722:	f0 2d       	mov	r31, r0
     724:	14 c0       	rjmp	.+40     	; 0x74e <__stack+0x2ef>
					velocity_delay = 50;
				}
				else if(axg>0.3){
     726:	c8 01       	movw	r24, r16
     728:	b7 01       	movw	r22, r14
     72a:	2a e9       	ldi	r18, 0x9A	; 154
     72c:	39 e9       	ldi	r19, 0x99	; 153
     72e:	49 e9       	ldi	r20, 0x99	; 153
     730:	5e e3       	ldi	r21, 0x3E	; 62
     732:	ce da       	rcall	.-2660   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     734:	18 16       	cp	r1, r24
     736:	34 f0       	brlt	.+12     	; 0x744 <__stack+0x2e5>
     738:	0f 2e       	mov	r0, r31
     73a:	fa ef       	ldi	r31, 0xFA	; 250
     73c:	4f 2e       	mov	r4, r31
     73e:	55 24       	eor	r5, r5
     740:	f0 2d       	mov	r31, r0
     742:	05 c0       	rjmp	.+10     	; 0x74e <__stack+0x2ef>
     744:	0f 2e       	mov	r0, r31
     746:	f6 e9       	ldi	r31, 0x96	; 150
     748:	4f 2e       	mov	r4, r31
     74a:	55 24       	eor	r5, r5
     74c:	f0 2d       	mov	r31, r0
					velocity_delay = 150;
				}
				else{
					velocity_delay = 250;
				}
				PORTB = 0b00000001;
     74e:	38 ba       	out	0x18, r3	; 24
				if(x<8){
     750:	80 91 60 00 	lds	r24, 0x0060
     754:	90 91 61 00 	lds	r25, 0x0061
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	91 05       	cpc	r25, r1
     75c:	3c f4       	brge	.+14     	; 0x76c <__stack+0x30d>
					x=x+1;
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 61 00 	sts	0x0061, r25
     764:	80 93 60 00 	sts	0x0060, r24
     768:	01 c0       	rjmp	.+2      	; 0x76c <__stack+0x30d>
				}
				
			}
			else{
				PORTB = 0b00000000;
     76a:	18 ba       	out	0x18, r1	; 24
			}
			_delay_ms(velocity_delay);
     76c:	b2 01       	movw	r22, r4
     76e:	88 27       	eor	r24, r24
     770:	77 fd       	sbrc	r23, 7
     772:	80 95       	com	r24
     774:	98 2f       	mov	r25, r24
     776:	fc d9       	rcall	.-3080   	; 0xfffffb70 <__eeprom_end+0xff7efb70>
     778:	5b 01       	movw	r10, r22
     77a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	4a e7       	ldi	r20, 0x7A	; 122
     782:	55 e4       	ldi	r21, 0x45	; 69
     784:	a9 da       	rcall	.-2734   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     786:	7b 01       	movw	r14, r22
     788:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e8       	ldi	r20, 0x80	; 128
     790:	5f e3       	ldi	r21, 0x3F	; 63
     792:	54 d9       	rcall	.-3416   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     794:	88 23       	and	r24, r24
     796:	14 f4       	brge	.+4      	; 0x79c <__stack+0x33d>
     798:	b3 01       	movw	r22, r6
     79a:	1e c0       	rjmp	.+60     	; 0x7d8 <__stack+0x379>
		__ticks = 1;
	else if (__tmp > 65535)
     79c:	c8 01       	movw	r24, r16
     79e:	b7 01       	movw	r22, r14
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	4f e7       	ldi	r20, 0x7F	; 127
     7a6:	57 e4       	ldi	r21, 0x47	; 71
     7a8:	93 da       	rcall	.-2778   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     7aa:	18 16       	cp	r1, r24
     7ac:	94 f4       	brge	.+36     	; 0x7d2 <__stack+0x373>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ae:	c6 01       	movw	r24, r12
     7b0:	b5 01       	movw	r22, r10
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e2       	ldi	r20, 0x20	; 32
     7b8:	51 e4       	ldi	r21, 0x41	; 65
     7ba:	8e da       	rcall	.-2788   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     7bc:	ab d9       	rcall	.-3242   	; 0xfffffb14 <__eeprom_end+0xff7efb14>
     7be:	cb 01       	movw	r24, r22
		while(__ticks)
     7c0:	67 2b       	or	r22, r23
     7c2:	69 f0       	breq	.+26     	; 0x7de <__stack+0x37f>
     7c4:	e0 e9       	ldi	r30, 0x90	; 144
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <__stack+0x369>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <__stack+0x365>
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <__stack+0x37f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d2:	c8 01       	movw	r24, r16
     7d4:	b7 01       	movw	r22, r14
     7d6:	9e d9       	rcall	.-3268   	; 0xfffffb14 <__eeprom_end+0xff7efb14>
     7d8:	cb 01       	movw	r24, r22
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <__stack+0x37b>
			time = time + velocity_delay;
     7de:	80 91 9b 00 	lds	r24, 0x009B
     7e2:	90 91 9c 00 	lds	r25, 0x009C
     7e6:	84 0d       	add	r24, r4
     7e8:	95 1d       	adc	r25, r5
     7ea:	90 93 9c 00 	sts	0x009C, r25
     7ee:	80 93 9b 00 	sts	0x009B, r24
			update_now(x,y);
     7f2:	60 91 62 00 	lds	r22, 0x0062
     7f6:	70 91 63 00 	lds	r23, 0x0063
     7fa:	80 91 60 00 	lds	r24, 0x0060
     7fe:	90 91 61 00 	lds	r25, 0x0061
     802:	2d dc       	rcall	.-1958   	; 0x5e <update_now>
			image(now);
     804:	8d e9       	ldi	r24, 0x9D	; 157
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	35 dd       	rcall	.-1430   	; 0x274 <image>
			update_display();
     80a:	1b dd       	rcall	.-1482   	; 0x242 <update_display>
     80c:	b1 cd       	rjmp	.-1182   	; 0x370 <main+0xd6>

0000080e <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     80e:	2f 92       	push	r2
     810:	3f 92       	push	r3
     812:	4f 92       	push	r4
     814:	5f 92       	push	r5
     816:	6f 92       	push	r6
     818:	7f 92       	push	r7
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	cc 54       	subi	r28, 0x4C	; 76
     838:	d0 40       	sbci	r29, 0x00	; 0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	6d a3       	std	Y+37, r22	; 0x25
     846:	7e a3       	std	Y+38, r23	; 0x26
     848:	8f a3       	std	Y+39, r24	; 0x27
     84a:	98 a7       	std	Y+40, r25	; 0x28
     84c:	29 a7       	std	Y+41, r18	; 0x29
     84e:	3a a7       	std	Y+42, r19	; 0x2a
     850:	4b a7       	std	Y+43, r20	; 0x2b
     852:	5c a7       	std	Y+44, r21	; 0x2c
     854:	ed a6       	std	Y+45, r14	; 0x2d
     856:	fe a6       	std	Y+46, r15	; 0x2e
     858:	0f a7       	std	Y+47, r16	; 0x2f
     85a:	18 ab       	std	Y+48, r17	; 0x30
     85c:	a5 96       	adiw	r28, 0x25	; 37
     85e:	6c ac       	ldd	r6, Y+60	; 0x3c
     860:	7d ac       	ldd	r7, Y+61	; 0x3d
     862:	8e ac       	ldd	r8, Y+62	; 0x3e
     864:	9f ac       	ldd	r9, Y+63	; 0x3f
     866:	a5 97       	sbiw	r28, 0x25	; 37
     868:	a9 96       	adiw	r28, 0x29	; 41
     86a:	2c ac       	ldd	r2, Y+60	; 0x3c
     86c:	3d ac       	ldd	r3, Y+61	; 0x3d
     86e:	4e ac       	ldd	r4, Y+62	; 0x3e
     870:	5f ac       	ldd	r5, Y+63	; 0x3f
     872:	a9 97       	sbiw	r28, 0x29	; 41
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     874:	c6 01       	movw	r24, r12
     876:	b5 01       	movw	r22, r10
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	dd d8       	rcall	.-3654   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     882:	88 23       	and	r24, r24
     884:	99 f4       	brne	.+38     	; 0x8ac <mpu6050_mahonyUpdate+0x9e>
     886:	c4 01       	movw	r24, r8
     888:	b3 01       	movw	r22, r6
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	d4 d8       	rcall	.-3672   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     894:	88 23       	and	r24, r24
     896:	51 f4       	brne	.+20     	; 0x8ac <mpu6050_mahonyUpdate+0x9e>
     898:	c2 01       	movw	r24, r4
     89a:	b1 01       	movw	r22, r2
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	cb d8       	rcall	.-3690   	; 0xfffffa3c <__eeprom_end+0xff7efa3c>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <mpu6050_mahonyUpdate+0x9e>
     8aa:	db c1       	rjmp	.+950    	; 0xc62 <mpu6050_mahonyUpdate+0x454>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     8ac:	c6 01       	movw	r24, r12
     8ae:	b5 01       	movw	r22, r10
     8b0:	a6 01       	movw	r20, r12
     8b2:	95 01       	movw	r18, r10
     8b4:	11 da       	rcall	.-3038   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     8b6:	7b 01       	movw	r14, r22
     8b8:	8c 01       	movw	r16, r24
     8ba:	c4 01       	movw	r24, r8
     8bc:	b3 01       	movw	r22, r6
     8be:	a4 01       	movw	r20, r8
     8c0:	93 01       	movw	r18, r6
     8c2:	0a da       	rcall	.-3052   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     8c4:	9b 01       	movw	r18, r22
     8c6:	ac 01       	movw	r20, r24
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	53 d8       	rcall	.-3930   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     8ce:	7b 01       	movw	r14, r22
     8d0:	8c 01       	movw	r16, r24
     8d2:	c2 01       	movw	r24, r4
     8d4:	b1 01       	movw	r22, r2
     8d6:	a2 01       	movw	r20, r4
     8d8:	91 01       	movw	r18, r2
     8da:	fe d9       	rcall	.-3076   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     8dc:	9b 01       	movw	r18, r22
     8de:	ac 01       	movw	r20, r24
     8e0:	c8 01       	movw	r24, r16
     8e2:	b7 01       	movw	r22, r14
     8e4:	47 d8       	rcall	.-3954   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     8e6:	5f da       	rcall	.-2882   	; 0xfffffda6 <__eeprom_end+0xff7efda6>
     8e8:	7b 01       	movw	r14, r22
     8ea:	8c 01       	movw	r16, r24
		ax /= norm;
     8ec:	c6 01       	movw	r24, r12
     8ee:	b5 01       	movw	r22, r10
     8f0:	a8 01       	movw	r20, r16
     8f2:	97 01       	movw	r18, r14
     8f4:	a7 d8       	rcall	.-3762   	; 0xfffffa44 <__eeprom_end+0xff7efa44>
     8f6:	69 ab       	std	Y+49, r22	; 0x31
     8f8:	7a ab       	std	Y+50, r23	; 0x32
     8fa:	8b ab       	std	Y+51, r24	; 0x33
     8fc:	9c ab       	std	Y+52, r25	; 0x34
		ay /= norm;
     8fe:	c4 01       	movw	r24, r8
     900:	b3 01       	movw	r22, r6
     902:	a8 01       	movw	r20, r16
     904:	97 01       	movw	r18, r14
     906:	9e d8       	rcall	.-3780   	; 0xfffffa44 <__eeprom_end+0xff7efa44>
     908:	6d ab       	std	Y+53, r22	; 0x35
     90a:	7e ab       	std	Y+54, r23	; 0x36
     90c:	8f ab       	std	Y+55, r24	; 0x37
     90e:	98 af       	std	Y+56, r25	; 0x38
		az /= norm;
     910:	c2 01       	movw	r24, r4
     912:	b1 01       	movw	r22, r2
     914:	a8 01       	movw	r20, r16
     916:	97 01       	movw	r18, r14
     918:	95 d8       	rcall	.-3798   	; 0xfffffa44 <__eeprom_end+0xff7efa44>
     91a:	69 af       	std	Y+57, r22	; 0x39
     91c:	7a af       	std	Y+58, r23	; 0x3a
     91e:	8b af       	std	Y+59, r24	; 0x3b
     920:	9c af       	std	Y+60, r25	; 0x3c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     922:	60 91 a8 00 	lds	r22, 0x00A8
     926:	70 91 a9 00 	lds	r23, 0x00A9
     92a:	80 91 aa 00 	lds	r24, 0x00AA
     92e:	90 91 ab 00 	lds	r25, 0x00AB
     932:	20 91 b0 00 	lds	r18, 0x00B0
     936:	30 91 b1 00 	lds	r19, 0x00B1
     93a:	40 91 b2 00 	lds	r20, 0x00B2
     93e:	50 91 b3 00 	lds	r21, 0x00B3
     942:	a0 90 93 00 	lds	r10, 0x0093
     946:	b0 90 94 00 	lds	r11, 0x0094
     94a:	c0 90 95 00 	lds	r12, 0x0095
     94e:	d0 90 96 00 	lds	r13, 0x0096
     952:	60 90 ac 00 	lds	r6, 0x00AC
     956:	70 90 ad 00 	lds	r7, 0x00AD
     95a:	80 90 ae 00 	lds	r8, 0x00AE
     95e:	90 90 af 00 	lds	r9, 0x00AF
     962:	ba d9       	rcall	.-3212   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     964:	7b 01       	movw	r14, r22
     966:	8c 01       	movw	r16, r24
     968:	c6 01       	movw	r24, r12
     96a:	b5 01       	movw	r22, r10
     96c:	a4 01       	movw	r20, r8
     96e:	93 01       	movw	r18, r6
     970:	b3 d9       	rcall	.-3226   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c8 01       	movw	r24, r16
     978:	b7 01       	movw	r22, r14
     97a:	fb d7       	rcall	.+4086   	; 0x1972 <__subsf3>
     97c:	21 96       	adiw	r28, 0x01	; 1
     97e:	6c af       	std	Y+60, r22	; 0x3c
     980:	7d af       	std	Y+61, r23	; 0x3d
     982:	8e af       	std	Y+62, r24	; 0x3e
     984:	9f af       	std	Y+63, r25	; 0x3f
     986:	21 97       	sbiw	r28, 0x01	; 1
		halfvy = q0 * q1 + q2 * q3;
     988:	60 91 93 00 	lds	r22, 0x0093
     98c:	70 91 94 00 	lds	r23, 0x0094
     990:	80 91 95 00 	lds	r24, 0x0095
     994:	90 91 96 00 	lds	r25, 0x0096
     998:	20 91 a8 00 	lds	r18, 0x00A8
     99c:	30 91 a9 00 	lds	r19, 0x00A9
     9a0:	40 91 aa 00 	lds	r20, 0x00AA
     9a4:	50 91 ab 00 	lds	r21, 0x00AB
     9a8:	a0 90 ac 00 	lds	r10, 0x00AC
     9ac:	b0 90 ad 00 	lds	r11, 0x00AD
     9b0:	c0 90 ae 00 	lds	r12, 0x00AE
     9b4:	d0 90 af 00 	lds	r13, 0x00AF
     9b8:	60 90 b0 00 	lds	r6, 0x00B0
     9bc:	70 90 b1 00 	lds	r7, 0x00B1
     9c0:	80 90 b2 00 	lds	r8, 0x00B2
     9c4:	90 90 b3 00 	lds	r9, 0x00B3
     9c8:	87 d9       	rcall	.-3314   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     9ca:	7b 01       	movw	r14, r22
     9cc:	8c 01       	movw	r16, r24
     9ce:	c6 01       	movw	r24, r12
     9d0:	b5 01       	movw	r22, r10
     9d2:	a4 01       	movw	r20, r8
     9d4:	93 01       	movw	r18, r6
     9d6:	80 d9       	rcall	.-3328   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	c8 01       	movw	r24, r16
     9de:	b7 01       	movw	r22, r14
     9e0:	c9 d7       	rcall	.+3986   	; 0x1974 <__addsf3>
     9e2:	1b 01       	movw	r2, r22
     9e4:	2c 01       	movw	r4, r24
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     9e6:	60 91 93 00 	lds	r22, 0x0093
     9ea:	70 91 94 00 	lds	r23, 0x0094
     9ee:	80 91 95 00 	lds	r24, 0x0095
     9f2:	90 91 96 00 	lds	r25, 0x0096
     9f6:	20 91 93 00 	lds	r18, 0x0093
     9fa:	30 91 94 00 	lds	r19, 0x0094
     9fe:	40 91 95 00 	lds	r20, 0x0095
     a02:	50 91 96 00 	lds	r21, 0x0096
     a06:	a0 90 b0 00 	lds	r10, 0x00B0
     a0a:	b0 90 b1 00 	lds	r11, 0x00B1
     a0e:	c0 90 b2 00 	lds	r12, 0x00B2
     a12:	d0 90 b3 00 	lds	r13, 0x00B3
     a16:	60 90 b0 00 	lds	r6, 0x00B0
     a1a:	70 90 b1 00 	lds	r7, 0x00B1
     a1e:	80 90 b2 00 	lds	r8, 0x00B2
     a22:	90 90 b3 00 	lds	r9, 0x00B3
     a26:	58 d9       	rcall	.-3408   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	a0 d7       	rcall	.+3904   	; 0x1972 <__subsf3>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
     a36:	c6 01       	movw	r24, r12
     a38:	b5 01       	movw	r22, r10
     a3a:	a4 01       	movw	r20, r8
     a3c:	93 01       	movw	r18, r6
     a3e:	4c d9       	rcall	.-3432   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	95 d7       	rcall	.+3882   	; 0x1974 <__addsf3>
     a4a:	5b 01       	movw	r10, r22
     a4c:	6c 01       	movw	r12, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     a4e:	6d a9       	ldd	r22, Y+53	; 0x35
     a50:	7e a9       	ldd	r23, Y+54	; 0x36
     a52:	8f a9       	ldd	r24, Y+55	; 0x37
     a54:	98 ad       	ldd	r25, Y+56	; 0x38
     a56:	a6 01       	movw	r20, r12
     a58:	95 01       	movw	r18, r10
     a5a:	3e d9       	rcall	.-3460   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     a5c:	7b 01       	movw	r14, r22
     a5e:	8c 01       	movw	r16, r24
     a60:	69 ad       	ldd	r22, Y+57	; 0x39
     a62:	7a ad       	ldd	r23, Y+58	; 0x3a
     a64:	8b ad       	ldd	r24, Y+59	; 0x3b
     a66:	9c ad       	ldd	r25, Y+60	; 0x3c
     a68:	a2 01       	movw	r20, r4
     a6a:	91 01       	movw	r18, r2
     a6c:	35 d9       	rcall	.-3478   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	c8 01       	movw	r24, r16
     a74:	b7 01       	movw	r22, r14
     a76:	7d d7       	rcall	.+3834   	; 0x1972 <__subsf3>
     a78:	25 96       	adiw	r28, 0x05	; 5
     a7a:	6c af       	std	Y+60, r22	; 0x3c
     a7c:	7d af       	std	Y+61, r23	; 0x3d
     a7e:	8e af       	std	Y+62, r24	; 0x3e
     a80:	9f af       	std	Y+63, r25	; 0x3f
     a82:	25 97       	sbiw	r28, 0x05	; 5
		halfey = (az * halfvx - ax * halfvz);
     a84:	69 ad       	ldd	r22, Y+57	; 0x39
     a86:	7a ad       	ldd	r23, Y+58	; 0x3a
     a88:	8b ad       	ldd	r24, Y+59	; 0x3b
     a8a:	9c ad       	ldd	r25, Y+60	; 0x3c
     a8c:	21 96       	adiw	r28, 0x01	; 1
     a8e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a90:	3d ad       	ldd	r19, Y+61	; 0x3d
     a92:	4e ad       	ldd	r20, Y+62	; 0x3e
     a94:	5f ad       	ldd	r21, Y+63	; 0x3f
     a96:	21 97       	sbiw	r28, 0x01	; 1
     a98:	1f d9       	rcall	.-3522   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     a9a:	7b 01       	movw	r14, r22
     a9c:	8c 01       	movw	r16, r24
     a9e:	69 a9       	ldd	r22, Y+49	; 0x31
     aa0:	7a a9       	ldd	r23, Y+50	; 0x32
     aa2:	8b a9       	ldd	r24, Y+51	; 0x33
     aa4:	9c a9       	ldd	r25, Y+52	; 0x34
     aa6:	a6 01       	movw	r20, r12
     aa8:	95 01       	movw	r18, r10
     aaa:	16 d9       	rcall	.-3540   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c8 01       	movw	r24, r16
     ab2:	b7 01       	movw	r22, r14
     ab4:	5e d7       	rcall	.+3772   	; 0x1972 <__subsf3>
     ab6:	29 96       	adiw	r28, 0x09	; 9
     ab8:	6c af       	std	Y+60, r22	; 0x3c
     aba:	7d af       	std	Y+61, r23	; 0x3d
     abc:	8e af       	std	Y+62, r24	; 0x3e
     abe:	9f af       	std	Y+63, r25	; 0x3f
     ac0:	29 97       	sbiw	r28, 0x09	; 9
		halfez = (ax * halfvy - ay * halfvx);
     ac2:	69 a9       	ldd	r22, Y+49	; 0x31
     ac4:	7a a9       	ldd	r23, Y+50	; 0x32
     ac6:	8b a9       	ldd	r24, Y+51	; 0x33
     ac8:	9c a9       	ldd	r25, Y+52	; 0x34
     aca:	a2 01       	movw	r20, r4
     acc:	91 01       	movw	r18, r2
     ace:	04 d9       	rcall	.-3576   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     ad0:	7b 01       	movw	r14, r22
     ad2:	8c 01       	movw	r16, r24
     ad4:	6d a9       	ldd	r22, Y+53	; 0x35
     ad6:	7e a9       	ldd	r23, Y+54	; 0x36
     ad8:	8f a9       	ldd	r24, Y+55	; 0x37
     ada:	98 ad       	ldd	r25, Y+56	; 0x38
     adc:	21 96       	adiw	r28, 0x01	; 1
     ade:	2c ad       	ldd	r18, Y+60	; 0x3c
     ae0:	3d ad       	ldd	r19, Y+61	; 0x3d
     ae2:	4e ad       	ldd	r20, Y+62	; 0x3e
     ae4:	5f ad       	ldd	r21, Y+63	; 0x3f
     ae6:	21 97       	sbiw	r28, 0x01	; 1
     ae8:	f7 d8       	rcall	.-3602   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	c8 01       	movw	r24, r16
     af0:	b7 01       	movw	r22, r14
     af2:	3f d7       	rcall	.+3710   	; 0x1972 <__subsf3>
     af4:	1b 01       	movw	r2, r22
     af6:	2c 01       	movw	r4, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     af8:	e0 90 b4 00 	lds	r14, 0x00B4
     afc:	f0 90 b5 00 	lds	r15, 0x00B5
     b00:	00 91 b6 00 	lds	r16, 0x00B6
     b04:	10 91 b7 00 	lds	r17, 0x00B7
     b08:	25 96       	adiw	r28, 0x05	; 5
     b0a:	6c ad       	ldd	r22, Y+60	; 0x3c
     b0c:	7d ad       	ldd	r23, Y+61	; 0x3d
     b0e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b10:	9f ad       	ldd	r25, Y+63	; 0x3f
     b12:	25 97       	sbiw	r28, 0x05	; 5
     b14:	2d ec       	ldi	r18, 0xCD	; 205
     b16:	3c ec       	ldi	r19, 0xCC	; 204
     b18:	4c e4       	ldi	r20, 0x4C	; 76
     b1a:	5e e3       	ldi	r21, 0x3E	; 62
     b1c:	dd d8       	rcall	.-3654   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     b1e:	2a e8       	ldi	r18, 0x8A	; 138
     b20:	3b e4       	ldi	r19, 0x4B	; 75
     b22:	46 e8       	ldi	r20, 0x86	; 134
     b24:	5c e3       	ldi	r21, 0x3C	; 60
     b26:	d8 d8       	rcall	.-3664   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     b28:	a8 01       	movw	r20, r16
     b2a:	97 01       	movw	r18, r14
     b2c:	23 d7       	rcall	.+3654   	; 0x1974 <__addsf3>
     b2e:	60 93 b4 00 	sts	0x00B4, r22
     b32:	70 93 b5 00 	sts	0x00B5, r23
     b36:	80 93 b6 00 	sts	0x00B6, r24
     b3a:	90 93 b7 00 	sts	0x00B7, r25
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     b3e:	e0 90 b8 00 	lds	r14, 0x00B8
     b42:	f0 90 b9 00 	lds	r15, 0x00B9
     b46:	00 91 ba 00 	lds	r16, 0x00BA
     b4a:	10 91 bb 00 	lds	r17, 0x00BB
     b4e:	29 96       	adiw	r28, 0x09	; 9
     b50:	6c ad       	ldd	r22, Y+60	; 0x3c
     b52:	7d ad       	ldd	r23, Y+61	; 0x3d
     b54:	8e ad       	ldd	r24, Y+62	; 0x3e
     b56:	9f ad       	ldd	r25, Y+63	; 0x3f
     b58:	29 97       	sbiw	r28, 0x09	; 9
     b5a:	2d ec       	ldi	r18, 0xCD	; 205
     b5c:	3c ec       	ldi	r19, 0xCC	; 204
     b5e:	4c e4       	ldi	r20, 0x4C	; 76
     b60:	5e e3       	ldi	r21, 0x3E	; 62
     b62:	ba d8       	rcall	.-3724   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     b64:	2a e8       	ldi	r18, 0x8A	; 138
     b66:	3b e4       	ldi	r19, 0x4B	; 75
     b68:	46 e8       	ldi	r20, 0x86	; 134
     b6a:	5c e3       	ldi	r21, 0x3C	; 60
     b6c:	b5 d8       	rcall	.-3734   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     b6e:	a8 01       	movw	r20, r16
     b70:	97 01       	movw	r18, r14
     b72:	00 d7       	rcall	.+3584   	; 0x1974 <__addsf3>
     b74:	60 93 b8 00 	sts	0x00B8, r22
     b78:	70 93 b9 00 	sts	0x00B9, r23
     b7c:	80 93 ba 00 	sts	0x00BA, r24
     b80:	90 93 bb 00 	sts	0x00BB, r25
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     b84:	e0 90 bc 00 	lds	r14, 0x00BC
     b88:	f0 90 bd 00 	lds	r15, 0x00BD
     b8c:	00 91 be 00 	lds	r16, 0x00BE
     b90:	10 91 bf 00 	lds	r17, 0x00BF
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	2d ec       	ldi	r18, 0xCD	; 205
     b9a:	3c ec       	ldi	r19, 0xCC	; 204
     b9c:	4c e4       	ldi	r20, 0x4C	; 76
     b9e:	5e e3       	ldi	r21, 0x3E	; 62
     ba0:	9b d8       	rcall	.-3786   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     ba2:	2a e8       	ldi	r18, 0x8A	; 138
     ba4:	3b e4       	ldi	r19, 0x4B	; 75
     ba6:	46 e8       	ldi	r20, 0x86	; 134
     ba8:	5c e3       	ldi	r21, 0x3C	; 60
     baa:	96 d8       	rcall	.-3796   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     bac:	a8 01       	movw	r20, r16
     bae:	97 01       	movw	r18, r14
     bb0:	e1 d6       	rcall	.+3522   	; 0x1974 <__addsf3>
     bb2:	60 93 bc 00 	sts	0x00BC, r22
     bb6:	70 93 bd 00 	sts	0x00BD, r23
     bba:	80 93 be 00 	sts	0x00BE, r24
     bbe:	90 93 bf 00 	sts	0x00BF, r25
			gx += integralFBx;	// apply integral feedback
     bc2:	20 91 b4 00 	lds	r18, 0x00B4
     bc6:	30 91 b5 00 	lds	r19, 0x00B5
     bca:	40 91 b6 00 	lds	r20, 0x00B6
     bce:	50 91 b7 00 	lds	r21, 0x00B7
     bd2:	6d a1       	ldd	r22, Y+37	; 0x25
     bd4:	7e a1       	ldd	r23, Y+38	; 0x26
     bd6:	8f a1       	ldd	r24, Y+39	; 0x27
     bd8:	98 a5       	ldd	r25, Y+40	; 0x28
     bda:	cc d6       	rcall	.+3480   	; 0x1974 <__addsf3>
     bdc:	3b 01       	movw	r6, r22
     bde:	4c 01       	movw	r8, r24
			gy += integralFBy;
     be0:	20 91 b8 00 	lds	r18, 0x00B8
     be4:	30 91 b9 00 	lds	r19, 0x00B9
     be8:	40 91 ba 00 	lds	r20, 0x00BA
     bec:	50 91 bb 00 	lds	r21, 0x00BB
     bf0:	69 a5       	ldd	r22, Y+41	; 0x29
     bf2:	7a a5       	ldd	r23, Y+42	; 0x2a
     bf4:	8b a5       	ldd	r24, Y+43	; 0x2b
     bf6:	9c a5       	ldd	r25, Y+44	; 0x2c
     bf8:	bd d6       	rcall	.+3450   	; 0x1974 <__addsf3>
     bfa:	5b 01       	movw	r10, r22
     bfc:	6c 01       	movw	r12, r24
			gz += integralFBz;
     bfe:	20 91 bc 00 	lds	r18, 0x00BC
     c02:	30 91 bd 00 	lds	r19, 0x00BD
     c06:	40 91 be 00 	lds	r20, 0x00BE
     c0a:	50 91 bf 00 	lds	r21, 0x00BF
     c0e:	6d a5       	ldd	r22, Y+45	; 0x2d
     c10:	7e a5       	ldd	r23, Y+46	; 0x2e
     c12:	8f a5       	ldd	r24, Y+47	; 0x2f
     c14:	98 a9       	ldd	r25, Y+48	; 0x30
     c16:	ae d6       	rcall	.+3420   	; 0x1974 <__addsf3>
     c18:	7b 01       	movw	r14, r22
     c1a:	8c 01       	movw	r16, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     c1c:	c4 01       	movw	r24, r8
     c1e:	b3 01       	movw	r22, r6
     c20:	25 96       	adiw	r28, 0x05	; 5
     c22:	2c ad       	ldd	r18, Y+60	; 0x3c
     c24:	3d ad       	ldd	r19, Y+61	; 0x3d
     c26:	4e ad       	ldd	r20, Y+62	; 0x3e
     c28:	5f ad       	ldd	r21, Y+63	; 0x3f
     c2a:	25 97       	sbiw	r28, 0x05	; 5
     c2c:	a3 d6       	rcall	.+3398   	; 0x1974 <__addsf3>
     c2e:	6d a3       	std	Y+37, r22	; 0x25
     c30:	7e a3       	std	Y+38, r23	; 0x26
     c32:	8f a3       	std	Y+39, r24	; 0x27
     c34:	98 a7       	std	Y+40, r25	; 0x28
		gy += mpu6050_mahonytwoKpDef * halfey;
     c36:	c6 01       	movw	r24, r12
     c38:	b5 01       	movw	r22, r10
     c3a:	29 96       	adiw	r28, 0x09	; 9
     c3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     c3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     c40:	4e ad       	ldd	r20, Y+62	; 0x3e
     c42:	5f ad       	ldd	r21, Y+63	; 0x3f
     c44:	29 97       	sbiw	r28, 0x09	; 9
     c46:	96 d6       	rcall	.+3372   	; 0x1974 <__addsf3>
     c48:	69 a7       	std	Y+41, r22	; 0x29
     c4a:	7a a7       	std	Y+42, r23	; 0x2a
     c4c:	8b a7       	std	Y+43, r24	; 0x2b
     c4e:	9c a7       	std	Y+44, r25	; 0x2c
		gz += mpu6050_mahonytwoKpDef * halfez;
     c50:	c8 01       	movw	r24, r16
     c52:	b7 01       	movw	r22, r14
     c54:	a2 01       	movw	r20, r4
     c56:	91 01       	movw	r18, r2
     c58:	8d d6       	rcall	.+3354   	; 0x1974 <__addsf3>
     c5a:	6d a7       	std	Y+45, r22	; 0x2d
     c5c:	7e a7       	std	Y+46, r23	; 0x2e
     c5e:	8f a7       	std	Y+47, r24	; 0x2f
     c60:	98 ab       	std	Y+48, r25	; 0x30
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     c62:	6d a1       	ldd	r22, Y+37	; 0x25
     c64:	7e a1       	ldd	r23, Y+38	; 0x26
     c66:	8f a1       	ldd	r24, Y+39	; 0x27
     c68:	98 a5       	ldd	r25, Y+40	; 0x28
     c6a:	2a e8       	ldi	r18, 0x8A	; 138
     c6c:	3b e4       	ldi	r19, 0x4B	; 75
     c6e:	46 e0       	ldi	r20, 0x06	; 6
     c70:	5c e3       	ldi	r21, 0x3C	; 60
     c72:	32 d8       	rcall	.-3996   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     c74:	2d 96       	adiw	r28, 0x0d	; 13
     c76:	6c af       	std	Y+60, r22	; 0x3c
     c78:	7d af       	std	Y+61, r23	; 0x3d
     c7a:	8e af       	std	Y+62, r24	; 0x3e
     c7c:	9f af       	std	Y+63, r25	; 0x3f
     c7e:	2d 97       	sbiw	r28, 0x0d	; 13
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     c80:	69 a5       	ldd	r22, Y+41	; 0x29
     c82:	7a a5       	ldd	r23, Y+42	; 0x2a
     c84:	8b a5       	ldd	r24, Y+43	; 0x2b
     c86:	9c a5       	ldd	r25, Y+44	; 0x2c
     c88:	2a e8       	ldi	r18, 0x8A	; 138
     c8a:	3b e4       	ldi	r19, 0x4B	; 75
     c8c:	46 e0       	ldi	r20, 0x06	; 6
     c8e:	5c e3       	ldi	r21, 0x3C	; 60
     c90:	23 d8       	rcall	.-4026   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     c92:	1b 01       	movw	r2, r22
     c94:	2c 01       	movw	r4, r24
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     c96:	6d a5       	ldd	r22, Y+45	; 0x2d
     c98:	7e a5       	ldd	r23, Y+46	; 0x2e
     c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c9c:	98 a9       	ldd	r25, Y+48	; 0x30
     c9e:	2a e8       	ldi	r18, 0x8A	; 138
     ca0:	3b e4       	ldi	r19, 0x4B	; 75
     ca2:	46 e0       	ldi	r20, 0x06	; 6
     ca4:	5c e3       	ldi	r21, 0x3C	; 60
     ca6:	18 d8       	rcall	.-4048   	; 0xfffffcd8 <__eeprom_end+0xff7efcd8>
     ca8:	3b 01       	movw	r6, r22
     caa:	4c 01       	movw	r8, r24
	qa = q0;
     cac:	e0 90 93 00 	lds	r14, 0x0093
     cb0:	f0 90 94 00 	lds	r15, 0x0094
     cb4:	00 91 95 00 	lds	r16, 0x0095
     cb8:	10 91 96 00 	lds	r17, 0x0096
     cbc:	e9 86       	std	Y+9, r14	; 0x09
     cbe:	fa 86       	std	Y+10, r15	; 0x0a
     cc0:	0b 87       	std	Y+11, r16	; 0x0b
     cc2:	1c 87       	std	Y+12, r17	; 0x0c
	qb = q1;
     cc4:	80 91 a8 00 	lds	r24, 0x00A8
     cc8:	90 91 a9 00 	lds	r25, 0x00A9
     ccc:	a0 91 aa 00 	lds	r26, 0x00AA
     cd0:	b0 91 ab 00 	lds	r27, 0x00AB
     cd4:	8d 83       	std	Y+5, r24	; 0x05
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	af 83       	std	Y+7, r26	; 0x07
     cda:	b8 87       	std	Y+8, r27	; 0x08
	qc = q2;
     cdc:	e0 90 ac 00 	lds	r14, 0x00AC
     ce0:	f0 90 ad 00 	lds	r15, 0x00AD
     ce4:	00 91 ae 00 	lds	r16, 0x00AE
     ce8:	10 91 af 00 	lds	r17, 0x00AF
     cec:	e9 82       	std	Y+1, r14	; 0x01
     cee:	fa 82       	std	Y+2, r15	; 0x02
     cf0:	0b 83       	std	Y+3, r16	; 0x03
     cf2:	1c 83       	std	Y+4, r17	; 0x04
	q0 += (-qb * gx - qc * gy - q3 * gz);
     cf4:	a0 90 b0 00 	lds	r10, 0x00B0
     cf8:	b0 90 b1 00 	lds	r11, 0x00B1
     cfc:	c0 90 b2 00 	lds	r12, 0x00B2
     d00:	d0 90 b3 00 	lds	r13, 0x00B3
     d04:	80 91 93 00 	lds	r24, 0x0093
     d08:	90 91 94 00 	lds	r25, 0x0094
     d0c:	a0 91 95 00 	lds	r26, 0x0095
     d10:	b0 91 96 00 	lds	r27, 0x0096
     d14:	89 a3       	std	Y+33, r24	; 0x21
     d16:	9a a3       	std	Y+34, r25	; 0x22
     d18:	ab a3       	std	Y+35, r26	; 0x23
     d1a:	bc a3       	std	Y+36, r27	; 0x24
     d1c:	6d 81       	ldd	r22, Y+5	; 0x05
     d1e:	7e 81       	ldd	r23, Y+6	; 0x06
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	90 58       	subi	r25, 0x80	; 128
     d26:	2d 96       	adiw	r28, 0x0d	; 13
     d28:	2c ad       	ldd	r18, Y+60	; 0x3c
     d2a:	3d ad       	ldd	r19, Y+61	; 0x3d
     d2c:	4e ad       	ldd	r20, Y+62	; 0x3e
     d2e:	5f ad       	ldd	r21, Y+63	; 0x3f
     d30:	2d 97       	sbiw	r28, 0x0d	; 13
     d32:	d2 d7       	rcall	.+4004   	; 0x1cd8 <__mulsf3>
     d34:	7b 01       	movw	r14, r22
     d36:	8c 01       	movw	r16, r24
     d38:	69 81       	ldd	r22, Y+1	; 0x01
     d3a:	7a 81       	ldd	r23, Y+2	; 0x02
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	a2 01       	movw	r20, r4
     d42:	91 01       	movw	r18, r2
     d44:	c9 d7       	rcall	.+3986   	; 0x1cd8 <__mulsf3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	c8 01       	movw	r24, r16
     d4c:	b7 01       	movw	r22, r14
     d4e:	11 d6       	rcall	.+3106   	; 0x1972 <__subsf3>
     d50:	7b 01       	movw	r14, r22
     d52:	8c 01       	movw	r16, r24
     d54:	c6 01       	movw	r24, r12
     d56:	b5 01       	movw	r22, r10
     d58:	a4 01       	movw	r20, r8
     d5a:	93 01       	movw	r18, r6
     d5c:	bd d7       	rcall	.+3962   	; 0x1cd8 <__mulsf3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	c8 01       	movw	r24, r16
     d64:	b7 01       	movw	r22, r14
     d66:	05 d6       	rcall	.+3082   	; 0x1972 <__subsf3>
     d68:	29 a1       	ldd	r18, Y+33	; 0x21
     d6a:	3a a1       	ldd	r19, Y+34	; 0x22
     d6c:	4b a1       	ldd	r20, Y+35	; 0x23
     d6e:	5c a1       	ldd	r21, Y+36	; 0x24
     d70:	01 d6       	rcall	.+3074   	; 0x1974 <__addsf3>
     d72:	60 93 93 00 	sts	0x0093, r22
     d76:	70 93 94 00 	sts	0x0094, r23
     d7a:	80 93 95 00 	sts	0x0095, r24
     d7e:	90 93 96 00 	sts	0x0096, r25
	q1 += (qa * gx + qc * gz - q3 * gy);
     d82:	a0 90 b0 00 	lds	r10, 0x00B0
     d86:	b0 90 b1 00 	lds	r11, 0x00B1
     d8a:	c0 90 b2 00 	lds	r12, 0x00B2
     d8e:	d0 90 b3 00 	lds	r13, 0x00B3
     d92:	e0 90 a8 00 	lds	r14, 0x00A8
     d96:	f0 90 a9 00 	lds	r15, 0x00A9
     d9a:	00 91 aa 00 	lds	r16, 0x00AA
     d9e:	10 91 ab 00 	lds	r17, 0x00AB
     da2:	ed 8e       	std	Y+29, r14	; 0x1d
     da4:	fe 8e       	std	Y+30, r15	; 0x1e
     da6:	0f 8f       	std	Y+31, r16	; 0x1f
     da8:	18 a3       	std	Y+32, r17	; 0x20
     daa:	69 85       	ldd	r22, Y+9	; 0x09
     dac:	7a 85       	ldd	r23, Y+10	; 0x0a
     dae:	8b 85       	ldd	r24, Y+11	; 0x0b
     db0:	9c 85       	ldd	r25, Y+12	; 0x0c
     db2:	2d 96       	adiw	r28, 0x0d	; 13
     db4:	2c ad       	ldd	r18, Y+60	; 0x3c
     db6:	3d ad       	ldd	r19, Y+61	; 0x3d
     db8:	4e ad       	ldd	r20, Y+62	; 0x3e
     dba:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbc:	2d 97       	sbiw	r28, 0x0d	; 13
     dbe:	8c d7       	rcall	.+3864   	; 0x1cd8 <__mulsf3>
     dc0:	7b 01       	movw	r14, r22
     dc2:	8c 01       	movw	r16, r24
     dc4:	69 81       	ldd	r22, Y+1	; 0x01
     dc6:	7a 81       	ldd	r23, Y+2	; 0x02
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	a4 01       	movw	r20, r8
     dce:	93 01       	movw	r18, r6
     dd0:	83 d7       	rcall	.+3846   	; 0x1cd8 <__mulsf3>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	c8 01       	movw	r24, r16
     dd8:	b7 01       	movw	r22, r14
     dda:	cc d5       	rcall	.+2968   	; 0x1974 <__addsf3>
     ddc:	7b 01       	movw	r14, r22
     dde:	8c 01       	movw	r16, r24
     de0:	c6 01       	movw	r24, r12
     de2:	b5 01       	movw	r22, r10
     de4:	a2 01       	movw	r20, r4
     de6:	91 01       	movw	r18, r2
     de8:	77 d7       	rcall	.+3822   	; 0x1cd8 <__mulsf3>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
     dee:	c8 01       	movw	r24, r16
     df0:	b7 01       	movw	r22, r14
     df2:	bf d5       	rcall	.+2942   	; 0x1972 <__subsf3>
     df4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     df6:	3e 8d       	ldd	r19, Y+30	; 0x1e
     df8:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dfa:	58 a1       	ldd	r21, Y+32	; 0x20
     dfc:	bb d5       	rcall	.+2934   	; 0x1974 <__addsf3>
     dfe:	60 93 a8 00 	sts	0x00A8, r22
     e02:	70 93 a9 00 	sts	0x00A9, r23
     e06:	80 93 aa 00 	sts	0x00AA, r24
     e0a:	90 93 ab 00 	sts	0x00AB, r25
	q2 += (qa * gy - qb * gz + q3 * gx);
     e0e:	a0 90 b0 00 	lds	r10, 0x00B0
     e12:	b0 90 b1 00 	lds	r11, 0x00B1
     e16:	c0 90 b2 00 	lds	r12, 0x00B2
     e1a:	d0 90 b3 00 	lds	r13, 0x00B3
     e1e:	80 91 ac 00 	lds	r24, 0x00AC
     e22:	90 91 ad 00 	lds	r25, 0x00AD
     e26:	a0 91 ae 00 	lds	r26, 0x00AE
     e2a:	b0 91 af 00 	lds	r27, 0x00AF
     e2e:	89 8f       	std	Y+25, r24	; 0x19
     e30:	9a 8f       	std	Y+26, r25	; 0x1a
     e32:	ab 8f       	std	Y+27, r26	; 0x1b
     e34:	bc 8f       	std	Y+28, r27	; 0x1c
     e36:	69 85       	ldd	r22, Y+9	; 0x09
     e38:	7a 85       	ldd	r23, Y+10	; 0x0a
     e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e3e:	a2 01       	movw	r20, r4
     e40:	91 01       	movw	r18, r2
     e42:	4a d7       	rcall	.+3732   	; 0x1cd8 <__mulsf3>
     e44:	7b 01       	movw	r14, r22
     e46:	8c 01       	movw	r16, r24
     e48:	6d 81       	ldd	r22, Y+5	; 0x05
     e4a:	7e 81       	ldd	r23, Y+6	; 0x06
     e4c:	8f 81       	ldd	r24, Y+7	; 0x07
     e4e:	98 85       	ldd	r25, Y+8	; 0x08
     e50:	a4 01       	movw	r20, r8
     e52:	93 01       	movw	r18, r6
     e54:	41 d7       	rcall	.+3714   	; 0x1cd8 <__mulsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c8 01       	movw	r24, r16
     e5c:	b7 01       	movw	r22, r14
     e5e:	89 d5       	rcall	.+2834   	; 0x1972 <__subsf3>
     e60:	7b 01       	movw	r14, r22
     e62:	8c 01       	movw	r16, r24
     e64:	c6 01       	movw	r24, r12
     e66:	b5 01       	movw	r22, r10
     e68:	2d 96       	adiw	r28, 0x0d	; 13
     e6a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e6c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e6e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e70:	5f ad       	ldd	r21, Y+63	; 0x3f
     e72:	2d 97       	sbiw	r28, 0x0d	; 13
     e74:	31 d7       	rcall	.+3682   	; 0x1cd8 <__mulsf3>
     e76:	9b 01       	movw	r18, r22
     e78:	ac 01       	movw	r20, r24
     e7a:	c8 01       	movw	r24, r16
     e7c:	b7 01       	movw	r22, r14
     e7e:	7a d5       	rcall	.+2804   	; 0x1974 <__addsf3>
     e80:	29 8d       	ldd	r18, Y+25	; 0x19
     e82:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e84:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e86:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e88:	75 d5       	rcall	.+2794   	; 0x1974 <__addsf3>
     e8a:	60 93 ac 00 	sts	0x00AC, r22
     e8e:	70 93 ad 00 	sts	0x00AD, r23
     e92:	80 93 ae 00 	sts	0x00AE, r24
     e96:	90 93 af 00 	sts	0x00AF, r25
	q3 += (qa * gz + qb * gy - qc * gx);
     e9a:	a0 90 b0 00 	lds	r10, 0x00B0
     e9e:	b0 90 b1 00 	lds	r11, 0x00B1
     ea2:	c0 90 b2 00 	lds	r12, 0x00B2
     ea6:	d0 90 b3 00 	lds	r13, 0x00B3
     eaa:	69 85       	ldd	r22, Y+9	; 0x09
     eac:	7a 85       	ldd	r23, Y+10	; 0x0a
     eae:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb2:	a4 01       	movw	r20, r8
     eb4:	93 01       	movw	r18, r6
     eb6:	10 d7       	rcall	.+3616   	; 0x1cd8 <__mulsf3>
     eb8:	7b 01       	movw	r14, r22
     eba:	8c 01       	movw	r16, r24
     ebc:	6d 81       	ldd	r22, Y+5	; 0x05
     ebe:	7e 81       	ldd	r23, Y+6	; 0x06
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	a2 01       	movw	r20, r4
     ec6:	91 01       	movw	r18, r2
     ec8:	07 d7       	rcall	.+3598   	; 0x1cd8 <__mulsf3>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	c8 01       	movw	r24, r16
     ed0:	b7 01       	movw	r22, r14
     ed2:	50 d5       	rcall	.+2720   	; 0x1974 <__addsf3>
     ed4:	7b 01       	movw	r14, r22
     ed6:	8c 01       	movw	r16, r24
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	7a 81       	ldd	r23, Y+2	; 0x02
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	2d 96       	adiw	r28, 0x0d	; 13
     ee2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ee4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ee6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ee8:	5f ad       	ldd	r21, Y+63	; 0x3f
     eea:	2d 97       	sbiw	r28, 0x0d	; 13
     eec:	f5 d6       	rcall	.+3562   	; 0x1cd8 <__mulsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 01       	movw	r22, r14
     ef6:	3d d5       	rcall	.+2682   	; 0x1972 <__subsf3>
     ef8:	a6 01       	movw	r20, r12
     efa:	95 01       	movw	r18, r10
     efc:	3b d5       	rcall	.+2678   	; 0x1974 <__addsf3>
     efe:	60 93 b0 00 	sts	0x00B0, r22
     f02:	70 93 b1 00 	sts	0x00B1, r23
     f06:	80 93 b2 00 	sts	0x00B2, r24
     f0a:	90 93 b3 00 	sts	0x00B3, r25

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     f0e:	60 91 93 00 	lds	r22, 0x0093
     f12:	70 91 94 00 	lds	r23, 0x0094
     f16:	80 91 95 00 	lds	r24, 0x0095
     f1a:	90 91 96 00 	lds	r25, 0x0096
     f1e:	20 91 93 00 	lds	r18, 0x0093
     f22:	30 91 94 00 	lds	r19, 0x0094
     f26:	40 91 95 00 	lds	r20, 0x0095
     f2a:	50 91 96 00 	lds	r21, 0x0096
     f2e:	a0 90 a8 00 	lds	r10, 0x00A8
     f32:	b0 90 a9 00 	lds	r11, 0x00A9
     f36:	c0 90 aa 00 	lds	r12, 0x00AA
     f3a:	d0 90 ab 00 	lds	r13, 0x00AB
     f3e:	60 90 a8 00 	lds	r6, 0x00A8
     f42:	70 90 a9 00 	lds	r7, 0x00A9
     f46:	80 90 aa 00 	lds	r8, 0x00AA
     f4a:	90 90 ab 00 	lds	r9, 0x00AB
     f4e:	20 90 ac 00 	lds	r2, 0x00AC
     f52:	30 90 ad 00 	lds	r3, 0x00AD
     f56:	40 90 ae 00 	lds	r4, 0x00AE
     f5a:	50 90 af 00 	lds	r5, 0x00AF
     f5e:	e0 90 ac 00 	lds	r14, 0x00AC
     f62:	f0 90 ad 00 	lds	r15, 0x00AD
     f66:	00 91 ae 00 	lds	r16, 0x00AE
     f6a:	10 91 af 00 	lds	r17, 0x00AF
     f6e:	ed 8a       	std	Y+21, r14	; 0x15
     f70:	fe 8a       	std	Y+22, r15	; 0x16
     f72:	0f 8b       	std	Y+23, r16	; 0x17
     f74:	18 8f       	std	Y+24, r17	; 0x18
     f76:	e0 90 b0 00 	lds	r14, 0x00B0
     f7a:	f0 90 b1 00 	lds	r15, 0x00B1
     f7e:	00 91 b2 00 	lds	r16, 0x00B2
     f82:	10 91 b3 00 	lds	r17, 0x00B3
     f86:	e9 8a       	std	Y+17, r14	; 0x11
     f88:	fa 8a       	std	Y+18, r15	; 0x12
     f8a:	0b 8b       	std	Y+19, r16	; 0x13
     f8c:	1c 8b       	std	Y+20, r17	; 0x14
     f8e:	e0 90 b0 00 	lds	r14, 0x00B0
     f92:	f0 90 b1 00 	lds	r15, 0x00B1
     f96:	00 91 b2 00 	lds	r16, 0x00B2
     f9a:	10 91 b3 00 	lds	r17, 0x00B3
     f9e:	ed 86       	std	Y+13, r14	; 0x0d
     fa0:	fe 86       	std	Y+14, r15	; 0x0e
     fa2:	0f 87       	std	Y+15, r16	; 0x0f
     fa4:	18 8b       	std	Y+16, r17	; 0x10
     fa6:	98 d6       	rcall	.+3376   	; 0x1cd8 <__mulsf3>
     fa8:	7b 01       	movw	r14, r22
     faa:	8c 01       	movw	r16, r24
     fac:	c6 01       	movw	r24, r12
     fae:	b5 01       	movw	r22, r10
     fb0:	a4 01       	movw	r20, r8
     fb2:	93 01       	movw	r18, r6
     fb4:	91 d6       	rcall	.+3362   	; 0x1cd8 <__mulsf3>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	c8 01       	movw	r24, r16
     fbc:	b7 01       	movw	r22, r14
     fbe:	da d4       	rcall	.+2484   	; 0x1974 <__addsf3>
     fc0:	7b 01       	movw	r14, r22
     fc2:	8c 01       	movw	r16, r24
     fc4:	c2 01       	movw	r24, r4
     fc6:	b1 01       	movw	r22, r2
     fc8:	2d 89       	ldd	r18, Y+21	; 0x15
     fca:	3e 89       	ldd	r19, Y+22	; 0x16
     fcc:	4f 89       	ldd	r20, Y+23	; 0x17
     fce:	58 8d       	ldd	r21, Y+24	; 0x18
     fd0:	83 d6       	rcall	.+3334   	; 0x1cd8 <__mulsf3>
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	c8 01       	movw	r24, r16
     fd8:	b7 01       	movw	r22, r14
     fda:	cc d4       	rcall	.+2456   	; 0x1974 <__addsf3>
     fdc:	7b 01       	movw	r14, r22
     fde:	8c 01       	movw	r16, r24
     fe0:	69 89       	ldd	r22, Y+17	; 0x11
     fe2:	7a 89       	ldd	r23, Y+18	; 0x12
     fe4:	8b 89       	ldd	r24, Y+19	; 0x13
     fe6:	9c 89       	ldd	r25, Y+20	; 0x14
     fe8:	2d 85       	ldd	r18, Y+13	; 0x0d
     fea:	3e 85       	ldd	r19, Y+14	; 0x0e
     fec:	4f 85       	ldd	r20, Y+15	; 0x0f
     fee:	58 89       	ldd	r21, Y+16	; 0x10
     ff0:	73 d6       	rcall	.+3302   	; 0x1cd8 <__mulsf3>
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	bc d4       	rcall	.+2424   	; 0x1974 <__addsf3>
     ffc:	d4 d6       	rcall	.+3496   	; 0x1da6 <sqrt>
     ffe:	7b 01       	movw	r14, r22
    1000:	8c 01       	movw	r16, r24
	q0 /= norm;
    1002:	60 91 93 00 	lds	r22, 0x0093
    1006:	70 91 94 00 	lds	r23, 0x0094
    100a:	80 91 95 00 	lds	r24, 0x0095
    100e:	90 91 96 00 	lds	r25, 0x0096
    1012:	a8 01       	movw	r20, r16
    1014:	97 01       	movw	r18, r14
    1016:	16 d5       	rcall	.+2604   	; 0x1a44 <__divsf3>
    1018:	60 93 93 00 	sts	0x0093, r22
    101c:	70 93 94 00 	sts	0x0094, r23
    1020:	80 93 95 00 	sts	0x0095, r24
    1024:	90 93 96 00 	sts	0x0096, r25
	q1 /= norm;
    1028:	60 91 a8 00 	lds	r22, 0x00A8
    102c:	70 91 a9 00 	lds	r23, 0x00A9
    1030:	80 91 aa 00 	lds	r24, 0x00AA
    1034:	90 91 ab 00 	lds	r25, 0x00AB
    1038:	a8 01       	movw	r20, r16
    103a:	97 01       	movw	r18, r14
    103c:	03 d5       	rcall	.+2566   	; 0x1a44 <__divsf3>
    103e:	60 93 a8 00 	sts	0x00A8, r22
    1042:	70 93 a9 00 	sts	0x00A9, r23
    1046:	80 93 aa 00 	sts	0x00AA, r24
    104a:	90 93 ab 00 	sts	0x00AB, r25
	q2 /= norm;
    104e:	60 91 ac 00 	lds	r22, 0x00AC
    1052:	70 91 ad 00 	lds	r23, 0x00AD
    1056:	80 91 ae 00 	lds	r24, 0x00AE
    105a:	90 91 af 00 	lds	r25, 0x00AF
    105e:	a8 01       	movw	r20, r16
    1060:	97 01       	movw	r18, r14
    1062:	f0 d4       	rcall	.+2528   	; 0x1a44 <__divsf3>
    1064:	60 93 ac 00 	sts	0x00AC, r22
    1068:	70 93 ad 00 	sts	0x00AD, r23
    106c:	80 93 ae 00 	sts	0x00AE, r24
    1070:	90 93 af 00 	sts	0x00AF, r25
	q3 /= norm;
    1074:	60 91 b0 00 	lds	r22, 0x00B0
    1078:	70 91 b1 00 	lds	r23, 0x00B1
    107c:	80 91 b2 00 	lds	r24, 0x00B2
    1080:	90 91 b3 00 	lds	r25, 0x00B3
    1084:	a8 01       	movw	r20, r16
    1086:	97 01       	movw	r18, r14
    1088:	dd d4       	rcall	.+2490   	; 0x1a44 <__divsf3>
    108a:	60 93 b0 00 	sts	0x00B0, r22
    108e:	70 93 b1 00 	sts	0x00B1, r23
    1092:	80 93 b2 00 	sts	0x00B2, r24
    1096:	90 93 b3 00 	sts	0x00B3, r25
}
    109a:	c4 5b       	subi	r28, 0xB4	; 180
    109c:	df 4f       	sbci	r29, 0xFF	; 255
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	7f 90       	pop	r7
    10c2:	6f 90       	pop	r6
    10c4:	5f 90       	pop	r5
    10c6:	4f 90       	pop	r4
    10c8:	3f 90       	pop	r3
    10ca:	2f 90       	pop	r2
    10cc:	08 95       	ret

000010ce <mpu6050_writeBytes>:
}

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	18 2f       	mov	r17, r24
    10dc:	06 2f       	mov	r16, r22
    10de:	f4 2e       	mov	r15, r20
    10e0:	e5 2e       	mov	r14, r21
	if(length > 0) {
    10e2:	66 23       	and	r22, r22
    10e4:	79 f0       	breq	.+30     	; 0x1104 <mpu6050_writeBytes+0x36>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    10e6:	80 ed       	ldi	r24, 0xD0	; 208
    10e8:	9d d3       	rcall	.+1850   	; 0x1824 <i2c_start>
		i2c_write(regAddr); //reg
    10ea:	81 2f       	mov	r24, r17
    10ec:	ed d3       	rcall	.+2010   	; 0x18c8 <i2c_write>
    10ee:	1f 2d       	mov	r17, r15
    10f0:	2f 2d       	mov	r18, r15
    10f2:	3e 2d       	mov	r19, r14
    10f4:	e9 01       	movw	r28, r18
		for (uint8_t i = 0; i < length; i++) {
			i2c_write((uint8_t) data[i]);
    10f6:	89 91       	ld	r24, Y+
    10f8:	e7 d3       	rcall	.+1998   	; 0x18c8 <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
    10fa:	9e 01       	movw	r18, r28
    10fc:	21 1b       	sub	r18, r17
    10fe:	20 17       	cp	r18, r16
    1100:	d0 f3       	brcs	.-12     	; 0x10f6 <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
    1102:	d2 d3       	rcall	.+1956   	; 0x18a8 <i2c_stop>
	}
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	0f 92       	push	r0
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	ae 01       	movw	r20, r28
    1122:	4f 5f       	subi	r20, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	d3 df       	rcall	.-90     	; 0x10ce <mpu6050_writeBytes>
}
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	18 2f       	mov	r17, r24
    1140:	d6 2e       	mov	r13, r22
    1142:	04 2f       	mov	r16, r20
    1144:	f5 2e       	mov	r15, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
    1146:	66 23       	and	r22, r22
    1148:	11 f4       	brne	.+4      	; 0x114e <mpu6050_readBytes+0x1e>
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	25 c0       	rjmp	.+74     	; 0x1198 <mpu6050_readBytes+0x68>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
    114e:	80 ed       	ldi	r24, 0xD0	; 208
    1150:	69 d3       	rcall	.+1746   	; 0x1824 <i2c_start>
		i2c_write(regAddr);
    1152:	81 2f       	mov	r24, r17
    1154:	b9 d3       	rcall	.+1906   	; 0x18c8 <i2c_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1156:	85 e3       	ldi	r24, 0x35	; 53
    1158:	8a 95       	dec	r24
    115a:	f1 f7       	brne	.-4      	; 0x1158 <mpu6050_readBytes+0x28>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
    115c:	81 ed       	ldi	r24, 0xD1	; 209
    115e:	62 d3       	rcall	.+1732   	; 0x1824 <i2c_start>
    1160:	80 2f       	mov	r24, r16
    1162:	9f 2d       	mov	r25, r15
    1164:	8c 01       	movw	r16, r24
    1166:	c0 e0       	ldi	r28, 0x00	; 0
    1168:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    116a:	8d 2d       	mov	r24, r13
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	7c 01       	movw	r14, r24
    1170:	08 94       	sec
    1172:	e1 08       	sbc	r14, r1
    1174:	f1 08       	sbc	r15, r1
    1176:	ce 15       	cp	r28, r14
    1178:	df 05       	cpc	r29, r15
    117a:	21 f4       	brne	.+8      	; 0x1184 <mpu6050_readBytes+0x54>
				data[i] = i2c_readNak();
    117c:	e0 d3       	rcall	.+1984   	; 0x193e <i2c_readNak>
    117e:	f8 01       	movw	r30, r16
    1180:	80 83       	st	Z, r24
    1182:	03 c0       	rjmp	.+6      	; 0x118a <mpu6050_readBytes+0x5a>
			else
				data[i] = i2c_readAck();
    1184:	c2 d3       	rcall	.+1924   	; 0x190a <i2c_readAck>
    1186:	f8 01       	movw	r30, r16
    1188:	80 83       	st	Z, r24
    118a:	21 96       	adiw	r28, 0x01	; 1
    118c:	0f 5f       	subi	r16, 0xFF	; 255
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    1190:	cd 15       	cp	r28, r13
    1192:	88 f3       	brcs	.-30     	; 0x1176 <mpu6050_readBytes+0x46>
    1194:	1d 2d       	mov	r17, r13
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    1196:	88 d3       	rcall	.+1808   	; 0x18a8 <i2c_stop>
	}
	return count;
}
    1198:	81 2f       	mov	r24, r17
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	08 95       	ret

000011aa <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	6c 01       	movw	r12, r24
    11c8:	5b 01       	movw	r10, r22
    11ca:	4a 01       	movw	r8, r20
    11cc:	39 01       	movw	r6, r18
    11ce:	28 01       	movw	r4, r16
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    11d0:	0a ec       	ldi	r16, 0xCA	; 202
    11d2:	10 e0       	ldi	r17, 0x00	; 0
    11d4:	8b e3       	ldi	r24, 0x3B	; 59
    11d6:	6e e0       	ldi	r22, 0x0E	; 14
    11d8:	a8 01       	movw	r20, r16
    11da:	aa df       	rcall	.-172    	; 0x1130 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    11dc:	f8 01       	movw	r30, r16
    11de:	41 91       	ld	r20, Z+
    11e0:	20 81       	ld	r18, Z
    11e2:	94 2f       	mov	r25, r20
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	82 2b       	or	r24, r18
    11ea:	93 2b       	or	r25, r19
    11ec:	f6 01       	movw	r30, r12
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    11f2:	f8 01       	movw	r30, r16
    11f4:	32 96       	adiw	r30, 0x02	; 2
    11f6:	40 81       	ld	r20, Z
    11f8:	f8 01       	movw	r30, r16
    11fa:	33 96       	adiw	r30, 0x03	; 3
    11fc:	20 81       	ld	r18, Z
    11fe:	94 2f       	mov	r25, r20
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	82 2b       	or	r24, r18
    1206:	93 2b       	or	r25, r19
    1208:	f5 01       	movw	r30, r10
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    120e:	f8 01       	movw	r30, r16
    1210:	34 96       	adiw	r30, 0x04	; 4
    1212:	40 81       	ld	r20, Z
    1214:	f8 01       	movw	r30, r16
    1216:	35 96       	adiw	r30, 0x05	; 5
    1218:	20 81       	ld	r18, Z
    121a:	94 2f       	mov	r25, r20
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	82 2b       	or	r24, r18
    1222:	93 2b       	or	r25, r19
    1224:	f4 01       	movw	r30, r8
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    122a:	f8 01       	movw	r30, r16
    122c:	38 96       	adiw	r30, 0x08	; 8
    122e:	40 81       	ld	r20, Z
    1230:	f8 01       	movw	r30, r16
    1232:	39 96       	adiw	r30, 0x09	; 9
    1234:	20 81       	ld	r18, Z
    1236:	94 2f       	mov	r25, r20
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	82 2b       	or	r24, r18
    123e:	93 2b       	or	r25, r19
    1240:	f3 01       	movw	r30, r6
    1242:	91 83       	std	Z+1, r25	; 0x01
    1244:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1246:	f8 01       	movw	r30, r16
    1248:	3a 96       	adiw	r30, 0x0a	; 10
    124a:	40 81       	ld	r20, Z
    124c:	f8 01       	movw	r30, r16
    124e:	3b 96       	adiw	r30, 0x0b	; 11
    1250:	20 81       	ld	r18, Z
    1252:	94 2f       	mov	r25, r20
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	82 2b       	or	r24, r18
    125a:	93 2b       	or	r25, r19
    125c:	f2 01       	movw	r30, r4
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1262:	f8 01       	movw	r30, r16
    1264:	3c 96       	adiw	r30, 0x0c	; 12
    1266:	40 81       	ld	r20, Z
    1268:	03 5f       	subi	r16, 0xF3	; 243
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	f8 01       	movw	r30, r16
    126e:	20 81       	ld	r18, Z
    1270:	94 2f       	mov	r25, r20
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	82 2b       	or	r24, r18
    1278:	93 2b       	or	r25, r19
    127a:	f7 01       	movw	r30, r14
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
}
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	08 95       	ret

0000129e <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
    129e:	2f 92       	push	r2
    12a0:	3f 92       	push	r3
    12a2:	4f 92       	push	r4
    12a4:	5f 92       	push	r5
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	2c 97       	sbiw	r28, 0x0c	; 12
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	6c 01       	movw	r12, r24
    12d4:	5b 01       	movw	r10, r22
    12d6:	4a 01       	movw	r8, r20
    12d8:	39 01       	movw	r6, r18
    12da:	28 01       	movw	r4, r16
    12dc:	17 01       	movw	r2, r14
	int16_t ax = 0;
    12de:	1a 82       	std	Y+2, r1	; 0x02
    12e0:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
    12e2:	1c 82       	std	Y+4, r1	; 0x04
    12e4:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
    12e6:	1e 82       	std	Y+6, r1	; 0x06
    12e8:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
    12ea:	18 86       	std	Y+8, r1	; 0x08
    12ec:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
    12ee:	1a 86       	std	Y+10, r1	; 0x0a
    12f0:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
    12f2:	1c 86       	std	Y+12, r1	; 0x0c
    12f4:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	be 01       	movw	r22, r28
    12fc:	6d 5f       	subi	r22, 0xFD	; 253
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	ae 01       	movw	r20, r28
    1302:	4b 5f       	subi	r20, 0xFB	; 251
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	9e 01       	movw	r18, r28
    1308:	29 5f       	subi	r18, 0xF9	; 249
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	8e 01       	movw	r16, r28
    130e:	07 5f       	subi	r16, 0xF7	; 247
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	0f 2e       	mov	r0, r31
    1314:	fb e0       	ldi	r31, 0x0B	; 11
    1316:	ef 2e       	mov	r14, r31
    1318:	ff 24       	eor	r15, r15
    131a:	f0 2d       	mov	r31, r0
    131c:	ec 0e       	add	r14, r28
    131e:	fd 1e       	adc	r15, r29
    1320:	44 df       	rcall	.-376    	; 0x11aa <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    1322:	69 81       	ldd	r22, Y+1	; 0x01
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	88 27       	eor	r24, r24
    1328:	77 fd       	sbrc	r23, 7
    132a:	80 95       	com	r24
    132c:	98 2f       	mov	r25, r24
    132e:	20 d4       	rcall	.+2112   	; 0x1b70 <__floatsisf>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	58 e3       	ldi	r21, 0x38	; 56
    1338:	cf d4       	rcall	.+2462   	; 0x1cd8 <__mulsf3>
    133a:	f6 01       	movw	r30, r12
    133c:	60 83       	st	Z, r22
    133e:	71 83       	std	Z+1, r23	; 0x01
    1340:	82 83       	std	Z+2, r24	; 0x02
    1342:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    1344:	6b 81       	ldd	r22, Y+3	; 0x03
    1346:	7c 81       	ldd	r23, Y+4	; 0x04
    1348:	88 27       	eor	r24, r24
    134a:	77 fd       	sbrc	r23, 7
    134c:	80 95       	com	r24
    134e:	98 2f       	mov	r25, r24
    1350:	0f d4       	rcall	.+2078   	; 0x1b70 <__floatsisf>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	58 e3       	ldi	r21, 0x38	; 56
    135a:	be d4       	rcall	.+2428   	; 0x1cd8 <__mulsf3>
    135c:	f5 01       	movw	r30, r10
    135e:	60 83       	st	Z, r22
    1360:	71 83       	std	Z+1, r23	; 0x01
    1362:	82 83       	std	Z+2, r24	; 0x02
    1364:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1366:	6d 81       	ldd	r22, Y+5	; 0x05
    1368:	7e 81       	ldd	r23, Y+6	; 0x06
    136a:	88 27       	eor	r24, r24
    136c:	77 fd       	sbrc	r23, 7
    136e:	80 95       	com	r24
    1370:	98 2f       	mov	r25, r24
    1372:	fe d3       	rcall	.+2044   	; 0x1b70 <__floatsisf>
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	58 e3       	ldi	r21, 0x38	; 56
    137c:	ad d4       	rcall	.+2394   	; 0x1cd8 <__mulsf3>
    137e:	f4 01       	movw	r30, r8
    1380:	60 83       	st	Z, r22
    1382:	71 83       	std	Z+1, r23	; 0x01
    1384:	82 83       	std	Z+2, r24	; 0x02
    1386:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
    1388:	6f 81       	ldd	r22, Y+7	; 0x07
    138a:	78 85       	ldd	r23, Y+8	; 0x08
    138c:	66 5d       	subi	r22, 0xD6	; 214
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	88 27       	eor	r24, r24
    1392:	77 fd       	sbrc	r23, 7
    1394:	80 95       	com	r24
    1396:	98 2f       	mov	r25, r24
    1398:	eb d3       	rcall	.+2006   	; 0x1b70 <__floatsisf>
    139a:	23 e3       	ldi	r18, 0x33	; 51
    139c:	33 e3       	ldi	r19, 0x33	; 51
    139e:	43 e8       	ldi	r20, 0x83	; 131
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	50 d3       	rcall	.+1696   	; 0x1a44 <__divsf3>
    13a4:	f3 01       	movw	r30, r6
    13a6:	60 83       	st	Z, r22
    13a8:	71 83       	std	Z+1, r23	; 0x01
    13aa:	82 83       	std	Z+2, r24	; 0x02
    13ac:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
    13ae:	69 85       	ldd	r22, Y+9	; 0x09
    13b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    13b2:	69 50       	subi	r22, 0x09	; 9
    13b4:	70 40       	sbci	r23, 0x00	; 0
    13b6:	88 27       	eor	r24, r24
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	80 95       	com	r24
    13bc:	98 2f       	mov	r25, r24
    13be:	d8 d3       	rcall	.+1968   	; 0x1b70 <__floatsisf>
    13c0:	23 e3       	ldi	r18, 0x33	; 51
    13c2:	33 e3       	ldi	r19, 0x33	; 51
    13c4:	43 e8       	ldi	r20, 0x83	; 131
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	3d d3       	rcall	.+1658   	; 0x1a44 <__divsf3>
    13ca:	f2 01       	movw	r30, r4
    13cc:	60 83       	st	Z, r22
    13ce:	71 83       	std	Z+1, r23	; 0x01
    13d0:	82 83       	std	Z+2, r24	; 0x02
    13d2:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
    13d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d8:	63 5e       	subi	r22, 0xE3	; 227
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	88 27       	eor	r24, r24
    13de:	77 fd       	sbrc	r23, 7
    13e0:	80 95       	com	r24
    13e2:	98 2f       	mov	r25, r24
    13e4:	c5 d3       	rcall	.+1930   	; 0x1b70 <__floatsisf>
    13e6:	23 e3       	ldi	r18, 0x33	; 51
    13e8:	33 e3       	ldi	r19, 0x33	; 51
    13ea:	43 e8       	ldi	r20, 0x83	; 131
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	2a d3       	rcall	.+1620   	; 0x1a44 <__divsf3>
    13f0:	f1 01       	movw	r30, r2
    13f2:	60 83       	st	Z, r22
    13f4:	71 83       	std	Z+1, r23	; 0x01
    13f6:	82 83       	std	Z+2, r24	; 0x02
    13f8:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
    13fa:	2c 96       	adiw	r28, 0x0c	; 12
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	af 90       	pop	r10
    141a:	9f 90       	pop	r9
    141c:	8f 90       	pop	r8
    141e:	7f 90       	pop	r7
    1420:	6f 90       	pop	r6
    1422:	5f 90       	pop	r5
    1424:	4f 90       	pop	r4
    1426:	3f 90       	pop	r3
    1428:	2f 90       	pop	r2
    142a:	08 95       	ret

0000142c <mpu6050_readByte>:
}

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    142c:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	7f de       	rcall	.-770    	; 0x1130 <mpu6050_readBytes>
}
    1432:	08 95       	ret

00001434 <mpu6050_writeBit>:
}

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	f8 2e       	mov	r15, r24
    1446:	06 2f       	mov	r16, r22
    1448:	14 2f       	mov	r17, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    144a:	be 01       	movw	r22, r28
    144c:	6f 5f       	subi	r22, 0xFF	; 255
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	ed df       	rcall	.-38     	; 0x142c <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    1452:	11 23       	and	r17, r17
    1454:	59 f0       	breq	.+22     	; 0x146c <mpu6050_writeBit+0x38>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <mpu6050_writeBit+0x2c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 95       	dec	r16
    1462:	e2 f7       	brpl	.-8      	; 0x145c <mpu6050_writeBit+0x28>
    1464:	29 81       	ldd	r18, Y+1	; 0x01
    1466:	62 2f       	mov	r22, r18
    1468:	68 2b       	or	r22, r24
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <mpu6050_writeBit+0x4e>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <mpu6050_writeBit+0x42>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 95       	dec	r16
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <mpu6050_writeBit+0x3e>
    147a:	80 95       	com	r24
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	68 2f       	mov	r22, r24
    1480:	62 23       	and	r22, r18
    1482:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    1484:	8f 2d       	mov	r24, r15
    1486:	45 de       	rcall	.-886    	; 0x1112 <mpu6050_writeByte>
}
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	08 95       	ret

00001496 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    1496:	8b e6       	ldi	r24, 0x6B	; 107
    1498:	66 e0       	ldi	r22, 0x06	; 6
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	cb df       	rcall	.-106    	; 0x1434 <mpu6050_writeBit>
}
    149e:	08 95       	ret

000014a0 <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	e8 2e       	mov	r14, r24
    14b4:	06 2f       	mov	r16, r22
    14b6:	14 2f       	mov	r17, r20
    14b8:	f2 2e       	mov	r15, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    14ba:	44 23       	and	r20, r20
    14bc:	69 f1       	breq	.+90     	; 0x1518 <mpu6050_writeBits+0x78>
		uint8_t b = 0;
    14be:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	b2 df       	rcall	.-156    	; 0x142c <mpu6050_readByte>
    14c8:	88 23       	and	r24, r24
    14ca:	31 f1       	breq	.+76     	; 0x1518 <mpu6050_writeBits+0x78>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    14cc:	21 2f       	mov	r18, r17
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 2f       	mov	r20, r16
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	4f 5f       	subi	r20, 0xFF	; 255
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	42 1b       	sub	r20, r18
    14da:	53 0b       	sbc	r21, r19
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <mpu6050_writeBits+0x46>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	1a 95       	dec	r17
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <mpu6050_writeBits+0x42>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	04 2e       	mov	r0, r20
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <mpu6050_writeBits+0x54>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <mpu6050_writeBits+0x50>
			data <<= (bitStart - length + 1); // shift data into correct position
    14f8:	2f 2d       	mov	r18, r15
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <mpu6050_writeBits+0x62>
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	4a 95       	dec	r20
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <mpu6050_writeBits+0x5e>
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    1506:	68 2f       	mov	r22, r24
    1508:	60 95       	com	r22
    150a:	49 81       	ldd	r20, Y+1	; 0x01
    150c:	64 23       	and	r22, r20
    150e:	82 23       	and	r24, r18
    1510:	68 2b       	or	r22, r24
    1512:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    1514:	8e 2d       	mov	r24, r14
    1516:	fd dd       	rcall	.-1030   	; 0x1112 <mpu6050_writeByte>
		}
	}
}
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	08 95       	ret

00001528 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    1528:	79 d1       	rcall	.+754    	; 0x181c <i2c_init>
    152a:	85 e3       	ldi	r24, 0x35	; 53
    152c:	8a 95       	dec	r24
    152e:	f1 f7       	brne	.-4      	; 0x152c <mpu6050_init+0x4>
    1530:	28 ee       	ldi	r18, 0xE8	; 232
    1532:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1534:	40 e9       	ldi	r20, 0x90	; 144
    1536:	51 e0       	ldi	r21, 0x01	; 1
    1538:	ca 01       	movw	r24, r20
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <mpu6050_init+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	21 50       	subi	r18, 0x01	; 1
    1540:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	d1 f7       	brne	.-12     	; 0x1538 <mpu6050_init+0x10>

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    1544:	a8 df       	rcall	.-176    	; 0x1496 <mpu6050_setSleepDisabled>
    1546:	80 e4       	ldi	r24, 0x40	; 64
    1548:	9c e9       	ldi	r25, 0x9C	; 156
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <mpu6050_init+0x22>
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    154e:	8b e6       	ldi	r24, 0x6B	; 107
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	43 e0       	ldi	r20, 0x03	; 3
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	a4 df       	rcall	.-184    	; 0x14a0 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    1558:	8a e1       	ldi	r24, 0x1A	; 26
    155a:	62 e0       	ldi	r22, 0x02	; 2
    155c:	43 e0       	ldi	r20, 0x03	; 3
    155e:	23 e0       	ldi	r18, 0x03	; 3
    1560:	9f df       	rcall	.-194    	; 0x14a0 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1562:	89 e1       	ldi	r24, 0x19	; 25
    1564:	64 e0       	ldi	r22, 0x04	; 4
    1566:	d5 dd       	rcall	.-1110   	; 0x1112 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    1568:	8b e1       	ldi	r24, 0x1B	; 27
    156a:	64 e0       	ldi	r22, 0x04	; 4
    156c:	42 e0       	ldi	r20, 0x02	; 2
    156e:	23 e0       	ldi	r18, 0x03	; 3
    1570:	97 df       	rcall	.-210    	; 0x14a0 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1572:	8c e1       	ldi	r24, 0x1C	; 28
    1574:	64 e0       	ldi	r22, 0x04	; 4
    1576:	42 e0       	ldi	r20, 0x02	; 2
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	92 df       	rcall	.-220    	; 0x14a0 <mpu6050_writeBits>

}
    157c:	08 95       	ret

0000157e <mpu6050_readBit>:
}

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	f6 2e       	mov	r15, r22
    1590:	8a 01       	movw	r16, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    1592:	be 01       	movw	r22, r28
    1594:	6f 5f       	subi	r22, 0xFF	; 255
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	49 df       	rcall	.-366    	; 0x142c <mpu6050_readByte>
    *data = b & (1 << bitNum);
    159a:	21 e0       	ldi	r18, 0x01	; 1
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <mpu6050_readBit+0x26>
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	fa 94       	dec	r15
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <mpu6050_readBit+0x22>
    15a8:	99 81       	ldd	r25, Y+1	; 0x01
    15aa:	92 23       	and	r25, r18
    15ac:	f8 01       	movw	r30, r16
    15ae:	90 83       	st	Z, r25
    return count;
}
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	08 95       	ret

000015be <mpu6050_updateQuaternion>:
}

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    15be:	2f 92       	push	r2
    15c0:	3f 92       	push	r3
    15c2:	4f 92       	push	r4
    15c4:	5f 92       	push	r5
    15c6:	6f 92       	push	r6
    15c8:	7f 92       	push	r7
    15ca:	8f 92       	push	r8
    15cc:	9f 92       	push	r9
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <mpu6050_updateQuaternion+0x26>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <mpu6050_updateQuaternion+0x28>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <mpu6050_updateQuaternion+0x2a>
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    15ec:	0f 2e       	mov	r0, r31
    15ee:	fa ec       	ldi	r31, 0xCA	; 202
    15f0:	ef 2e       	mov	r14, r31
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	ff 2e       	mov	r15, r31
    15f6:	f0 2d       	mov	r31, r0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f8:	15 e3       	ldi	r17, 0x35	; 53
    15fa:	8a e3       	ldi	r24, 0x3A	; 58
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	a7 01       	movw	r20, r14
    1600:	be df       	rcall	.-132    	; 0x157e <mpu6050_readBit>
		if(buffer[0])
    1602:	f7 01       	movw	r30, r14
    1604:	80 81       	ld	r24, Z
    1606:	88 23       	and	r24, r24
    1608:	21 f4       	brne	.+8      	; 0x1612 <mpu6050_updateQuaternion+0x54>
    160a:	81 2f       	mov	r24, r17
    160c:	8a 95       	dec	r24
    160e:	f1 f7       	brne	.-4      	; 0x160c <mpu6050_updateQuaternion+0x4e>
    1610:	f4 cf       	rjmp	.-24     	; 0x15fa <mpu6050_updateQuaternion+0x3c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    1612:	0a ec       	ldi	r16, 0xCA	; 202
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	8b e3       	ldi	r24, 0x3B	; 59
    1618:	6e e0       	ldi	r22, 0x0E	; 14
    161a:	a8 01       	movw	r20, r16
    161c:	89 dd       	rcall	.-1262   	; 0x1130 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    161e:	f8 01       	movw	r30, r16
    1620:	d1 90       	ld	r13, Z+
    1622:	c0 80       	ld	r12, Z
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1624:	f8 01       	movw	r30, r16
    1626:	32 96       	adiw	r30, 0x02	; 2
    1628:	90 80       	ld	r9, Z
    162a:	f8 01       	movw	r30, r16
    162c:	33 96       	adiw	r30, 0x03	; 3
    162e:	80 80       	ld	r8, Z
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    1630:	f8 01       	movw	r30, r16
    1632:	34 96       	adiw	r30, 0x04	; 4
    1634:	70 80       	ld	r7, Z
    1636:	f8 01       	movw	r30, r16
    1638:	35 96       	adiw	r30, 0x05	; 5
    163a:	60 80       	ld	r6, Z
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    163c:	f8 01       	movw	r30, r16
    163e:	38 96       	adiw	r30, 0x08	; 8
    1640:	40 81       	ld	r20, Z
    1642:	f8 01       	movw	r30, r16
    1644:	39 96       	adiw	r30, 0x09	; 9
    1646:	20 81       	ld	r18, Z
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1648:	f8 01       	movw	r30, r16
    164a:	3a 96       	adiw	r30, 0x0a	; 10
    164c:	b0 80       	ld	r11, Z
    164e:	f8 01       	movw	r30, r16
    1650:	3b 96       	adiw	r30, 0x0b	; 11
    1652:	e0 80       	ld	r14, Z
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1654:	f8 01       	movw	r30, r16
    1656:	3c 96       	adiw	r30, 0x0c	; 12
    1658:	a0 80       	ld	r10, Z
    165a:	03 5f       	subi	r16, 0xF3	; 243
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	f8 01       	movw	r30, r16
    1660:	00 81       	ld	r16, Z
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    1662:	8d b7       	in	r24, 0x3d	; 61
    1664:	9e b7       	in	r25, 0x3e	; 62
    1666:	08 97       	sbiw	r24, 0x08	; 8
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	9e bf       	out	0x3e, r25	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	8d bf       	out	0x3d, r24	; 61
    1672:	ed b7       	in	r30, 0x3d	; 61
    1674:	fe b7       	in	r31, 0x3e	; 62
    1676:	31 96       	adiw	r30, 0x01	; 1
    1678:	fe 83       	std	Y+6, r31	; 0x06
    167a:	ed 83       	std	Y+5, r30	; 0x05
    167c:	74 2f       	mov	r23, r20
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	62 2b       	or	r22, r18
    1684:	73 2b       	or	r23, r19
    1686:	66 5d       	subi	r22, 0xD6	; 214
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	88 27       	eor	r24, r24
    168c:	77 fd       	sbrc	r23, 7
    168e:	80 95       	com	r24
    1690:	98 2f       	mov	r25, r24
    1692:	6e d2       	rcall	.+1244   	; 0x1b70 <__floatsisf>
    1694:	23 e3       	ldi	r18, 0x33	; 51
    1696:	33 e3       	ldi	r19, 0x33	; 51
    1698:	43 e8       	ldi	r20, 0x83	; 131
    169a:	51 e4       	ldi	r21, 0x41	; 65
    169c:	d3 d1       	rcall	.+934    	; 0x1a44 <__divsf3>
    169e:	24 e3       	ldi	r18, 0x34	; 52
    16a0:	3a ef       	ldi	r19, 0xFA	; 250
    16a2:	4e e8       	ldi	r20, 0x8E	; 142
    16a4:	5c e3       	ldi	r21, 0x3C	; 60
    16a6:	18 d3       	rcall	.+1584   	; 0x1cd8 <__mulsf3>
    16a8:	69 83       	std	Y+1, r22	; 0x01
    16aa:	7a 83       	std	Y+2, r23	; 0x02
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	7b 2d       	mov	r23, r11
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	ff 24       	eor	r15, r15
    16b6:	6e 29       	or	r22, r14
    16b8:	7f 29       	or	r23, r15
    16ba:	69 50       	subi	r22, 0x09	; 9
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	88 27       	eor	r24, r24
    16c0:	77 fd       	sbrc	r23, 7
    16c2:	80 95       	com	r24
    16c4:	98 2f       	mov	r25, r24
    16c6:	54 d2       	rcall	.+1192   	; 0x1b70 <__floatsisf>
    16c8:	23 e3       	ldi	r18, 0x33	; 51
    16ca:	33 e3       	ldi	r19, 0x33	; 51
    16cc:	43 e8       	ldi	r20, 0x83	; 131
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	b9 d1       	rcall	.+882    	; 0x1a44 <__divsf3>
    16d2:	24 e3       	ldi	r18, 0x34	; 52
    16d4:	3a ef       	ldi	r19, 0xFA	; 250
    16d6:	4e e8       	ldi	r20, 0x8E	; 142
    16d8:	5c e3       	ldi	r21, 0x3C	; 60
    16da:	fe d2       	rcall	.+1532   	; 0x1cd8 <__mulsf3>
    16dc:	1b 01       	movw	r2, r22
    16de:	2c 01       	movw	r4, r24
    16e0:	7a 2d       	mov	r23, r10
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	10 e0       	ldi	r17, 0x00	; 0
    16e6:	60 2b       	or	r22, r16
    16e8:	71 2b       	or	r23, r17
    16ea:	63 5e       	subi	r22, 0xE3	; 227
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	88 27       	eor	r24, r24
    16f0:	77 fd       	sbrc	r23, 7
    16f2:	80 95       	com	r24
    16f4:	98 2f       	mov	r25, r24
    16f6:	3c d2       	rcall	.+1144   	; 0x1b70 <__floatsisf>
    16f8:	23 e3       	ldi	r18, 0x33	; 51
    16fa:	33 e3       	ldi	r19, 0x33	; 51
    16fc:	43 e8       	ldi	r20, 0x83	; 131
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	a1 d1       	rcall	.+834    	; 0x1a44 <__divsf3>
    1702:	24 e3       	ldi	r18, 0x34	; 52
    1704:	3a ef       	ldi	r19, 0xFA	; 250
    1706:	4e e8       	ldi	r20, 0x8E	; 142
    1708:	5c e3       	ldi	r21, 0x3C	; 60
    170a:	e6 d2       	rcall	.+1484   	; 0x1cd8 <__mulsf3>
    170c:	7b 01       	movw	r14, r22
    170e:	8c 01       	movw	r16, r24
    1710:	7d 2d       	mov	r23, r13
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	dd 24       	eor	r13, r13
    1716:	6c 29       	or	r22, r12
    1718:	7d 29       	or	r23, r13
    171a:	88 27       	eor	r24, r24
    171c:	77 fd       	sbrc	r23, 7
    171e:	80 95       	com	r24
    1720:	98 2f       	mov	r25, r24
    1722:	26 d2       	rcall	.+1100   	; 0x1b70 <__floatsisf>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e8       	ldi	r20, 0x80	; 128
    172a:	58 e3       	ldi	r21, 0x38	; 56
    172c:	d5 d2       	rcall	.+1450   	; 0x1cd8 <__mulsf3>
    172e:	5b 01       	movw	r10, r22
    1730:	6c 01       	movw	r12, r24
    1732:	79 2d       	mov	r23, r9
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	99 24       	eor	r9, r9
    1738:	68 29       	or	r22, r8
    173a:	79 29       	or	r23, r9
    173c:	88 27       	eor	r24, r24
    173e:	77 fd       	sbrc	r23, 7
    1740:	80 95       	com	r24
    1742:	98 2f       	mov	r25, r24
    1744:	15 d2       	rcall	.+1066   	; 0x1b70 <__floatsisf>
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	58 e3       	ldi	r21, 0x38	; 56
    174e:	c4 d2       	rcall	.+1416   	; 0x1cd8 <__mulsf3>
    1750:	ed 81       	ldd	r30, Y+5	; 0x05
    1752:	fe 81       	ldd	r31, Y+6	; 0x06
    1754:	60 83       	st	Z, r22
    1756:	71 83       	std	Z+1, r23	; 0x01
    1758:	82 83       	std	Z+2, r24	; 0x02
    175a:	93 83       	std	Z+3, r25	; 0x03
    175c:	77 2d       	mov	r23, r7
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	77 24       	eor	r7, r7
    1762:	66 29       	or	r22, r6
    1764:	77 29       	or	r23, r7
    1766:	88 27       	eor	r24, r24
    1768:	77 fd       	sbrc	r23, 7
    176a:	80 95       	com	r24
    176c:	98 2f       	mov	r25, r24
    176e:	00 d2       	rcall	.+1024   	; 0x1b70 <__floatsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	58 e3       	ldi	r21, 0x38	; 56
    1778:	af d2       	rcall	.+1374   	; 0x1cd8 <__mulsf3>
    177a:	ed 81       	ldd	r30, Y+5	; 0x05
    177c:	fe 81       	ldd	r31, Y+6	; 0x06
    177e:	64 83       	std	Z+4, r22	; 0x04
    1780:	75 83       	std	Z+5, r23	; 0x05
    1782:	86 83       	std	Z+6, r24	; 0x06
    1784:	97 83       	std	Z+7, r25	; 0x07
    1786:	69 81       	ldd	r22, Y+1	; 0x01
    1788:	7a 81       	ldd	r23, Y+2	; 0x02
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	a2 01       	movw	r20, r4
    1790:	91 01       	movw	r18, r2
    1792:	3d d8       	rcall	.-3974   	; 0x80e <mpu6050_mahonyUpdate>
    1794:	8d b7       	in	r24, 0x3d	; 61
    1796:	9e b7       	in	r25, 0x3e	; 62
    1798:	08 96       	adiw	r24, 0x08	; 8
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	9e bf       	out	0x3e, r25	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	8d bf       	out	0x3d, r24	; 61
}
    17a4:	26 96       	adiw	r28, 0x06	; 6
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	9f 90       	pop	r9
    17c6:	8f 90       	pop	r8
    17c8:	7f 90       	pop	r7
    17ca:	6f 90       	pop	r6
    17cc:	5f 90       	pop	r5
    17ce:	4f 90       	pop	r4
    17d0:	3f 90       	pop	r3
    17d2:	2f 90       	pop	r2
    17d4:	08 95       	ret

000017d6 <__vector_9>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	2f 93       	push	r18
    17e2:	3f 93       	push	r19
    17e4:	4f 93       	push	r20
    17e6:	5f 93       	push	r21
    17e8:	6f 93       	push	r22
    17ea:	7f 93       	push	r23
    17ec:	8f 93       	push	r24
    17ee:	9f 93       	push	r25
    17f0:	af 93       	push	r26
    17f2:	bf 93       	push	r27
    17f4:	ef 93       	push	r30
    17f6:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    17f8:	e2 de       	rcall	.-572    	; 0x15be <mpu6050_updateQuaternion>
}
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f 90       	pop	r0
    1818:	1f 90       	pop	r1
    181a:	18 95       	reti

0000181c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    181c:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    181e:	8c e0       	ldi	r24, 0x0C	; 12
    1820:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
    1822:	08 95       	ret

00001824 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    1824:	98 2f       	mov	r25, r24
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1826:	84 ea       	ldi	r24, 0xA4	; 164
    1828:	86 bf       	out	0x36, r24	; 54
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 23       	and	r24, r24
    183a:	34 f0       	brlt	.+12     	; 0x1848 <i2c_start+0x24>
    183c:	21 50       	subi	r18, 0x01	; 1
    183e:	31 09       	sbc	r19, r1
    1840:	41 09       	sbc	r20, r1
    1842:	51 09       	sbc	r21, r1
    1844:	c0 f7       	brcc	.-16     	; 0x1836 <i2c_start+0x12>
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <i2c_start+0x2e>
	if(i2c_timer == 0)
    1848:	21 15       	cp	r18, r1
    184a:	31 05       	cpc	r19, r1
    184c:	41 05       	cpc	r20, r1
    184e:	51 05       	cpc	r21, r1
    1850:	49 f1       	breq	.+82     	; 0x18a4 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1852:	81 b1       	in	r24, 0x01	; 1
    1854:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	11 f0       	breq	.+4      	; 0x185e <i2c_start+0x3a>
    185a:	80 31       	cpi	r24, 0x10	; 16
    185c:	19 f5       	brne	.+70     	; 0x18a4 <i2c_start+0x80>

	// send device address
	TWDR = address;
    185e:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1860:	84 e8       	ldi	r24, 0x84	; 132
    1862:	86 bf       	out	0x36, r24	; 54
    1864:	2f ef       	ldi	r18, 0xFF	; 255
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 23       	and	r24, r24
    1874:	34 f0       	brlt	.+12     	; 0x1882 <i2c_start+0x5e>
    1876:	21 50       	subi	r18, 0x01	; 1
    1878:	31 09       	sbc	r19, r1
    187a:	41 09       	sbc	r20, r1
    187c:	51 09       	sbc	r21, r1
    187e:	c0 f7       	brcc	.-16     	; 0x1870 <i2c_start+0x4c>
    1880:	05 c0       	rjmp	.+10     	; 0x188c <i2c_start+0x68>
	if(i2c_timer == 0)
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	41 05       	cpc	r20, r1
    1888:	51 05       	cpc	r21, r1
    188a:	61 f0       	breq	.+24     	; 0x18a4 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    188c:	81 b1       	in	r24, 0x01	; 1
    188e:	98 2f       	mov	r25, r24
    1890:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1892:	98 31       	cpi	r25, 0x18	; 24
    1894:	11 f4       	brne	.+4      	; 0x189a <i2c_start+0x76>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	08 95       	ret
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 34       	cpi	r25, 0x40	; 64
    189e:	19 f0       	breq	.+6      	; 0x18a6 <i2c_start+0x82>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	08 95       	ret
    18a4:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    18a6:	08 95       	ret

000018a8 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    18a8:	84 e9       	ldi	r24, 0x94	; 148
    18aa:	86 bf       	out	0x36, r24	; 54
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    18b0:	e6 e5       	ldi	r30, 0x56	; 86
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	84 ff       	sbrs	r24, 4
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <i2c_stop+0x1e>
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	20 30       	cpi	r18, 0x00	; 0
    18c2:	38 07       	cpc	r19, r24
    18c4:	b9 f7       	brne	.-18     	; 0x18b4 <i2c_stop+0xc>
    18c6:	08 95       	ret

000018c8 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    18c8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    18ca:	84 e8       	ldi	r24, 0x84	; 132
    18cc:	86 bf       	out	0x36, r24	; 54
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    18d6:	e6 e5       	ldi	r30, 0x56	; 86
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	88 23       	and	r24, r24
    18de:	34 f0       	brlt	.+12     	; 0x18ec <i2c_write+0x24>
    18e0:	21 50       	subi	r18, 0x01	; 1
    18e2:	31 09       	sbc	r19, r1
    18e4:	41 09       	sbc	r20, r1
    18e6:	51 09       	sbc	r21, r1
    18e8:	c0 f7       	brcc	.-16     	; 0x18da <i2c_write+0x12>
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <i2c_write+0x32>
	if(i2c_timer == 0)
    18ec:	21 15       	cp	r18, r1
    18ee:	31 05       	cpc	r19, r1
    18f0:	41 05       	cpc	r20, r1
    18f2:	51 05       	cpc	r21, r1
    18f4:	11 f4       	brne	.+4      	; 0x18fa <i2c_write+0x32>
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    18fa:	81 b1       	in	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	88 7f       	andi	r24, 0xF8	; 248
    1900:	88 32       	cpi	r24, 0x28	; 40
    1902:	09 f0       	breq	.+2      	; 0x1906 <i2c_write+0x3e>
    1904:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    1906:	89 2f       	mov	r24, r25
    1908:	08 95       	ret

0000190a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    190a:	84 ec       	ldi	r24, 0xC4	; 196
    190c:	86 bf       	out	0x36, r24	; 54
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1916:	e6 e5       	ldi	r30, 0x56	; 86
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 23       	and	r24, r24
    191e:	34 f0       	brlt	.+12     	; 0x192c <i2c_readAck+0x22>
    1920:	21 50       	subi	r18, 0x01	; 1
    1922:	31 09       	sbc	r19, r1
    1924:	41 09       	sbc	r20, r1
    1926:	51 09       	sbc	r21, r1
    1928:	c0 f7       	brcc	.-16     	; 0x191a <i2c_readAck+0x10>
    192a:	07 c0       	rjmp	.+14     	; 0x193a <i2c_readAck+0x30>
	if(i2c_timer == 0)
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	41 05       	cpc	r20, r1
    1932:	51 05       	cpc	r21, r1
    1934:	11 f4       	brne	.+4      	; 0x193a <i2c_readAck+0x30>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	08 95       	ret
		return 0;

    return TWDR;
    193a:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
    193c:	08 95       	ret

0000193e <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    193e:	84 e8       	ldi	r24, 0x84	; 132
    1940:	86 bf       	out	0x36, r24	; 54
    1942:	2f ef       	ldi	r18, 0xFF	; 255
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 23       	and	r24, r24
    1952:	34 f0       	brlt	.+12     	; 0x1960 <i2c_readNak+0x22>
    1954:	21 50       	subi	r18, 0x01	; 1
    1956:	31 09       	sbc	r19, r1
    1958:	41 09       	sbc	r20, r1
    195a:	51 09       	sbc	r21, r1
    195c:	c0 f7       	brcc	.-16     	; 0x194e <i2c_readNak+0x10>
    195e:	07 c0       	rjmp	.+14     	; 0x196e <i2c_readNak+0x30>
	if(i2c_timer == 0)
    1960:	21 15       	cp	r18, r1
    1962:	31 05       	cpc	r19, r1
    1964:	41 05       	cpc	r20, r1
    1966:	51 05       	cpc	r21, r1
    1968:	11 f4       	brne	.+4      	; 0x196e <i2c_readNak+0x30>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	08 95       	ret
		return 0;
	
    return TWDR;
    196e:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
    1970:	08 95       	ret

00001972 <__subsf3>:
    1972:	50 58       	subi	r21, 0x80	; 128

00001974 <__addsf3>:
    1974:	bb 27       	eor	r27, r27
    1976:	aa 27       	eor	r26, r26
    1978:	0e d0       	rcall	.+28     	; 0x1996 <__addsf3x>
    197a:	70 c1       	rjmp	.+736    	; 0x1c5c <__fp_round>
    197c:	61 d1       	rcall	.+706    	; 0x1c40 <__fp_pscA>
    197e:	30 f0       	brcs	.+12     	; 0x198c <__addsf3+0x18>
    1980:	66 d1       	rcall	.+716    	; 0x1c4e <__fp_pscB>
    1982:	20 f0       	brcs	.+8      	; 0x198c <__addsf3+0x18>
    1984:	31 f4       	brne	.+12     	; 0x1992 <__addsf3+0x1e>
    1986:	9f 3f       	cpi	r25, 0xFF	; 255
    1988:	11 f4       	brne	.+4      	; 0x198e <__addsf3+0x1a>
    198a:	1e f4       	brtc	.+6      	; 0x1992 <__addsf3+0x1e>
    198c:	56 c1       	rjmp	.+684    	; 0x1c3a <__fp_nan>
    198e:	0e f4       	brtc	.+2      	; 0x1992 <__addsf3+0x1e>
    1990:	e0 95       	com	r30
    1992:	e7 fb       	bst	r30, 7
    1994:	4c c1       	rjmp	.+664    	; 0x1c2e <__fp_inf>

00001996 <__addsf3x>:
    1996:	e9 2f       	mov	r30, r25
    1998:	72 d1       	rcall	.+740    	; 0x1c7e <__fp_split3>
    199a:	80 f3       	brcs	.-32     	; 0x197c <__addsf3+0x8>
    199c:	ba 17       	cp	r27, r26
    199e:	62 07       	cpc	r22, r18
    19a0:	73 07       	cpc	r23, r19
    19a2:	84 07       	cpc	r24, r20
    19a4:	95 07       	cpc	r25, r21
    19a6:	18 f0       	brcs	.+6      	; 0x19ae <__addsf3x+0x18>
    19a8:	71 f4       	brne	.+28     	; 0x19c6 <__addsf3x+0x30>
    19aa:	9e f5       	brtc	.+102    	; 0x1a12 <__addsf3x+0x7c>
    19ac:	8a c1       	rjmp	.+788    	; 0x1cc2 <__fp_zero>
    19ae:	0e f4       	brtc	.+2      	; 0x19b2 <__addsf3x+0x1c>
    19b0:	e0 95       	com	r30
    19b2:	0b 2e       	mov	r0, r27
    19b4:	ba 2f       	mov	r27, r26
    19b6:	a0 2d       	mov	r26, r0
    19b8:	0b 01       	movw	r0, r22
    19ba:	b9 01       	movw	r22, r18
    19bc:	90 01       	movw	r18, r0
    19be:	0c 01       	movw	r0, r24
    19c0:	ca 01       	movw	r24, r20
    19c2:	a0 01       	movw	r20, r0
    19c4:	11 24       	eor	r1, r1
    19c6:	ff 27       	eor	r31, r31
    19c8:	59 1b       	sub	r21, r25
    19ca:	99 f0       	breq	.+38     	; 0x19f2 <__addsf3x+0x5c>
    19cc:	59 3f       	cpi	r21, 0xF9	; 249
    19ce:	50 f4       	brcc	.+20     	; 0x19e4 <__addsf3x+0x4e>
    19d0:	50 3e       	cpi	r21, 0xE0	; 224
    19d2:	68 f1       	brcs	.+90     	; 0x1a2e <__addsf3x+0x98>
    19d4:	1a 16       	cp	r1, r26
    19d6:	f0 40       	sbci	r31, 0x00	; 0
    19d8:	a2 2f       	mov	r26, r18
    19da:	23 2f       	mov	r18, r19
    19dc:	34 2f       	mov	r19, r20
    19de:	44 27       	eor	r20, r20
    19e0:	58 5f       	subi	r21, 0xF8	; 248
    19e2:	f3 cf       	rjmp	.-26     	; 0x19ca <__addsf3x+0x34>
    19e4:	46 95       	lsr	r20
    19e6:	37 95       	ror	r19
    19e8:	27 95       	ror	r18
    19ea:	a7 95       	ror	r26
    19ec:	f0 40       	sbci	r31, 0x00	; 0
    19ee:	53 95       	inc	r21
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__addsf3x+0x4e>
    19f2:	7e f4       	brtc	.+30     	; 0x1a12 <__addsf3x+0x7c>
    19f4:	1f 16       	cp	r1, r31
    19f6:	ba 0b       	sbc	r27, r26
    19f8:	62 0b       	sbc	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	ba f0       	brmi	.+46     	; 0x1a2e <__addsf3x+0x98>
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	a1 f0       	breq	.+40     	; 0x1a2c <__addsf3x+0x96>
    1a04:	ff 0f       	add	r31, r31
    1a06:	bb 1f       	adc	r27, r27
    1a08:	66 1f       	adc	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	c2 f7       	brpl	.-16     	; 0x1a00 <__addsf3x+0x6a>
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <__addsf3x+0x98>
    1a12:	ba 0f       	add	r27, r26
    1a14:	62 1f       	adc	r22, r18
    1a16:	73 1f       	adc	r23, r19
    1a18:	84 1f       	adc	r24, r20
    1a1a:	48 f4       	brcc	.+18     	; 0x1a2e <__addsf3x+0x98>
    1a1c:	87 95       	ror	r24
    1a1e:	77 95       	ror	r23
    1a20:	67 95       	ror	r22
    1a22:	b7 95       	ror	r27
    1a24:	f7 95       	ror	r31
    1a26:	9e 3f       	cpi	r25, 0xFE	; 254
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <__addsf3x+0x96>
    1a2a:	b3 cf       	rjmp	.-154    	; 0x1992 <__addsf3+0x1e>
    1a2c:	93 95       	inc	r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <__addsf3x+0x9e>
    1a32:	99 27       	eor	r25, r25
    1a34:	ee 0f       	add	r30, r30
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret

00001a3c <__cmpsf2>:
    1a3c:	d4 d0       	rcall	.+424    	; 0x1be6 <__fp_cmp>
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <__cmpsf2+0x6>
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	08 95       	ret

00001a44 <__divsf3>:
    1a44:	0c d0       	rcall	.+24     	; 0x1a5e <__divsf3x>
    1a46:	0a c1       	rjmp	.+532    	; 0x1c5c <__fp_round>
    1a48:	02 d1       	rcall	.+516    	; 0x1c4e <__fp_pscB>
    1a4a:	40 f0       	brcs	.+16     	; 0x1a5c <__divsf3+0x18>
    1a4c:	f9 d0       	rcall	.+498    	; 0x1c40 <__fp_pscA>
    1a4e:	30 f0       	brcs	.+12     	; 0x1a5c <__divsf3+0x18>
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <__divsf3+0x16>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <__divsf3+0x18>
    1a56:	eb c0       	rjmp	.+470    	; 0x1c2e <__fp_inf>
    1a58:	51 11       	cpse	r21, r1
    1a5a:	34 c1       	rjmp	.+616    	; 0x1cc4 <__fp_szero>
    1a5c:	ee c0       	rjmp	.+476    	; 0x1c3a <__fp_nan>

00001a5e <__divsf3x>:
    1a5e:	0f d1       	rcall	.+542    	; 0x1c7e <__fp_split3>
    1a60:	98 f3       	brcs	.-26     	; 0x1a48 <__divsf3+0x4>

00001a62 <__divsf3_pse>:
    1a62:	99 23       	and	r25, r25
    1a64:	c9 f3       	breq	.-14     	; 0x1a58 <__divsf3+0x14>
    1a66:	55 23       	and	r21, r21
    1a68:	b1 f3       	breq	.-20     	; 0x1a56 <__divsf3+0x12>
    1a6a:	95 1b       	sub	r25, r21
    1a6c:	55 0b       	sbc	r21, r21
    1a6e:	bb 27       	eor	r27, r27
    1a70:	aa 27       	eor	r26, r26
    1a72:	62 17       	cp	r22, r18
    1a74:	73 07       	cpc	r23, r19
    1a76:	84 07       	cpc	r24, r20
    1a78:	38 f0       	brcs	.+14     	; 0x1a88 <__divsf3_pse+0x26>
    1a7a:	9f 5f       	subi	r25, 0xFF	; 255
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	44 1f       	adc	r20, r20
    1a84:	aa 1f       	adc	r26, r26
    1a86:	a9 f3       	breq	.-22     	; 0x1a72 <__divsf3_pse+0x10>
    1a88:	33 d0       	rcall	.+102    	; 0x1af0 <__divsf3_pse+0x8e>
    1a8a:	0e 2e       	mov	r0, r30
    1a8c:	3a f0       	brmi	.+14     	; 0x1a9c <__divsf3_pse+0x3a>
    1a8e:	e0 e8       	ldi	r30, 0x80	; 128
    1a90:	30 d0       	rcall	.+96     	; 0x1af2 <__divsf3_pse+0x90>
    1a92:	91 50       	subi	r25, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	e6 95       	lsr	r30
    1a98:	00 1c       	adc	r0, r0
    1a9a:	ca f7       	brpl	.-14     	; 0x1a8e <__divsf3_pse+0x2c>
    1a9c:	29 d0       	rcall	.+82     	; 0x1af0 <__divsf3_pse+0x8e>
    1a9e:	fe 2f       	mov	r31, r30
    1aa0:	27 d0       	rcall	.+78     	; 0x1af0 <__divsf3_pse+0x8e>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	26 17       	cp	r18, r22
    1aac:	37 07       	cpc	r19, r23
    1aae:	48 07       	cpc	r20, r24
    1ab0:	ab 07       	cpc	r26, r27
    1ab2:	b0 e8       	ldi	r27, 0x80	; 128
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <__divsf3_pse+0x56>
    1ab6:	bb 0b       	sbc	r27, r27
    1ab8:	80 2d       	mov	r24, r0
    1aba:	bf 01       	movw	r22, r30
    1abc:	ff 27       	eor	r31, r31
    1abe:	93 58       	subi	r25, 0x83	; 131
    1ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac2:	2a f0       	brmi	.+10     	; 0x1ace <__divsf3_pse+0x6c>
    1ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac6:	51 05       	cpc	r21, r1
    1ac8:	68 f0       	brcs	.+26     	; 0x1ae4 <__divsf3_pse+0x82>
    1aca:	b1 c0       	rjmp	.+354    	; 0x1c2e <__fp_inf>
    1acc:	fb c0       	rjmp	.+502    	; 0x1cc4 <__fp_szero>
    1ace:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad0:	ec f3       	brlt	.-6      	; 0x1acc <__divsf3_pse+0x6a>
    1ad2:	98 3e       	cpi	r25, 0xE8	; 232
    1ad4:	dc f3       	brlt	.-10     	; 0x1acc <__divsf3_pse+0x6a>
    1ad6:	86 95       	lsr	r24
    1ad8:	77 95       	ror	r23
    1ada:	67 95       	ror	r22
    1adc:	b7 95       	ror	r27
    1ade:	f7 95       	ror	r31
    1ae0:	9f 5f       	subi	r25, 0xFF	; 255
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__divsf3_pse+0x74>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	91 1d       	adc	r25, r1
    1ae8:	96 95       	lsr	r25
    1aea:	87 95       	ror	r24
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret
    1af0:	e1 e0       	ldi	r30, 0x01	; 1
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	bb 1f       	adc	r27, r27
    1afa:	62 17       	cp	r22, r18
    1afc:	73 07       	cpc	r23, r19
    1afe:	84 07       	cpc	r24, r20
    1b00:	ba 07       	cpc	r27, r26
    1b02:	20 f0       	brcs	.+8      	; 0x1b0c <__divsf3_pse+0xaa>
    1b04:	62 1b       	sub	r22, r18
    1b06:	73 0b       	sbc	r23, r19
    1b08:	84 0b       	sbc	r24, r20
    1b0a:	ba 0b       	sbc	r27, r26
    1b0c:	ee 1f       	adc	r30, r30
    1b0e:	88 f7       	brcc	.-30     	; 0x1af2 <__divsf3_pse+0x90>
    1b10:	e0 95       	com	r30
    1b12:	08 95       	ret

00001b14 <__fixunssfsi>:
    1b14:	bc d0       	rcall	.+376    	; 0x1c8e <__fp_splitA>
    1b16:	88 f0       	brcs	.+34     	; 0x1b3a <__fixunssfsi+0x26>
    1b18:	9f 57       	subi	r25, 0x7F	; 127
    1b1a:	90 f0       	brcs	.+36     	; 0x1b40 <__fixunssfsi+0x2c>
    1b1c:	b9 2f       	mov	r27, r25
    1b1e:	99 27       	eor	r25, r25
    1b20:	b7 51       	subi	r27, 0x17	; 23
    1b22:	a0 f0       	brcs	.+40     	; 0x1b4c <__fixunssfsi+0x38>
    1b24:	d1 f0       	breq	.+52     	; 0x1b5a <__fixunssfsi+0x46>
    1b26:	66 0f       	add	r22, r22
    1b28:	77 1f       	adc	r23, r23
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	1a f0       	brmi	.+6      	; 0x1b36 <__fixunssfsi+0x22>
    1b30:	ba 95       	dec	r27
    1b32:	c9 f7       	brne	.-14     	; 0x1b26 <__fixunssfsi+0x12>
    1b34:	12 c0       	rjmp	.+36     	; 0x1b5a <__fixunssfsi+0x46>
    1b36:	b1 30       	cpi	r27, 0x01	; 1
    1b38:	81 f0       	breq	.+32     	; 0x1b5a <__fixunssfsi+0x46>
    1b3a:	c3 d0       	rcall	.+390    	; 0x1cc2 <__fp_zero>
    1b3c:	b1 e0       	ldi	r27, 0x01	; 1
    1b3e:	08 95       	ret
    1b40:	c0 c0       	rjmp	.+384    	; 0x1cc2 <__fp_zero>
    1b42:	67 2f       	mov	r22, r23
    1b44:	78 2f       	mov	r23, r24
    1b46:	88 27       	eor	r24, r24
    1b48:	b8 5f       	subi	r27, 0xF8	; 248
    1b4a:	39 f0       	breq	.+14     	; 0x1b5a <__fixunssfsi+0x46>
    1b4c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b4e:	cc f3       	brlt	.-14     	; 0x1b42 <__fixunssfsi+0x2e>
    1b50:	86 95       	lsr	r24
    1b52:	77 95       	ror	r23
    1b54:	67 95       	ror	r22
    1b56:	b3 95       	inc	r27
    1b58:	d9 f7       	brne	.-10     	; 0x1b50 <__fixunssfsi+0x3c>
    1b5a:	3e f4       	brtc	.+14     	; 0x1b6a <__fixunssfsi+0x56>
    1b5c:	90 95       	com	r25
    1b5e:	80 95       	com	r24
    1b60:	70 95       	com	r23
    1b62:	61 95       	neg	r22
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	8f 4f       	sbci	r24, 0xFF	; 255
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__floatunsisf>:
    1b6c:	e8 94       	clt
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <__floatsisf+0x12>

00001b70 <__floatsisf>:
    1b70:	97 fb       	bst	r25, 7
    1b72:	3e f4       	brtc	.+14     	; 0x1b82 <__floatsisf+0x12>
    1b74:	90 95       	com	r25
    1b76:	80 95       	com	r24
    1b78:	70 95       	com	r23
    1b7a:	61 95       	neg	r22
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	99 23       	and	r25, r25
    1b84:	a9 f0       	breq	.+42     	; 0x1bb0 <__floatsisf+0x40>
    1b86:	f9 2f       	mov	r31, r25
    1b88:	96 e9       	ldi	r25, 0x96	; 150
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	93 95       	inc	r25
    1b8e:	f6 95       	lsr	r31
    1b90:	87 95       	ror	r24
    1b92:	77 95       	ror	r23
    1b94:	67 95       	ror	r22
    1b96:	b7 95       	ror	r27
    1b98:	f1 11       	cpse	r31, r1
    1b9a:	f8 cf       	rjmp	.-16     	; 0x1b8c <__floatsisf+0x1c>
    1b9c:	fa f4       	brpl	.+62     	; 0x1bdc <__floatsisf+0x6c>
    1b9e:	bb 0f       	add	r27, r27
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <__floatsisf+0x36>
    1ba2:	60 ff       	sbrs	r22, 0
    1ba4:	1b c0       	rjmp	.+54     	; 0x1bdc <__floatsisf+0x6c>
    1ba6:	6f 5f       	subi	r22, 0xFF	; 255
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	16 c0       	rjmp	.+44     	; 0x1bdc <__floatsisf+0x6c>
    1bb0:	88 23       	and	r24, r24
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <__floatsisf+0x48>
    1bb4:	96 e9       	ldi	r25, 0x96	; 150
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <__floatsisf+0x6a>
    1bb8:	77 23       	and	r23, r23
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <__floatsisf+0x54>
    1bbc:	9e e8       	ldi	r25, 0x8E	; 142
    1bbe:	87 2f       	mov	r24, r23
    1bc0:	76 2f       	mov	r23, r22
    1bc2:	05 c0       	rjmp	.+10     	; 0x1bce <__floatsisf+0x5e>
    1bc4:	66 23       	and	r22, r22
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <__floatsisf+0x74>
    1bc8:	96 e8       	ldi	r25, 0x86	; 134
    1bca:	86 2f       	mov	r24, r22
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	2a f0       	brmi	.+10     	; 0x1bdc <__floatsisf+0x6c>
    1bd2:	9a 95       	dec	r25
    1bd4:	66 0f       	add	r22, r22
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	88 1f       	adc	r24, r24
    1bda:	da f7       	brpl	.-10     	; 0x1bd2 <__floatsisf+0x62>
    1bdc:	88 0f       	add	r24, r24
    1bde:	96 95       	lsr	r25
    1be0:	87 95       	ror	r24
    1be2:	97 f9       	bld	r25, 7
    1be4:	08 95       	ret

00001be6 <__fp_cmp>:
    1be6:	99 0f       	add	r25, r25
    1be8:	00 08       	sbc	r0, r0
    1bea:	55 0f       	add	r21, r21
    1bec:	aa 0b       	sbc	r26, r26
    1bee:	e0 e8       	ldi	r30, 0x80	; 128
    1bf0:	fe ef       	ldi	r31, 0xFE	; 254
    1bf2:	16 16       	cp	r1, r22
    1bf4:	17 06       	cpc	r1, r23
    1bf6:	e8 07       	cpc	r30, r24
    1bf8:	f9 07       	cpc	r31, r25
    1bfa:	c0 f0       	brcs	.+48     	; 0x1c2c <__fp_cmp+0x46>
    1bfc:	12 16       	cp	r1, r18
    1bfe:	13 06       	cpc	r1, r19
    1c00:	e4 07       	cpc	r30, r20
    1c02:	f5 07       	cpc	r31, r21
    1c04:	98 f0       	brcs	.+38     	; 0x1c2c <__fp_cmp+0x46>
    1c06:	62 1b       	sub	r22, r18
    1c08:	73 0b       	sbc	r23, r19
    1c0a:	84 0b       	sbc	r24, r20
    1c0c:	95 0b       	sbc	r25, r21
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <__fp_cmp+0x38>
    1c10:	0a 26       	eor	r0, r26
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <__fp_cmp+0x46>
    1c14:	23 2b       	or	r18, r19
    1c16:	24 2b       	or	r18, r20
    1c18:	25 2b       	or	r18, r21
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <__fp_cmp+0x3e>
    1c1c:	08 95       	ret
    1c1e:	0a 26       	eor	r0, r26
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <__fp_cmp+0x3e>
    1c22:	a1 40       	sbci	r26, 0x01	; 1
    1c24:	a6 95       	lsr	r26
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	81 1d       	adc	r24, r1
    1c2a:	81 1d       	adc	r24, r1
    1c2c:	08 95       	ret

00001c2e <__fp_inf>:
    1c2e:	97 f9       	bld	r25, 7
    1c30:	9f 67       	ori	r25, 0x7F	; 127
    1c32:	80 e8       	ldi	r24, 0x80	; 128
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	08 95       	ret

00001c3a <__fp_nan>:
    1c3a:	9f ef       	ldi	r25, 0xFF	; 255
    1c3c:	80 ec       	ldi	r24, 0xC0	; 192
    1c3e:	08 95       	ret

00001c40 <__fp_pscA>:
    1c40:	00 24       	eor	r0, r0
    1c42:	0a 94       	dec	r0
    1c44:	16 16       	cp	r1, r22
    1c46:	17 06       	cpc	r1, r23
    1c48:	18 06       	cpc	r1, r24
    1c4a:	09 06       	cpc	r0, r25
    1c4c:	08 95       	ret

00001c4e <__fp_pscB>:
    1c4e:	00 24       	eor	r0, r0
    1c50:	0a 94       	dec	r0
    1c52:	12 16       	cp	r1, r18
    1c54:	13 06       	cpc	r1, r19
    1c56:	14 06       	cpc	r1, r20
    1c58:	05 06       	cpc	r0, r21
    1c5a:	08 95       	ret

00001c5c <__fp_round>:
    1c5c:	09 2e       	mov	r0, r25
    1c5e:	03 94       	inc	r0
    1c60:	00 0c       	add	r0, r0
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <__fp_round+0xc>
    1c64:	88 23       	and	r24, r24
    1c66:	52 f0       	brmi	.+20     	; 0x1c7c <__fp_round+0x20>
    1c68:	bb 0f       	add	r27, r27
    1c6a:	40 f4       	brcc	.+16     	; 0x1c7c <__fp_round+0x20>
    1c6c:	bf 2b       	or	r27, r31
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <__fp_round+0x18>
    1c70:	60 ff       	sbrs	r22, 0
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <__fp_round+0x20>
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	08 95       	ret

00001c7e <__fp_split3>:
    1c7e:	57 fd       	sbrc	r21, 7
    1c80:	90 58       	subi	r25, 0x80	; 128
    1c82:	44 0f       	add	r20, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	59 f0       	breq	.+22     	; 0x1c9e <__fp_splitA+0x10>
    1c88:	5f 3f       	cpi	r21, 0xFF	; 255
    1c8a:	71 f0       	breq	.+28     	; 0x1ca8 <__fp_splitA+0x1a>
    1c8c:	47 95       	ror	r20

00001c8e <__fp_splitA>:
    1c8e:	88 0f       	add	r24, r24
    1c90:	97 fb       	bst	r25, 7
    1c92:	99 1f       	adc	r25, r25
    1c94:	61 f0       	breq	.+24     	; 0x1cae <__fp_splitA+0x20>
    1c96:	9f 3f       	cpi	r25, 0xFF	; 255
    1c98:	79 f0       	breq	.+30     	; 0x1cb8 <__fp_splitA+0x2a>
    1c9a:	87 95       	ror	r24
    1c9c:	08 95       	ret
    1c9e:	12 16       	cp	r1, r18
    1ca0:	13 06       	cpc	r1, r19
    1ca2:	14 06       	cpc	r1, r20
    1ca4:	55 1f       	adc	r21, r21
    1ca6:	f2 cf       	rjmp	.-28     	; 0x1c8c <__fp_split3+0xe>
    1ca8:	46 95       	lsr	r20
    1caa:	f1 df       	rcall	.-30     	; 0x1c8e <__fp_splitA>
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <__fp_splitA+0x30>
    1cae:	16 16       	cp	r1, r22
    1cb0:	17 06       	cpc	r1, r23
    1cb2:	18 06       	cpc	r1, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	f1 cf       	rjmp	.-30     	; 0x1c9a <__fp_splitA+0xc>
    1cb8:	86 95       	lsr	r24
    1cba:	71 05       	cpc	r23, r1
    1cbc:	61 05       	cpc	r22, r1
    1cbe:	08 94       	sec
    1cc0:	08 95       	ret

00001cc2 <__fp_zero>:
    1cc2:	e8 94       	clt

00001cc4 <__fp_szero>:
    1cc4:	bb 27       	eor	r27, r27
    1cc6:	66 27       	eor	r22, r22
    1cc8:	77 27       	eor	r23, r23
    1cca:	cb 01       	movw	r24, r22
    1ccc:	97 f9       	bld	r25, 7
    1cce:	08 95       	ret

00001cd0 <__gesf2>:
    1cd0:	8a df       	rcall	.-236    	; 0x1be6 <__fp_cmp>
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__gesf2+0x6>
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	08 95       	ret

00001cd8 <__mulsf3>:
    1cd8:	0b d0       	rcall	.+22     	; 0x1cf0 <__mulsf3x>
    1cda:	c0 cf       	rjmp	.-128    	; 0x1c5c <__fp_round>
    1cdc:	b1 df       	rcall	.-158    	; 0x1c40 <__fp_pscA>
    1cde:	28 f0       	brcs	.+10     	; 0x1cea <__mulsf3+0x12>
    1ce0:	b6 df       	rcall	.-148    	; 0x1c4e <__fp_pscB>
    1ce2:	18 f0       	brcs	.+6      	; 0x1cea <__mulsf3+0x12>
    1ce4:	95 23       	and	r25, r21
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <__mulsf3+0x12>
    1ce8:	a2 cf       	rjmp	.-188    	; 0x1c2e <__fp_inf>
    1cea:	a7 cf       	rjmp	.-178    	; 0x1c3a <__fp_nan>
    1cec:	11 24       	eor	r1, r1
    1cee:	ea cf       	rjmp	.-44     	; 0x1cc4 <__fp_szero>

00001cf0 <__mulsf3x>:
    1cf0:	c6 df       	rcall	.-116    	; 0x1c7e <__fp_split3>
    1cf2:	a0 f3       	brcs	.-24     	; 0x1cdc <__mulsf3+0x4>

00001cf4 <__mulsf3_pse>:
    1cf4:	95 9f       	mul	r25, r21
    1cf6:	d1 f3       	breq	.-12     	; 0x1cec <__mulsf3+0x14>
    1cf8:	95 0f       	add	r25, r21
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	55 1f       	adc	r21, r21
    1cfe:	62 9f       	mul	r22, r18
    1d00:	f0 01       	movw	r30, r0
    1d02:	72 9f       	mul	r23, r18
    1d04:	bb 27       	eor	r27, r27
    1d06:	f0 0d       	add	r31, r0
    1d08:	b1 1d       	adc	r27, r1
    1d0a:	63 9f       	mul	r22, r19
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	f0 0d       	add	r31, r0
    1d10:	b1 1d       	adc	r27, r1
    1d12:	aa 1f       	adc	r26, r26
    1d14:	64 9f       	mul	r22, r20
    1d16:	66 27       	eor	r22, r22
    1d18:	b0 0d       	add	r27, r0
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	66 1f       	adc	r22, r22
    1d1e:	82 9f       	mul	r24, r18
    1d20:	22 27       	eor	r18, r18
    1d22:	b0 0d       	add	r27, r0
    1d24:	a1 1d       	adc	r26, r1
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 9f       	mul	r23, r19
    1d2a:	b0 0d       	add	r27, r0
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	62 1f       	adc	r22, r18
    1d30:	83 9f       	mul	r24, r19
    1d32:	a0 0d       	add	r26, r0
    1d34:	61 1d       	adc	r22, r1
    1d36:	22 1f       	adc	r18, r18
    1d38:	74 9f       	mul	r23, r20
    1d3a:	33 27       	eor	r19, r19
    1d3c:	a0 0d       	add	r26, r0
    1d3e:	61 1d       	adc	r22, r1
    1d40:	23 1f       	adc	r18, r19
    1d42:	84 9f       	mul	r24, r20
    1d44:	60 0d       	add	r22, r0
    1d46:	21 1d       	adc	r18, r1
    1d48:	82 2f       	mov	r24, r18
    1d4a:	76 2f       	mov	r23, r22
    1d4c:	6a 2f       	mov	r22, r26
    1d4e:	11 24       	eor	r1, r1
    1d50:	9f 57       	subi	r25, 0x7F	; 127
    1d52:	50 40       	sbci	r21, 0x00	; 0
    1d54:	8a f0       	brmi	.+34     	; 0x1d78 <__mulsf3_pse+0x84>
    1d56:	e1 f0       	breq	.+56     	; 0x1d90 <__mulsf3_pse+0x9c>
    1d58:	88 23       	and	r24, r24
    1d5a:	4a f0       	brmi	.+18     	; 0x1d6e <__mulsf3_pse+0x7a>
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	bb 1f       	adc	r27, r27
    1d62:	66 1f       	adc	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	88 1f       	adc	r24, r24
    1d68:	91 50       	subi	r25, 0x01	; 1
    1d6a:	50 40       	sbci	r21, 0x00	; 0
    1d6c:	a9 f7       	brne	.-22     	; 0x1d58 <__mulsf3_pse+0x64>
    1d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d70:	51 05       	cpc	r21, r1
    1d72:	70 f0       	brcs	.+28     	; 0x1d90 <__mulsf3_pse+0x9c>
    1d74:	5c cf       	rjmp	.-328    	; 0x1c2e <__fp_inf>
    1d76:	a6 cf       	rjmp	.-180    	; 0x1cc4 <__fp_szero>
    1d78:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7a:	ec f3       	brlt	.-6      	; 0x1d76 <__mulsf3_pse+0x82>
    1d7c:	98 3e       	cpi	r25, 0xE8	; 232
    1d7e:	dc f3       	brlt	.-10     	; 0x1d76 <__mulsf3_pse+0x82>
    1d80:	86 95       	lsr	r24
    1d82:	77 95       	ror	r23
    1d84:	67 95       	ror	r22
    1d86:	b7 95       	ror	r27
    1d88:	f7 95       	ror	r31
    1d8a:	e7 95       	ror	r30
    1d8c:	9f 5f       	subi	r25, 0xFF	; 255
    1d8e:	c1 f7       	brne	.-16     	; 0x1d80 <__mulsf3_pse+0x8c>
    1d90:	fe 2b       	or	r31, r30
    1d92:	88 0f       	add	r24, r24
    1d94:	91 1d       	adc	r25, r1
    1d96:	96 95       	lsr	r25
    1d98:	87 95       	ror	r24
    1d9a:	97 f9       	bld	r25, 7
    1d9c:	08 95       	ret
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <__mulsf3_pse+0xb0>
    1da0:	0e f4       	brtc	.+2      	; 0x1da4 <__mulsf3_pse+0xb0>
    1da2:	4b cf       	rjmp	.-362    	; 0x1c3a <__fp_nan>
    1da4:	3e c0       	rjmp	.+124    	; 0x1e22 <__fp_mpack>

00001da6 <sqrt>:
    1da6:	73 df       	rcall	.-282    	; 0x1c8e <__fp_splitA>
    1da8:	d0 f3       	brcs	.-12     	; 0x1d9e <__mulsf3_pse+0xaa>
    1daa:	99 23       	and	r25, r25
    1dac:	d9 f3       	breq	.-10     	; 0x1da4 <__mulsf3_pse+0xb0>
    1dae:	ce f3       	brts	.-14     	; 0x1da2 <__mulsf3_pse+0xae>
    1db0:	9f 57       	subi	r25, 0x7F	; 127
    1db2:	55 0b       	sbc	r21, r21
    1db4:	87 ff       	sbrs	r24, 7
    1db6:	43 d0       	rcall	.+134    	; 0x1e3e <__fp_norm2>
    1db8:	00 24       	eor	r0, r0
    1dba:	a0 e6       	ldi	r26, 0x60	; 96
    1dbc:	40 ea       	ldi	r20, 0xA0	; 160
    1dbe:	90 01       	movw	r18, r0
    1dc0:	80 58       	subi	r24, 0x80	; 128
    1dc2:	56 95       	lsr	r21
    1dc4:	97 95       	ror	r25
    1dc6:	28 f4       	brcc	.+10     	; 0x1dd2 <sqrt+0x2c>
    1dc8:	80 5c       	subi	r24, 0xC0	; 192
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <sqrt+0x34>
    1dd2:	26 17       	cp	r18, r22
    1dd4:	37 07       	cpc	r19, r23
    1dd6:	48 07       	cpc	r20, r24
    1dd8:	30 f4       	brcc	.+12     	; 0x1de6 <sqrt+0x40>
    1dda:	62 1b       	sub	r22, r18
    1ddc:	73 0b       	sbc	r23, r19
    1dde:	84 0b       	sbc	r24, r20
    1de0:	20 29       	or	r18, r0
    1de2:	31 29       	or	r19, r1
    1de4:	4a 2b       	or	r20, r26
    1de6:	a6 95       	lsr	r26
    1de8:	17 94       	ror	r1
    1dea:	07 94       	ror	r0
    1dec:	20 25       	eor	r18, r0
    1dee:	31 25       	eor	r19, r1
    1df0:	4a 27       	eor	r20, r26
    1df2:	58 f7       	brcc	.-42     	; 0x1dca <sqrt+0x24>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <sqrt+0x5e>
    1dfc:	26 17       	cp	r18, r22
    1dfe:	37 07       	cpc	r19, r23
    1e00:	48 07       	cpc	r20, r24
    1e02:	30 f4       	brcc	.+12     	; 0x1e10 <sqrt+0x6a>
    1e04:	62 0b       	sbc	r22, r18
    1e06:	73 0b       	sbc	r23, r19
    1e08:	84 0b       	sbc	r24, r20
    1e0a:	20 0d       	add	r18, r0
    1e0c:	31 1d       	adc	r19, r1
    1e0e:	41 1d       	adc	r20, r1
    1e10:	a0 95       	com	r26
    1e12:	81 f7       	brne	.-32     	; 0x1df4 <sqrt+0x4e>
    1e14:	b9 01       	movw	r22, r18
    1e16:	84 2f       	mov	r24, r20
    1e18:	91 58       	subi	r25, 0x81	; 129
    1e1a:	88 0f       	add	r24, r24
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	08 95       	ret

00001e22 <__fp_mpack>:
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	31 f0       	breq	.+12     	; 0x1e32 <__fp_mpack_finite+0xc>

00001e26 <__fp_mpack_finite>:
    1e26:	91 50       	subi	r25, 0x01	; 1
    1e28:	20 f4       	brcc	.+8      	; 0x1e32 <__fp_mpack_finite+0xc>
    1e2a:	87 95       	ror	r24
    1e2c:	77 95       	ror	r23
    1e2e:	67 95       	ror	r22
    1e30:	b7 95       	ror	r27
    1e32:	88 0f       	add	r24, r24
    1e34:	91 1d       	adc	r25, r1
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	97 f9       	bld	r25, 7
    1e3c:	08 95       	ret

00001e3e <__fp_norm2>:
    1e3e:	91 50       	subi	r25, 0x01	; 1
    1e40:	50 40       	sbci	r21, 0x00	; 0
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	d2 f7       	brpl	.-12     	; 0x1e3e <__fp_norm2>
    1e4a:	08 95       	ret

00001e4c <_exit>:
    1e4c:	f8 94       	cli

00001e4e <__stop_program>:
    1e4e:	ff cf       	rjmp	.-2      	; 0x1e4e <__stop_program>
