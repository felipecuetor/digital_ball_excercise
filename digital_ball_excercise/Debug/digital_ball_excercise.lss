
digital_ball_excercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00001c9a  00001d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800098  00800098  00001d66  2**0
                  ALLOC
  3 .debug_aranges 00000168  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000412  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b1  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f0  00000000  00000000  00003591  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001188  00000000  00000000  00003b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00004d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f9  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d2f  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (i = 0; i < 8; i++)
	display[i] = im[i];
}
// ************************** fijar Pixel ***************************************
void set_pixel(uint8_t r, uint8_t c, uint8_t value)
{
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
}
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	32 cb       	rjmp	.-2460   	; 0xfffff678 <__eeprom_end+0xff7ef678>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ea e9       	ldi	r30, 0x9A	; 154
      3a:	fc e1       	ldi	r31, 0x1C	; 28
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	a8 39       	cpi	r26, 0x98	; 152
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	10 e0       	ldi	r17, 0x00	; 0
      4a:	a8 e9       	ldi	r26, 0x98	; 152
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a8 3d       	cpi	r26, 0xD8	; 216
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	19 d1       	rcall	.+562    	; 0x28c <main>
      5a:	1d ce       	rjmp	.-966    	; 0xfffffc96 <__eeprom_end+0xff7efc96>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <update_now>:
};

//--------definición funciones del sistema ---------------------------------

// ********** Funcion enviar por SPI ***************************************
void update_now(int x, int y){
      5e:	9c 01       	movw	r18, r24
	uint8_t empty = 0b00000000;
	now[0] = empty;
      60:	ad e9       	ldi	r26, 0x9D	; 157
      62:	b0 e0       	ldi	r27, 0x00	; 0
      64:	fd 01       	movw	r30, r26
      66:	11 92       	st	Z+, r1
	now[1] = empty;
      68:	10 82       	st	Z, r1
	now[2] = empty;
      6a:	12 96       	adiw	r26, 0x02	; 2
      6c:	1c 92       	st	X, r1
      6e:	12 97       	sbiw	r26, 0x02	; 2
	now[3] = empty;
      70:	13 96       	adiw	r26, 0x03	; 3
      72:	1c 92       	st	X, r1
      74:	13 97       	sbiw	r26, 0x03	; 3
	now[4] = empty;
      76:	14 96       	adiw	r26, 0x04	; 4
      78:	1c 92       	st	X, r1
      7a:	14 97       	sbiw	r26, 0x04	; 4
	now[5] = empty;
      7c:	15 96       	adiw	r26, 0x05	; 5
      7e:	1c 92       	st	X, r1
      80:	15 97       	sbiw	r26, 0x05	; 5
	now[6] = empty;
      82:	16 96       	adiw	r26, 0x06	; 6
      84:	1c 92       	st	X, r1
	now[7] = empty;
	
	row = 0b10000000;
      86:	80 e8       	ldi	r24, 0x80	; 128
      88:	80 93 c9 00 	sts	0x00C9, r24
	rowTime = 0b11111111;
      8c:	8f ef       	ldi	r24, 0xFF	; 255
      8e:	80 93 c8 00 	sts	0x00C8, r24
	if (x==1)
      92:	21 30       	cpi	r18, 0x01	; 1
      94:	31 05       	cpc	r19, r1
      96:	49 f1       	breq	.+82     	; 0xea <update_now+0x8c>
	{
		row = 0b10000000;
	}
	else if (x==2){
      98:	22 30       	cpi	r18, 0x02	; 2
      9a:	31 05       	cpc	r19, r1
      9c:	21 f4       	brne	.+8      	; 0xa6 <update_now+0x48>
		row = 0b01000000;
      9e:	80 e4       	ldi	r24, 0x40	; 64
      a0:	80 93 c9 00 	sts	0x00C9, r24
      a4:	22 c0       	rjmp	.+68     	; 0xea <update_now+0x8c>
	}
	else if (x==3){
      a6:	23 30       	cpi	r18, 0x03	; 3
      a8:	31 05       	cpc	r19, r1
      aa:	21 f4       	brne	.+8      	; 0xb4 <update_now+0x56>
		row = 0b00100000;
      ac:	80 e2       	ldi	r24, 0x20	; 32
      ae:	80 93 c9 00 	sts	0x00C9, r24
      b2:	1b c0       	rjmp	.+54     	; 0xea <update_now+0x8c>
	}
	else if (x==4){
      b4:	24 30       	cpi	r18, 0x04	; 4
      b6:	31 05       	cpc	r19, r1
      b8:	21 f4       	brne	.+8      	; 0xc2 <update_now+0x64>
		row = 0b00010000;
      ba:	80 e1       	ldi	r24, 0x10	; 16
      bc:	80 93 c9 00 	sts	0x00C9, r24
      c0:	14 c0       	rjmp	.+40     	; 0xea <update_now+0x8c>
	}
	else if (x==5){
      c2:	25 30       	cpi	r18, 0x05	; 5
      c4:	31 05       	cpc	r19, r1
      c6:	21 f4       	brne	.+8      	; 0xd0 <update_now+0x72>
		row = 0b00001000;
      c8:	88 e0       	ldi	r24, 0x08	; 8
      ca:	80 93 c9 00 	sts	0x00C9, r24
      ce:	0d c0       	rjmp	.+26     	; 0xea <update_now+0x8c>
	}
	else if (x==6){
      d0:	26 30       	cpi	r18, 0x06	; 6
      d2:	31 05       	cpc	r19, r1
      d4:	21 f4       	brne	.+8      	; 0xde <update_now+0x80>
		row = 0b00000100;
      d6:	84 e0       	ldi	r24, 0x04	; 4
      d8:	80 93 c9 00 	sts	0x00C9, r24
      dc:	06 c0       	rjmp	.+12     	; 0xea <update_now+0x8c>
	}
	else if (x==7){
      de:	27 30       	cpi	r18, 0x07	; 7
      e0:	31 05       	cpc	r19, r1
      e2:	19 f4       	brne	.+6      	; 0xea <update_now+0x8c>
		row = 0b00000010;
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	80 93 c9 00 	sts	0x00C9, r24
	}
	if(time>9000){
      ea:	80 91 9b 00 	lds	r24, 0x009B
      ee:	90 91 9c 00 	lds	r25, 0x009C
      f2:	23 e2       	ldi	r18, 0x23	; 35
      f4:	89 32       	cpi	r24, 0x29	; 41
      f6:	92 07       	cpc	r25, r18
      f8:	1c f0       	brlt	.+6      	; 0x100 <update_now+0xa2>
		rowTime = 0b00000000;
      fa:	10 92 c8 00 	sts	0x00C8, r1
      fe:	3e c0       	rjmp	.+124    	; 0x17c <update_now+0x11e>
	}
	else if(time>8000){
     100:	2f e1       	ldi	r18, 0x1F	; 31
     102:	81 34       	cpi	r24, 0x41	; 65
     104:	92 07       	cpc	r25, r18
     106:	24 f0       	brlt	.+8      	; 0x110 <update_now+0xb2>
		rowTime = 0b10000000;
     108:	80 e8       	ldi	r24, 0x80	; 128
     10a:	80 93 c8 00 	sts	0x00C8, r24
     10e:	36 c0       	rjmp	.+108    	; 0x17c <update_now+0x11e>
	}
	else if(time>7000){
     110:	2b e1       	ldi	r18, 0x1B	; 27
     112:	89 35       	cpi	r24, 0x59	; 89
     114:	92 07       	cpc	r25, r18
     116:	24 f0       	brlt	.+8      	; 0x120 <update_now+0xc2>
		rowTime = 0b11000000;
     118:	80 ec       	ldi	r24, 0xC0	; 192
     11a:	80 93 c8 00 	sts	0x00C8, r24
     11e:	2e c0       	rjmp	.+92     	; 0x17c <update_now+0x11e>
	}
	else if(time>6000){
     120:	27 e1       	ldi	r18, 0x17	; 23
     122:	81 37       	cpi	r24, 0x71	; 113
     124:	92 07       	cpc	r25, r18
     126:	24 f0       	brlt	.+8      	; 0x130 <update_now+0xd2>
		rowTime = 0b11100000;
     128:	80 ee       	ldi	r24, 0xE0	; 224
     12a:	80 93 c8 00 	sts	0x00C8, r24
     12e:	26 c0       	rjmp	.+76     	; 0x17c <update_now+0x11e>
	}
	else if(time>5000){
     130:	23 e1       	ldi	r18, 0x13	; 19
     132:	89 38       	cpi	r24, 0x89	; 137
     134:	92 07       	cpc	r25, r18
     136:	24 f0       	brlt	.+8      	; 0x140 <update_now+0xe2>
		rowTime = 0b11110000;
     138:	80 ef       	ldi	r24, 0xF0	; 240
     13a:	80 93 c8 00 	sts	0x00C8, r24
     13e:	1e c0       	rjmp	.+60     	; 0x17c <update_now+0x11e>
	}
	else if(time>4000){
     140:	2f e0       	ldi	r18, 0x0F	; 15
     142:	81 3a       	cpi	r24, 0xA1	; 161
     144:	92 07       	cpc	r25, r18
     146:	24 f0       	brlt	.+8      	; 0x150 <update_now+0xf2>
		rowTime = 0b11111000;
     148:	88 ef       	ldi	r24, 0xF8	; 248
     14a:	80 93 c8 00 	sts	0x00C8, r24
     14e:	16 c0       	rjmp	.+44     	; 0x17c <update_now+0x11e>
	}
	else if(time>3000){
     150:	2b e0       	ldi	r18, 0x0B	; 11
     152:	89 3b       	cpi	r24, 0xB9	; 185
     154:	92 07       	cpc	r25, r18
     156:	24 f0       	brlt	.+8      	; 0x160 <update_now+0x102>
		rowTime = 0b11111100;
     158:	8c ef       	ldi	r24, 0xFC	; 252
     15a:	80 93 c8 00 	sts	0x00C8, r24
     15e:	0e c0       	rjmp	.+28     	; 0x17c <update_now+0x11e>
	}
	else if(time>2000){
     160:	27 e0       	ldi	r18, 0x07	; 7
     162:	81 3d       	cpi	r24, 0xD1	; 209
     164:	92 07       	cpc	r25, r18
     166:	24 f0       	brlt	.+8      	; 0x170 <update_now+0x112>
		rowTime = 0b11111110;
     168:	8e ef       	ldi	r24, 0xFE	; 254
     16a:	80 93 c8 00 	sts	0x00C8, r24
     16e:	06 c0       	rjmp	.+12     	; 0x17c <update_now+0x11e>
	}
	else if(time>1000){
     170:	89 5e       	subi	r24, 0xE9	; 233
     172:	93 40       	sbci	r25, 0x03	; 3
     174:	1c f0       	brlt	.+6      	; 0x17c <update_now+0x11e>
		rowTime = 0b11111111;
     176:	8f ef       	ldi	r24, 0xFF	; 255
     178:	80 93 c8 00 	sts	0x00C8, r24
	}

	now[y-1] = row;
     17c:	ad e9       	ldi	r26, 0x9D	; 157
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	fd 01       	movw	r30, r26
     182:	e6 0f       	add	r30, r22
     184:	f7 1f       	adc	r31, r23
     186:	31 97       	sbiw	r30, 0x01	; 1
     188:	80 91 c9 00 	lds	r24, 0x00C9
     18c:	80 83       	st	Z, r24
	now[7] = rowTime;
     18e:	80 91 c8 00 	lds	r24, 0x00C8
     192:	17 96       	adiw	r26, 0x07	; 7
     194:	8c 93       	st	X, r24
}
     196:	08 95       	ret

00000198 <spi_send>:

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
     198:	28 2f       	mov	r18, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
	{
		CLK_LOW();
     19c:	e2 e3       	ldi	r30, 0x32	; 50
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	8f 7d       	andi	r24, 0xDF	; 223
     1a4:	80 83       	st	Z, r24
		if (data & 0x80)
     1a6:	22 23       	and	r18, r18
     1a8:	24 f4       	brge	.+8      	; 0x1b2 <spi_send+0x1a>
			DATA_HIGH();
     1aa:	80 81       	ld	r24, Z
     1ac:	88 60       	ori	r24, 0x08	; 8
     1ae:	80 83       	st	Z, r24
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <spi_send+0x20>
		else
			DATA_LOW();
     1b2:	80 81       	ld	r24, Z
     1b4:	87 7f       	andi	r24, 0xF7	; 247
     1b6:	80 83       	st	Z, r24
			CLK_HIGH();
     1b8:	80 81       	ld	r24, Z
     1ba:	80 62       	ori	r24, 0x20	; 32
     1bc:	80 83       	st	Z, r24
}

void spi_send(uint8_t data) // se especifica el tipo de variable que va a entrar a la funcion y como se llamara dentro de ella
{
	uint8_t i;  // declaracion de variable local
	for (i = 0; i < 8; i++, data <<= 1)  // Realiza el barrido de las 8 posiciones del vector data
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     1c0:	98 30       	cpi	r25, 0x08	; 8
     1c2:	11 f0       	breq	.+4      	; 0x1c8 <spi_send+0x30>
     1c4:	22 0f       	add	r18, r18
     1c6:	ec cf       	rjmp	.-40     	; 0x1a0 <spi_send+0x8>
     1c8:	08 95       	ret

000001ca <max7219_writec>:
	}
	
}
// ********** Escribir en la matriz ***************************************
void max7219_writec(uint8_t high_byte, uint8_t low_byte)
{
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	f6 2e       	mov	r15, r22
	CS_LOW();
     1d2:	02 e3       	ldi	r16, 0x32	; 50
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	f8 01       	movw	r30, r16
     1d8:	90 81       	ld	r25, Z
     1da:	9f 7e       	andi	r25, 0xEF	; 239
     1dc:	90 83       	st	Z, r25
	spi_send(high_byte);
     1de:	dc df       	rcall	.-72     	; 0x198 <spi_send>
	spi_send(low_byte);
     1e0:	8f 2d       	mov	r24, r15
     1e2:	da df       	rcall	.-76     	; 0x198 <spi_send>
	CS_HIGH();
     1e4:	f8 01       	movw	r30, r16
     1e6:	80 81       	ld	r24, Z
     1e8:	80 61       	ori	r24, 0x10	; 16
     1ea:	80 83       	st	Z, r24
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	08 95       	ret

000001f4 <max7219_clear>:
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
     1f4:	1f 93       	push	r17
     1f6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, 0);
     1f8:	1f 5f       	subi	r17, 0xFF	; 255
     1fa:	81 2f       	mov	r24, r17
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	e5 df       	rcall	.-54     	; 0x1ca <max7219_writec>
// ********** Limpiar la matriz *******************************************

void max7219_clear(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     200:	18 30       	cpi	r17, 0x08	; 8
     202:	d1 f7       	brne	.-12     	; 0x1f8 <max7219_clear+0x4>
	{
		max7219_writec(i+1, 0);
	}
}
     204:	1f 91       	pop	r17
     206:	08 95       	ret

00000208 <max7219_init>:
// ********** Inicializar la matriz ***************************************
void max7219_init(void)
{
	INIT_PORT();
     208:	e1 e3       	ldi	r30, 0x31	; 49
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	88 63       	ori	r24, 0x38	; 56
     210:	80 83       	st	Z, r24
	// Decode mode: none
	max7219_writec(0x04, 0);
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	d9 df       	rcall	.-78     	; 0x1ca <max7219_writec>
	// Intensity: 3 (0-15)
	max7219_writec(0x0A, 1);
     218:	8a e0       	ldi	r24, 0x0A	; 10
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	d6 df       	rcall	.-84     	; 0x1ca <max7219_writec>
	// Scan limit: All "digits" (rows) on
	max7219_writec(0x0B, 7);
     21e:	8b e0       	ldi	r24, 0x0B	; 11
     220:	67 e0       	ldi	r22, 0x07	; 7
     222:	d3 df       	rcall	.-90     	; 0x1ca <max7219_writec>
	// Shutdown register: Display on
	max7219_writec(0x0C, 1);
     224:	8c e0       	ldi	r24, 0x0C	; 12
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	d0 df       	rcall	.-96     	; 0x1ca <max7219_writec>
	// Display test: off
	max7219_writec(0x0F, 0);
     22a:	8f e0       	ldi	r24, 0x0F	; 15
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	cd df       	rcall	.-102    	; 0x1ca <max7219_writec>
	max7219_clear();
     230:	e1 df       	rcall	.-62     	; 0x1f4 <max7219_clear>
}
     232:	08 95       	ret

00000234 <update_display>:
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	c0 e0       	ldi	r28, 0x00	; 0
     23e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	{
		max7219_writec(i+1, display[i]);
     240:	00 ec       	ldi	r16, 0xC0	; 192
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	f8 01       	movw	r30, r16
     246:	ec 0f       	add	r30, r28
     248:	fd 1f       	adc	r31, r29
     24a:	9e 01       	movw	r18, r28
     24c:	2f 5f       	subi	r18, 0xFF	; 255
     24e:	82 2f       	mov	r24, r18
     250:	60 81       	ld	r22, Z
     252:	bb df       	rcall	.-138    	; 0x1ca <max7219_writec>
     254:	21 96       	adiw	r28, 0x01	; 1
// ********** Actualizar la pantalla ***************************************
uint8_t display[8];
void update_display(void)
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     256:	c8 30       	cpi	r28, 0x08	; 8
     258:	d1 05       	cpc	r29, r1
     25a:	a1 f7       	brne	.-24     	; 0x244 <update_display+0x10>
	{
		max7219_writec(i+1, display[i]);
	}
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	08 95       	ret

00000266 <image>:
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
     266:	bc 01       	movw	r22, r24
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++)
	display[i] = im[i];
     26c:	40 ec       	ldi	r20, 0xC0	; 192
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	da 01       	movw	r26, r20
     272:	a2 0f       	add	r26, r18
     274:	b3 1f       	adc	r27, r19
     276:	fb 01       	movw	r30, r22
     278:	e2 0f       	add	r30, r18
     27a:	f3 1f       	adc	r31, r19
     27c:	80 81       	ld	r24, Z
     27e:	8c 93       	st	X, r24
     280:	2f 5f       	subi	r18, 0xFF	; 255
     282:	3f 4f       	sbci	r19, 0xFF	; 255
// ************************** Imagen ***************************************

void image(const uint8_t im[8])
{
	uint8_t i;
	for (i = 0; i < 8; i++)
     284:	28 30       	cpi	r18, 0x08	; 8
     286:	31 05       	cpc	r19, r1
     288:	99 f7       	brne	.-26     	; 0x270 <image+0xa>
	display[i] = im[i];
}
     28a:	08 95       	ret

0000028c <main>:
}


// ------------ Inicio del programa ----------------------------------------
int main(void)
{
     28c:	2f 92       	push	r2
     28e:	3f 92       	push	r3
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	df 93       	push	r29
     2ae:	cf 93       	push	r28
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	a4 97       	sbiw	r28, 0x24	; 36
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
		DDRB = 0x01;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	87 bb       	out	0x17, r24	; 23
		int16_t ax = 0;
     2c4:	1a 82       	std	Y+2, r1	; 0x02
     2c6:	19 82       	std	Y+1, r1	; 0x01
		int16_t ay = 0;
     2c8:	1c 82       	std	Y+4, r1	; 0x04
     2ca:	1b 82       	std	Y+3, r1	; 0x03
		int16_t az = 0;
     2cc:	1e 82       	std	Y+6, r1	; 0x06
     2ce:	1d 82       	std	Y+5, r1	; 0x05
		int16_t gx = 0;
     2d0:	18 86       	std	Y+8, r1	; 0x08
     2d2:	1f 82       	std	Y+7, r1	; 0x07
		int16_t gy = 0;
     2d4:	1a 86       	std	Y+10, r1	; 0x0a
     2d6:	19 86       	std	Y+9, r1	; 0x09
		int16_t gz = 0;
     2d8:	1c 86       	std	Y+12, r1	; 0x0c
     2da:	1b 86       	std	Y+11, r1	; 0x0b
		double axg = 0;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8d 87       	std	Y+13, r24	; 0x0d
     2e6:	9e 87       	std	Y+14, r25	; 0x0e
     2e8:	af 87       	std	Y+15, r26	; 0x0f
     2ea:	b8 8b       	std	Y+16, r27	; 0x10
		double ayg = 0;
     2ec:	89 8b       	std	Y+17, r24	; 0x11
     2ee:	9a 8b       	std	Y+18, r25	; 0x12
     2f0:	ab 8b       	std	Y+19, r26	; 0x13
     2f2:	bc 8b       	std	Y+20, r27	; 0x14
		double azg = 0;
     2f4:	8d 8b       	std	Y+21, r24	; 0x15
     2f6:	9e 8b       	std	Y+22, r25	; 0x16
     2f8:	af 8b       	std	Y+23, r26	; 0x17
     2fa:	b8 8f       	std	Y+24, r27	; 0x18
		double gxds = 0;
     2fc:	89 8f       	std	Y+25, r24	; 0x19
     2fe:	9a 8f       	std	Y+26, r25	; 0x1a
     300:	ab 8f       	std	Y+27, r26	; 0x1b
     302:	bc 8f       	std	Y+28, r27	; 0x1c
		double gyds = 0;
     304:	8d 8f       	std	Y+29, r24	; 0x1d
     306:	9e 8f       	std	Y+30, r25	; 0x1e
     308:	af 8f       	std	Y+31, r26	; 0x1f
     30a:	b8 a3       	std	Y+32, r27	; 0x20
		double gzds = 0;
     30c:	89 a3       	std	Y+33, r24	; 0x21
     30e:	9a a3       	std	Y+34, r25	; 0x22
     310:	ab a3       	std	Y+35, r26	; 0x23
     312:	bc a3       	std	Y+36, r27	; 0x24

		//init interrupt
		sei();
     314:	78 94       	sei
		//init mpu6050
		mpu6050_init();
     316:	59 d8       	rcall	.-3918   	; 0xfffff3ca <__eeprom_end+0xff7ef3ca>
     318:	84 ef       	ldi	r24, 0xF4	; 244
     31a:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31c:	20 e9       	ldi	r18, 0x90	; 144
     31e:	31 e0       	ldi	r19, 0x01	; 1
     320:	f9 01       	movw	r30, r18
     322:	31 97       	sbiw	r30, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <main+0x96>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     328:	d9 f7       	brne	.-10     	; 0x320 <main+0x94>
		_delay_ms(50);
	
	max7219_init(); // llamado de la funcion "max7219_init"
     32a:	6e df       	rcall	.-292    	; 0x208 <max7219_init>
	update_now(x,y);
     32c:	60 91 62 00 	lds	r22, 0x0062
     330:	70 91 63 00 	lds	r23, 0x0063
     334:	80 91 60 00 	lds	r24, 0x0060
     338:	90 91 61 00 	lds	r25, 0x0061
     33c:	90 de       	rcall	.-736    	; 0x5e <update_now>
	image(start);  // carga la imagen a visualizar
     33e:	88 e6       	ldi	r24, 0x68	; 104
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	91 df       	rcall	.-222    	; 0x266 <image>
	update_display();
     344:	77 df       	rcall	.-274    	; 0x234 <update_display>
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     346:	0f 2e       	mov	r0, r31
     348:	f0 e3       	ldi	r31, 0x30	; 48
     34a:	cf 2e       	mov	r12, r31
     34c:	dd 24       	eor	r13, r13
     34e:	f0 2d       	mov	r31, r0
     350:	aa 24       	eor	r10, r10
     352:	bb 24       	eor	r11, r11
     354:	a3 94       	inc	r10
			update_display();
			button7_down = 0;
		}
		
		
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     356:	3e 01       	movw	r6, r28
     358:	08 94       	sec
     35a:	61 1c       	adc	r6, r1
     35c:	71 1c       	adc	r7, r1
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     35e:	0f 2e       	mov	r0, r31
     360:	fd e0       	ldi	r31, 0x0D	; 13
     362:	4f 2e       	mov	r4, r31
     364:	55 24       	eor	r5, r5
     366:	f0 2d       	mov	r31, r0
     368:	4c 0e       	add	r4, r28
     36a:	5d 1e       	adc	r5, r29
     36c:	0f 2e       	mov	r0, r31
     36e:	f1 e1       	ldi	r31, 0x11	; 17
     370:	2f 2e       	mov	r2, r31
     372:	33 24       	eor	r3, r3
     374:	f0 2d       	mov	r31, r0
     376:	2c 0e       	add	r2, r28
     378:	3d 1e       	adc	r3, r29
     37a:	0f 2e       	mov	r0, r31
     37c:	f0 e9       	ldi	r31, 0x90	; 144
     37e:	8f 2e       	mov	r8, r31
     380:	f1 e0       	ldi	r31, 0x01	; 1
     382:	9f 2e       	mov	r9, r31
     384:	f0 2d       	mov	r31, r0
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON6_MASK) != 0;
     386:	f6 01       	movw	r30, r12
     388:	80 81       	ld	r24, Z
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	00 24       	eor	r0, r0
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	00 1c       	adc	r0, r0
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	00 1c       	adc	r0, r0
     39a:	89 2f       	mov	r24, r25
     39c:	90 2d       	mov	r25, r0
     39e:	8a 25       	eor	r24, r10
     3a0:	9b 25       	eor	r25, r11
     3a2:	98 2f       	mov	r25, r24
     3a4:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     3a6:	80 91 90 00 	lds	r24, 0x0090
     3aa:	98 17       	cp	r25, r24
     3ac:	89 f0       	breq	.+34     	; 0x3d0 <main+0x144>
		// Button state is about to be changed, increase counter
		count++;
     3ae:	80 91 a5 00 	lds	r24, 0x00A5
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	80 93 a5 00 	sts	0x00A5, r24
		if (count >= 4) {
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	60 f0       	brcs	.+24     	; 0x3d4 <main+0x148>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     3bc:	90 93 90 00 	sts	0x0090, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     3c0:	99 23       	and	r25, r25
     3c2:	19 f0       	breq	.+6      	; 0x3ca <main+0x13e>
				button6_down = 1;
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	f0 93 98 00 	sts	0x0098, r31
			}
			count = 0;
     3ca:	10 92 a5 00 	sts	0x00A5, r1
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <main+0x148>
		}
		} else {
		// Reset counter
		count = 0;
     3d0:	10 92 a5 00 	sts	0x00A5, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON7_MASK) != 0;
     3d4:	f6 01       	movw	r30, r12
     3d6:	80 81       	ld	r24, Z
     3d8:	88 23       	and	r24, r24
     3da:	80 95       	com	r24
     3dc:	98 2f       	mov	r25, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	99 27       	eor	r25, r25
     3e2:	99 1f       	adc	r25, r25
	if (current_state != button_state) {
     3e4:	80 91 91 00 	lds	r24, 0x0091
     3e8:	98 17       	cp	r25, r24
     3ea:	89 f0       	breq	.+34     	; 0x40e <main+0x182>
		// Button state is about to be changed, increase counter
		count++;
     3ec:	80 91 a6 00 	lds	r24, 0x00A6
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 a6 00 	sts	0x00A6, r24
		if (count >= 4) {
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	60 f0       	brcs	.+24     	; 0x412 <main+0x186>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     3fa:	90 93 91 00 	sts	0x0091, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     3fe:	99 23       	and	r25, r25
     400:	19 f0       	breq	.+6      	; 0x408 <main+0x17c>
				button7_down = 1;
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	f0 93 99 00 	sts	0x0099, r31
			}
			count = 0;
     408:	10 92 a6 00 	sts	0x00A6, r1
     40c:	02 c0       	rjmp	.+4      	; 0x412 <main+0x186>
		}
		} else {
		// Reset counter
		count = 0;
     40e:	10 92 a6 00 	sts	0x00A6, r1
	// Counter for number of equal states
	static uint8_t count = 0;
	// Keeps track of current (debounced) state
	static uint8_t button_state = 1;
	// Check if button is high or low for the moment
	uint8_t current_state = (~BUTTON_PIN & BUTTON2_MASK) != 0;
     412:	f6 01       	movw	r30, r12
     414:	80 81       	ld	r24, Z
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	96 95       	lsr	r25
     41a:	87 95       	ror	r24
     41c:	96 95       	lsr	r25
     41e:	87 95       	ror	r24
     420:	8a 25       	eor	r24, r10
     422:	9b 25       	eor	r25, r11
     424:	98 2f       	mov	r25, r24
     426:	91 70       	andi	r25, 0x01	; 1
	if (current_state != button_state) {
     428:	80 91 92 00 	lds	r24, 0x0092
     42c:	98 17       	cp	r25, r24
     42e:	89 f0       	breq	.+34     	; 0x452 <main+0x1c6>
		// Button state is about to be changed, increase counter
		count++;
     430:	80 91 a7 00 	lds	r24, 0x00A7
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 a7 00 	sts	0x00A7, r24
		if (count >= 100) {
     43a:	84 36       	cpi	r24, 0x64	; 100
     43c:	60 f0       	brcs	.+24     	; 0x456 <main+0x1ca>
			// The button have not bounced for four checks, change state
			button_state = current_state;
     43e:	90 93 92 00 	sts	0x0092, r25
			// If the button was pressed (not released), tell main so
			if (current_state != 0) {
     442:	99 23       	and	r25, r25
     444:	19 f0       	breq	.+6      	; 0x44c <main+0x1c0>
				button2_down = 1;
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	f0 93 9a 00 	sts	0x009A, r31
			}
			count = 0;
     44c:	10 92 a7 00 	sts	0x00A7, r1
     450:	02 c0       	rjmp	.+4      	; 0x456 <main+0x1ca>
		}
		} else {
		// Reset counter
		count = 0;
     452:	10 92 a7 00 	sts	0x00A7, r1
	while(1)  // loop infinito
	{
		debouncebtn6();
		debouncebtn7();
		debouncebtn2();
		if(button6_down)
     456:	80 91 98 00 	lds	r24, 0x0098
     45a:	88 23       	and	r24, r24
     45c:	49 f1       	breq	.+82     	; 0x4b0 <__stack+0x51>
		{
			if(state==0){
     45e:	80 91 66 00 	lds	r24, 0x0066
     462:	90 91 67 00 	lds	r25, 0x0067
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	41 f4       	brne	.+16     	; 0x47a <__stack+0x1b>
				image(start);  // carga la imagen a visualizar
     46a:	88 e6       	ldi	r24, 0x68	; 104
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fb de       	rcall	.-522    	; 0x266 <image>
				state = 1;
     470:	b0 92 67 00 	sts	0x0067, r11
     474:	a0 92 66 00 	sts	0x0066, r10
     478:	18 c0       	rjmp	.+48     	; 0x4aa <__stack+0x4b>
			}
			else if(state == 1){
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	91 05       	cpc	r25, r1
     47e:	51 f4       	brne	.+20     	; 0x494 <__stack+0x35>
				image(menuLevel1);
     480:	80 e7       	ldi	r24, 0x70	; 112
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	f0 de       	rcall	.-544    	; 0x266 <image>
				state = 2;
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	90 93 67 00 	sts	0x0067, r25
     48e:	80 93 66 00 	sts	0x0066, r24
     492:	0b c0       	rjmp	.+22     	; 0x4aa <__stack+0x4b>
			}
			else if(state == 2){
     494:	02 97       	sbiw	r24, 0x02	; 2
     496:	49 f4       	brne	.+18     	; 0x4aa <__stack+0x4b>
				image(now);
     498:	8d e9       	ldi	r24, 0x9D	; 157
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	e4 de       	rcall	.-568    	; 0x266 <image>
				state = 3;
     49e:	e3 e0       	ldi	r30, 0x03	; 3
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	f0 93 67 00 	sts	0x0067, r31
     4a6:	e0 93 66 00 	sts	0x0066, r30
			}
			update_display();
     4aa:	c4 de       	rcall	.-632    	; 0x234 <update_display>
			button6_down = 0;
     4ac:	10 92 98 00 	sts	0x0098, r1
		}
		
		if(button7_down)
     4b0:	80 91 99 00 	lds	r24, 0x0099
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__stack+0x5b>
     4b8:	42 c0       	rjmp	.+132    	; 0x53e <__stack+0xdf>
		{
			if(state!=2){
     4ba:	80 91 66 00 	lds	r24, 0x0066
     4be:	90 91 67 00 	lds	r25, 0x0067
     4c2:	02 97       	sbiw	r24, 0x02	; 2
     4c4:	21 f0       	breq	.+8      	; 0x4ce <__stack+0x6f>
				image(start);
     4c6:	88 e6       	ldi	r24, 0x68	; 104
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	cd de       	rcall	.-614    	; 0x266 <image>
     4cc:	11 c0       	rjmp	.+34     	; 0x4f0 <__stack+0x91>
			}
			else if(menu<4){
     4ce:	80 91 64 00 	lds	r24, 0x0064
     4d2:	90 91 65 00 	lds	r25, 0x0065
     4d6:	84 30       	cpi	r24, 0x04	; 4
     4d8:	91 05       	cpc	r25, r1
     4da:	34 f4       	brge	.+12     	; 0x4e8 <__stack+0x89>
				menu = menu+1;
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 65 00 	sts	0x0065, r25
     4e2:	80 93 64 00 	sts	0x0064, r24
     4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__stack+0x91>
			}
			else{
				menu = 1;
     4e8:	b0 92 65 00 	sts	0x0065, r11
     4ec:	a0 92 64 00 	sts	0x0064, r10
			}
			if(state==1){
     4f0:	80 91 66 00 	lds	r24, 0x0066
     4f4:	90 91 67 00 	lds	r25, 0x0067
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f0       	breq	.+60     	; 0x538 <__stack+0xd9>
			}
			else if(menu==1){image(menuLevel1);}
     4fc:	80 91 64 00 	lds	r24, 0x0064
     500:	90 91 65 00 	lds	r25, 0x0065
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	91 05       	cpc	r25, r1
     508:	21 f4       	brne	.+8      	; 0x512 <__stack+0xb3>
     50a:	80 e7       	ldi	r24, 0x70	; 112
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ab de       	rcall	.-682    	; 0x266 <image>
     510:	13 c0       	rjmp	.+38     	; 0x538 <__stack+0xd9>
			else if(menu==2){image(menuLevel2);}
     512:	82 30       	cpi	r24, 0x02	; 2
     514:	91 05       	cpc	r25, r1
     516:	21 f4       	brne	.+8      	; 0x520 <__stack+0xc1>
     518:	88 e7       	ldi	r24, 0x78	; 120
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a4 de       	rcall	.-696    	; 0x266 <image>
     51e:	0c c0       	rjmp	.+24     	; 0x538 <__stack+0xd9>
			else if(menu==3){image(menuLevel3);}
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	21 f4       	brne	.+8      	; 0x52e <__stack+0xcf>
     526:	80 e8       	ldi	r24, 0x80	; 128
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9d de       	rcall	.-710    	; 0x266 <image>
     52c:	05 c0       	rjmp	.+10     	; 0x538 <__stack+0xd9>
			else if(menu==4){image(menuLevel4);}
     52e:	04 97       	sbiw	r24, 0x04	; 4
     530:	19 f4       	brne	.+6      	; 0x538 <__stack+0xd9>
     532:	88 e8       	ldi	r24, 0x88	; 136
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	97 de       	rcall	.-722    	; 0x266 <image>
			update_display();
     538:	7d de       	rcall	.-774    	; 0x234 <update_display>
			button7_down = 0;
     53a:	10 92 99 00 	sts	0x0099, r1
		}
		
		
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     53e:	c3 01       	movw	r24, r6
     540:	be 01       	movw	r22, r28
     542:	6d 5f       	subi	r22, 0xFD	; 253
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	ae 01       	movw	r20, r28
     548:	4b 5f       	subi	r20, 0xFB	; 251
     54a:	5f 4f       	sbci	r21, 0xFF	; 255
     54c:	9e 01       	movw	r18, r28
     54e:	29 5f       	subi	r18, 0xF9	; 249
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	8e 01       	movw	r16, r28
     554:	07 5f       	subi	r16, 0xF7	; 247
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	0f 2e       	mov	r0, r31
     55a:	fb e0       	ldi	r31, 0x0B	; 11
     55c:	ef 2e       	mov	r14, r31
     55e:	ff 24       	eor	r15, r15
     560:	f0 2d       	mov	r31, r0
     562:	ec 0e       	add	r14, r28
     564:	fd 1e       	adc	r15, r29
     566:	72 d5       	rcall	.+2788   	; 0x104c <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     568:	c2 01       	movw	r24, r4
     56a:	b1 01       	movw	r22, r2
     56c:	ae 01       	movw	r20, r28
     56e:	4b 5e       	subi	r20, 0xEB	; 235
     570:	5f 4f       	sbci	r21, 0xFF	; 255
     572:	9e 01       	movw	r18, r28
     574:	27 5e       	subi	r18, 0xE7	; 231
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	8e 01       	movw	r16, r28
     57a:	03 5e       	subi	r16, 0xE3	; 227
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	0f 2e       	mov	r0, r31
     580:	f1 e2       	ldi	r31, 0x21	; 33
     582:	ef 2e       	mov	r14, r31
     584:	ff 24       	eor	r15, r15
     586:	f0 2d       	mov	r31, r0
     588:	ec 0e       	add	r14, r28
     58a:	fd 1e       	adc	r15, r29
     58c:	d9 d5       	rcall	.+2994   	; 0x1140 <mpu6050_getConvData>
		if(state==3){
     58e:	80 91 66 00 	lds	r24, 0x0066
     592:	90 91 67 00 	lds	r25, 0x0067
     596:	03 97       	sbiw	r24, 0x03	; 3
     598:	09 f0       	breq	.+2      	; 0x59c <__stack+0x13d>
     59a:	f5 ce       	rjmp	.-534    	; 0x386 <main+0xfa>
			if(ayg<-0.3){
     59c:	e9 88       	ldd	r14, Y+17	; 0x11
     59e:	fa 88       	ldd	r15, Y+18	; 0x12
     5a0:	0b 89       	ldd	r16, Y+19	; 0x13
     5a2:	1c 89       	ldd	r17, Y+20	; 0x14
     5a4:	c8 01       	movw	r24, r16
     5a6:	b7 01       	movw	r22, r14
     5a8:	2a e9       	ldi	r18, 0x9A	; 154
     5aa:	39 e9       	ldi	r19, 0x99	; 153
     5ac:	49 e9       	ldi	r20, 0x99	; 153
     5ae:	5e eb       	ldi	r21, 0xBE	; 190
     5b0:	96 d9       	rcall	.-3284   	; 0xfffff8de <__eeprom_end+0xff7ef8de>
     5b2:	88 23       	and	r24, r24
     5b4:	84 f4       	brge	.+32     	; 0x5d6 <__stack+0x177>
				PORTB = 0b00000001;
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	f8 bb       	out	0x18, r31	; 24
				if(y>1){
     5ba:	80 91 62 00 	lds	r24, 0x0062
     5be:	90 91 63 00 	lds	r25, 0x0063
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 05       	cpc	r25, r1
     5c6:	0c f4       	brge	.+2      	; 0x5ca <__stack+0x16b>
     5c8:	53 c0       	rjmp	.+166    	; 0x670 <__stack+0x211>
					y=y-1;
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	90 93 63 00 	sts	0x0063, r25
     5d0:	80 93 62 00 	sts	0x0062, r24
     5d4:	4d c0       	rjmp	.+154    	; 0x670 <__stack+0x211>
				}
			}
			else if(ayg>0.3){
     5d6:	c8 01       	movw	r24, r16
     5d8:	b7 01       	movw	r22, r14
     5da:	2a e9       	ldi	r18, 0x9A	; 154
     5dc:	39 e9       	ldi	r19, 0x99	; 153
     5de:	49 e9       	ldi	r20, 0x99	; 153
     5e0:	5e e3       	ldi	r21, 0x3E	; 62
     5e2:	9b da       	rcall	.-2762   	; 0xfffffb1a <__eeprom_end+0xff7efb1a>
     5e4:	18 16       	cp	r1, r24
     5e6:	7c f4       	brge	.+30     	; 0x606 <__stack+0x1a7>
				PORTB = 0b00000001;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	88 bb       	out	0x18, r24	; 24
				if(y<7){
     5ec:	80 91 62 00 	lds	r24, 0x0062
     5f0:	90 91 63 00 	lds	r25, 0x0063
     5f4:	87 30       	cpi	r24, 0x07	; 7
     5f6:	91 05       	cpc	r25, r1
     5f8:	dc f5       	brge	.+118    	; 0x670 <__stack+0x211>
					y=y+1;
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	90 93 63 00 	sts	0x0063, r25
     600:	80 93 62 00 	sts	0x0062, r24
     604:	35 c0       	rjmp	.+106    	; 0x670 <__stack+0x211>
				}
			}
			else if(axg<-0.3){
     606:	ed 84       	ldd	r14, Y+13	; 0x0d
     608:	fe 84       	ldd	r15, Y+14	; 0x0e
     60a:	0f 85       	ldd	r16, Y+15	; 0x0f
     60c:	18 89       	ldd	r17, Y+16	; 0x10
     60e:	c8 01       	movw	r24, r16
     610:	b7 01       	movw	r22, r14
     612:	2a e9       	ldi	r18, 0x9A	; 154
     614:	39 e9       	ldi	r19, 0x99	; 153
     616:	49 e9       	ldi	r20, 0x99	; 153
     618:	5e eb       	ldi	r21, 0xBE	; 190
     61a:	61 d9       	rcall	.-3390   	; 0xfffff8de <__eeprom_end+0xff7ef8de>
     61c:	88 23       	and	r24, r24
     61e:	7c f4       	brge	.+30     	; 0x63e <__stack+0x1df>
				PORTB = 0b00000001;
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	98 bb       	out	0x18, r25	; 24
				if(x>1){
     624:	80 91 60 00 	lds	r24, 0x0060
     628:	90 91 61 00 	lds	r25, 0x0061
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	91 05       	cpc	r25, r1
     630:	fc f0       	brlt	.+62     	; 0x670 <__stack+0x211>
					x=x-1;
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	90 93 61 00 	sts	0x0061, r25
     638:	80 93 60 00 	sts	0x0060, r24
     63c:	19 c0       	rjmp	.+50     	; 0x670 <__stack+0x211>
				}
			}
			else if(axg>0.3){
     63e:	c8 01       	movw	r24, r16
     640:	b7 01       	movw	r22, r14
     642:	2a e9       	ldi	r18, 0x9A	; 154
     644:	39 e9       	ldi	r19, 0x99	; 153
     646:	49 e9       	ldi	r20, 0x99	; 153
     648:	5e e3       	ldi	r21, 0x3E	; 62
     64a:	67 da       	rcall	.-2866   	; 0xfffffb1a <__eeprom_end+0xff7efb1a>
     64c:	18 16       	cp	r1, r24
     64e:	7c f4       	brge	.+30     	; 0x66e <__stack+0x20f>
				PORTB = 0b00000001;
     650:	e1 e0       	ldi	r30, 0x01	; 1
     652:	e8 bb       	out	0x18, r30	; 24
				if(x<8){
     654:	80 91 60 00 	lds	r24, 0x0060
     658:	90 91 61 00 	lds	r25, 0x0061
     65c:	88 30       	cpi	r24, 0x08	; 8
     65e:	91 05       	cpc	r25, r1
     660:	3c f4       	brge	.+14     	; 0x670 <__stack+0x211>
					x=x+1;
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	90 93 61 00 	sts	0x0061, r25
     668:	80 93 60 00 	sts	0x0060, r24
     66c:	01 c0       	rjmp	.+2      	; 0x670 <__stack+0x211>
				}
				
			}
			else{
				PORTB = 0b00000000;
     66e:	18 ba       	out	0x18, r1	; 24
     670:	24 ec       	ldi	r18, 0xC4	; 196
     672:	39 e0       	ldi	r19, 0x09	; 9
     674:	c4 01       	movw	r24, r8
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <__stack+0x217>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67a:	21 50       	subi	r18, 0x01	; 1
     67c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67e:	d1 f7       	brne	.-12     	; 0x674 <__stack+0x215>
			}
			_delay_ms(250);
			time = time + 250;
     680:	80 91 9b 00 	lds	r24, 0x009B
     684:	90 91 9c 00 	lds	r25, 0x009C
     688:	86 50       	subi	r24, 0x06	; 6
     68a:	9f 4f       	sbci	r25, 0xFF	; 255
     68c:	90 93 9c 00 	sts	0x009C, r25
     690:	80 93 9b 00 	sts	0x009B, r24
			update_now(x,y);
     694:	60 91 62 00 	lds	r22, 0x0062
     698:	70 91 63 00 	lds	r23, 0x0063
     69c:	80 91 60 00 	lds	r24, 0x0060
     6a0:	90 91 61 00 	lds	r25, 0x0061
     6a4:	dc dc       	rcall	.-1608   	; 0x5e <update_now>
			image(now);
     6a6:	8d e9       	ldi	r24, 0x9D	; 157
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	dd dd       	rcall	.-1094   	; 0x266 <image>
			update_display();
     6ac:	c3 dd       	rcall	.-1146   	; 0x234 <update_display>
     6ae:	6b ce       	rjmp	.-810    	; 0x386 <main+0xfa>

000006b0 <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     6b0:	2f 92       	push	r2
     6b2:	3f 92       	push	r3
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	cc 54       	subi	r28, 0x4C	; 76
     6da:	d0 40       	sbci	r29, 0x00	; 0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	6d a3       	std	Y+37, r22	; 0x25
     6e8:	7e a3       	std	Y+38, r23	; 0x26
     6ea:	8f a3       	std	Y+39, r24	; 0x27
     6ec:	98 a7       	std	Y+40, r25	; 0x28
     6ee:	29 a7       	std	Y+41, r18	; 0x29
     6f0:	3a a7       	std	Y+42, r19	; 0x2a
     6f2:	4b a7       	std	Y+43, r20	; 0x2b
     6f4:	5c a7       	std	Y+44, r21	; 0x2c
     6f6:	ed a6       	std	Y+45, r14	; 0x2d
     6f8:	fe a6       	std	Y+46, r15	; 0x2e
     6fa:	0f a7       	std	Y+47, r16	; 0x2f
     6fc:	18 ab       	std	Y+48, r17	; 0x30
     6fe:	a5 96       	adiw	r28, 0x25	; 37
     700:	6c ac       	ldd	r6, Y+60	; 0x3c
     702:	7d ac       	ldd	r7, Y+61	; 0x3d
     704:	8e ac       	ldd	r8, Y+62	; 0x3e
     706:	9f ac       	ldd	r9, Y+63	; 0x3f
     708:	a5 97       	sbiw	r28, 0x25	; 37
     70a:	a9 96       	adiw	r28, 0x29	; 41
     70c:	2c ac       	ldd	r2, Y+60	; 0x3c
     70e:	3d ac       	ldd	r3, Y+61	; 0x3d
     710:	4e ac       	ldd	r4, Y+62	; 0x3e
     712:	5f ac       	ldd	r5, Y+63	; 0x3f
     714:	a9 97       	sbiw	r28, 0x29	; 41
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     716:	c6 01       	movw	r24, r12
     718:	b5 01       	movw	r22, r10
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	dd d8       	rcall	.-3654   	; 0xfffff8de <__eeprom_end+0xff7ef8de>
     724:	88 23       	and	r24, r24
     726:	99 f4       	brne	.+38     	; 0x74e <mpu6050_mahonyUpdate+0x9e>
     728:	c4 01       	movw	r24, r8
     72a:	b3 01       	movw	r22, r6
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	d4 d8       	rcall	.-3672   	; 0xfffff8de <__eeprom_end+0xff7ef8de>
     736:	88 23       	and	r24, r24
     738:	51 f4       	brne	.+20     	; 0x74e <mpu6050_mahonyUpdate+0x9e>
     73a:	c2 01       	movw	r24, r4
     73c:	b1 01       	movw	r22, r2
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	cb d8       	rcall	.-3690   	; 0xfffff8de <__eeprom_end+0xff7ef8de>
     748:	88 23       	and	r24, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <mpu6050_mahonyUpdate+0x9e>
     74c:	db c1       	rjmp	.+950    	; 0xb04 <mpu6050_mahonyUpdate+0x454>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     74e:	c6 01       	movw	r24, r12
     750:	b5 01       	movw	r22, r10
     752:	a6 01       	movw	r20, r12
     754:	95 01       	movw	r18, r10
     756:	e5 d9       	rcall	.-3126   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     758:	7b 01       	movw	r14, r22
     75a:	8c 01       	movw	r16, r24
     75c:	c4 01       	movw	r24, r8
     75e:	b3 01       	movw	r22, r6
     760:	a4 01       	movw	r20, r8
     762:	93 01       	movw	r18, r6
     764:	de d9       	rcall	.-3140   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	c8 01       	movw	r24, r16
     76c:	b7 01       	movw	r22, r14
     76e:	53 d8       	rcall	.-3930   	; 0xfffff816 <__eeprom_end+0xff7ef816>
     770:	7b 01       	movw	r14, r22
     772:	8c 01       	movw	r16, r24
     774:	c2 01       	movw	r24, r4
     776:	b1 01       	movw	r22, r2
     778:	a2 01       	movw	r20, r4
     77a:	91 01       	movw	r18, r2
     77c:	d2 d9       	rcall	.-3164   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	c8 01       	movw	r24, r16
     784:	b7 01       	movw	r22, r14
     786:	47 d8       	rcall	.-3954   	; 0xfffff816 <__eeprom_end+0xff7ef816>
     788:	33 da       	rcall	.-2970   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
     78a:	7b 01       	movw	r14, r22
     78c:	8c 01       	movw	r16, r24
		ax /= norm;
     78e:	c6 01       	movw	r24, r12
     790:	b5 01       	movw	r22, r10
     792:	a8 01       	movw	r20, r16
     794:	97 01       	movw	r18, r14
     796:	a7 d8       	rcall	.-3762   	; 0xfffff8e6 <__eeprom_end+0xff7ef8e6>
     798:	69 ab       	std	Y+49, r22	; 0x31
     79a:	7a ab       	std	Y+50, r23	; 0x32
     79c:	8b ab       	std	Y+51, r24	; 0x33
     79e:	9c ab       	std	Y+52, r25	; 0x34
		ay /= norm;
     7a0:	c4 01       	movw	r24, r8
     7a2:	b3 01       	movw	r22, r6
     7a4:	a8 01       	movw	r20, r16
     7a6:	97 01       	movw	r18, r14
     7a8:	9e d8       	rcall	.-3780   	; 0xfffff8e6 <__eeprom_end+0xff7ef8e6>
     7aa:	6d ab       	std	Y+53, r22	; 0x35
     7ac:	7e ab       	std	Y+54, r23	; 0x36
     7ae:	8f ab       	std	Y+55, r24	; 0x37
     7b0:	98 af       	std	Y+56, r25	; 0x38
		az /= norm;
     7b2:	c2 01       	movw	r24, r4
     7b4:	b1 01       	movw	r22, r2
     7b6:	a8 01       	movw	r20, r16
     7b8:	97 01       	movw	r18, r14
     7ba:	95 d8       	rcall	.-3798   	; 0xfffff8e6 <__eeprom_end+0xff7ef8e6>
     7bc:	69 af       	std	Y+57, r22	; 0x39
     7be:	7a af       	std	Y+58, r23	; 0x3a
     7c0:	8b af       	std	Y+59, r24	; 0x3b
     7c2:	9c af       	std	Y+60, r25	; 0x3c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     7c4:	60 91 a8 00 	lds	r22, 0x00A8
     7c8:	70 91 a9 00 	lds	r23, 0x00A9
     7cc:	80 91 aa 00 	lds	r24, 0x00AA
     7d0:	90 91 ab 00 	lds	r25, 0x00AB
     7d4:	20 91 b0 00 	lds	r18, 0x00B0
     7d8:	30 91 b1 00 	lds	r19, 0x00B1
     7dc:	40 91 b2 00 	lds	r20, 0x00B2
     7e0:	50 91 b3 00 	lds	r21, 0x00B3
     7e4:	a0 90 93 00 	lds	r10, 0x0093
     7e8:	b0 90 94 00 	lds	r11, 0x0094
     7ec:	c0 90 95 00 	lds	r12, 0x0095
     7f0:	d0 90 96 00 	lds	r13, 0x0096
     7f4:	60 90 ac 00 	lds	r6, 0x00AC
     7f8:	70 90 ad 00 	lds	r7, 0x00AD
     7fc:	80 90 ae 00 	lds	r8, 0x00AE
     800:	90 90 af 00 	lds	r9, 0x00AF
     804:	8e d9       	rcall	.-3300   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	c6 01       	movw	r24, r12
     80c:	b5 01       	movw	r22, r10
     80e:	a4 01       	movw	r20, r8
     810:	93 01       	movw	r18, r6
     812:	87 d9       	rcall	.-3314   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	c8 01       	movw	r24, r16
     81a:	b7 01       	movw	r22, r14
     81c:	fb d7       	rcall	.+4086   	; 0x1814 <__subsf3>
     81e:	21 96       	adiw	r28, 0x01	; 1
     820:	6c af       	std	Y+60, r22	; 0x3c
     822:	7d af       	std	Y+61, r23	; 0x3d
     824:	8e af       	std	Y+62, r24	; 0x3e
     826:	9f af       	std	Y+63, r25	; 0x3f
     828:	21 97       	sbiw	r28, 0x01	; 1
		halfvy = q0 * q1 + q2 * q3;
     82a:	60 91 93 00 	lds	r22, 0x0093
     82e:	70 91 94 00 	lds	r23, 0x0094
     832:	80 91 95 00 	lds	r24, 0x0095
     836:	90 91 96 00 	lds	r25, 0x0096
     83a:	20 91 a8 00 	lds	r18, 0x00A8
     83e:	30 91 a9 00 	lds	r19, 0x00A9
     842:	40 91 aa 00 	lds	r20, 0x00AA
     846:	50 91 ab 00 	lds	r21, 0x00AB
     84a:	a0 90 ac 00 	lds	r10, 0x00AC
     84e:	b0 90 ad 00 	lds	r11, 0x00AD
     852:	c0 90 ae 00 	lds	r12, 0x00AE
     856:	d0 90 af 00 	lds	r13, 0x00AF
     85a:	60 90 b0 00 	lds	r6, 0x00B0
     85e:	70 90 b1 00 	lds	r7, 0x00B1
     862:	80 90 b2 00 	lds	r8, 0x00B2
     866:	90 90 b3 00 	lds	r9, 0x00B3
     86a:	5b d9       	rcall	.-3402   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     86c:	7b 01       	movw	r14, r22
     86e:	8c 01       	movw	r16, r24
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a4 01       	movw	r20, r8
     876:	93 01       	movw	r18, r6
     878:	54 d9       	rcall	.-3416   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     87a:	9b 01       	movw	r18, r22
     87c:	ac 01       	movw	r20, r24
     87e:	c8 01       	movw	r24, r16
     880:	b7 01       	movw	r22, r14
     882:	c9 d7       	rcall	.+3986   	; 0x1816 <__addsf3>
     884:	1b 01       	movw	r2, r22
     886:	2c 01       	movw	r4, r24
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     888:	60 91 93 00 	lds	r22, 0x0093
     88c:	70 91 94 00 	lds	r23, 0x0094
     890:	80 91 95 00 	lds	r24, 0x0095
     894:	90 91 96 00 	lds	r25, 0x0096
     898:	20 91 93 00 	lds	r18, 0x0093
     89c:	30 91 94 00 	lds	r19, 0x0094
     8a0:	40 91 95 00 	lds	r20, 0x0095
     8a4:	50 91 96 00 	lds	r21, 0x0096
     8a8:	a0 90 b0 00 	lds	r10, 0x00B0
     8ac:	b0 90 b1 00 	lds	r11, 0x00B1
     8b0:	c0 90 b2 00 	lds	r12, 0x00B2
     8b4:	d0 90 b3 00 	lds	r13, 0x00B3
     8b8:	60 90 b0 00 	lds	r6, 0x00B0
     8bc:	70 90 b1 00 	lds	r7, 0x00B1
     8c0:	80 90 b2 00 	lds	r8, 0x00B2
     8c4:	90 90 b3 00 	lds	r9, 0x00B3
     8c8:	2c d9       	rcall	.-3496   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	a0 d7       	rcall	.+3904   	; 0x1814 <__subsf3>
     8d4:	7b 01       	movw	r14, r22
     8d6:	8c 01       	movw	r16, r24
     8d8:	c6 01       	movw	r24, r12
     8da:	b5 01       	movw	r22, r10
     8dc:	a4 01       	movw	r20, r8
     8de:	93 01       	movw	r18, r6
     8e0:	20 d9       	rcall	.-3520   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	c8 01       	movw	r24, r16
     8e8:	b7 01       	movw	r22, r14
     8ea:	95 d7       	rcall	.+3882   	; 0x1816 <__addsf3>
     8ec:	5b 01       	movw	r10, r22
     8ee:	6c 01       	movw	r12, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     8f0:	6d a9       	ldd	r22, Y+53	; 0x35
     8f2:	7e a9       	ldd	r23, Y+54	; 0x36
     8f4:	8f a9       	ldd	r24, Y+55	; 0x37
     8f6:	98 ad       	ldd	r25, Y+56	; 0x38
     8f8:	a6 01       	movw	r20, r12
     8fa:	95 01       	movw	r18, r10
     8fc:	12 d9       	rcall	.-3548   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	69 ad       	ldd	r22, Y+57	; 0x39
     904:	7a ad       	ldd	r23, Y+58	; 0x3a
     906:	8b ad       	ldd	r24, Y+59	; 0x3b
     908:	9c ad       	ldd	r25, Y+60	; 0x3c
     90a:	a2 01       	movw	r20, r4
     90c:	91 01       	movw	r18, r2
     90e:	09 d9       	rcall	.-3566   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	7d d7       	rcall	.+3834   	; 0x1814 <__subsf3>
     91a:	25 96       	adiw	r28, 0x05	; 5
     91c:	6c af       	std	Y+60, r22	; 0x3c
     91e:	7d af       	std	Y+61, r23	; 0x3d
     920:	8e af       	std	Y+62, r24	; 0x3e
     922:	9f af       	std	Y+63, r25	; 0x3f
     924:	25 97       	sbiw	r28, 0x05	; 5
		halfey = (az * halfvx - ax * halfvz);
     926:	69 ad       	ldd	r22, Y+57	; 0x39
     928:	7a ad       	ldd	r23, Y+58	; 0x3a
     92a:	8b ad       	ldd	r24, Y+59	; 0x3b
     92c:	9c ad       	ldd	r25, Y+60	; 0x3c
     92e:	21 96       	adiw	r28, 0x01	; 1
     930:	2c ad       	ldd	r18, Y+60	; 0x3c
     932:	3d ad       	ldd	r19, Y+61	; 0x3d
     934:	4e ad       	ldd	r20, Y+62	; 0x3e
     936:	5f ad       	ldd	r21, Y+63	; 0x3f
     938:	21 97       	sbiw	r28, 0x01	; 1
     93a:	f3 d8       	rcall	.-3610   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     93c:	7b 01       	movw	r14, r22
     93e:	8c 01       	movw	r16, r24
     940:	69 a9       	ldd	r22, Y+49	; 0x31
     942:	7a a9       	ldd	r23, Y+50	; 0x32
     944:	8b a9       	ldd	r24, Y+51	; 0x33
     946:	9c a9       	ldd	r25, Y+52	; 0x34
     948:	a6 01       	movw	r20, r12
     94a:	95 01       	movw	r18, r10
     94c:	ea d8       	rcall	.-3628   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c8 01       	movw	r24, r16
     954:	b7 01       	movw	r22, r14
     956:	5e d7       	rcall	.+3772   	; 0x1814 <__subsf3>
     958:	29 96       	adiw	r28, 0x09	; 9
     95a:	6c af       	std	Y+60, r22	; 0x3c
     95c:	7d af       	std	Y+61, r23	; 0x3d
     95e:	8e af       	std	Y+62, r24	; 0x3e
     960:	9f af       	std	Y+63, r25	; 0x3f
     962:	29 97       	sbiw	r28, 0x09	; 9
		halfez = (ax * halfvy - ay * halfvx);
     964:	69 a9       	ldd	r22, Y+49	; 0x31
     966:	7a a9       	ldd	r23, Y+50	; 0x32
     968:	8b a9       	ldd	r24, Y+51	; 0x33
     96a:	9c a9       	ldd	r25, Y+52	; 0x34
     96c:	a2 01       	movw	r20, r4
     96e:	91 01       	movw	r18, r2
     970:	d8 d8       	rcall	.-3664   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     972:	7b 01       	movw	r14, r22
     974:	8c 01       	movw	r16, r24
     976:	6d a9       	ldd	r22, Y+53	; 0x35
     978:	7e a9       	ldd	r23, Y+54	; 0x36
     97a:	8f a9       	ldd	r24, Y+55	; 0x37
     97c:	98 ad       	ldd	r25, Y+56	; 0x38
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	2c ad       	ldd	r18, Y+60	; 0x3c
     982:	3d ad       	ldd	r19, Y+61	; 0x3d
     984:	4e ad       	ldd	r20, Y+62	; 0x3e
     986:	5f ad       	ldd	r21, Y+63	; 0x3f
     988:	21 97       	sbiw	r28, 0x01	; 1
     98a:	cb d8       	rcall	.-3690   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c8 01       	movw	r24, r16
     992:	b7 01       	movw	r22, r14
     994:	3f d7       	rcall	.+3710   	; 0x1814 <__subsf3>
     996:	1b 01       	movw	r2, r22
     998:	2c 01       	movw	r4, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     99a:	e0 90 b4 00 	lds	r14, 0x00B4
     99e:	f0 90 b5 00 	lds	r15, 0x00B5
     9a2:	00 91 b6 00 	lds	r16, 0x00B6
     9a6:	10 91 b7 00 	lds	r17, 0x00B7
     9aa:	25 96       	adiw	r28, 0x05	; 5
     9ac:	6c ad       	ldd	r22, Y+60	; 0x3c
     9ae:	7d ad       	ldd	r23, Y+61	; 0x3d
     9b0:	8e ad       	ldd	r24, Y+62	; 0x3e
     9b2:	9f ad       	ldd	r25, Y+63	; 0x3f
     9b4:	25 97       	sbiw	r28, 0x05	; 5
     9b6:	2d ec       	ldi	r18, 0xCD	; 205
     9b8:	3c ec       	ldi	r19, 0xCC	; 204
     9ba:	4c e4       	ldi	r20, 0x4C	; 76
     9bc:	5e e3       	ldi	r21, 0x3E	; 62
     9be:	b1 d8       	rcall	.-3742   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     9c0:	2a e8       	ldi	r18, 0x8A	; 138
     9c2:	3b e4       	ldi	r19, 0x4B	; 75
     9c4:	46 e8       	ldi	r20, 0x86	; 134
     9c6:	5c e3       	ldi	r21, 0x3C	; 60
     9c8:	ac d8       	rcall	.-3752   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     9ca:	a8 01       	movw	r20, r16
     9cc:	97 01       	movw	r18, r14
     9ce:	23 d7       	rcall	.+3654   	; 0x1816 <__addsf3>
     9d0:	60 93 b4 00 	sts	0x00B4, r22
     9d4:	70 93 b5 00 	sts	0x00B5, r23
     9d8:	80 93 b6 00 	sts	0x00B6, r24
     9dc:	90 93 b7 00 	sts	0x00B7, r25
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     9e0:	e0 90 b8 00 	lds	r14, 0x00B8
     9e4:	f0 90 b9 00 	lds	r15, 0x00B9
     9e8:	00 91 ba 00 	lds	r16, 0x00BA
     9ec:	10 91 bb 00 	lds	r17, 0x00BB
     9f0:	29 96       	adiw	r28, 0x09	; 9
     9f2:	6c ad       	ldd	r22, Y+60	; 0x3c
     9f4:	7d ad       	ldd	r23, Y+61	; 0x3d
     9f6:	8e ad       	ldd	r24, Y+62	; 0x3e
     9f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     9fa:	29 97       	sbiw	r28, 0x09	; 9
     9fc:	2d ec       	ldi	r18, 0xCD	; 205
     9fe:	3c ec       	ldi	r19, 0xCC	; 204
     a00:	4c e4       	ldi	r20, 0x4C	; 76
     a02:	5e e3       	ldi	r21, 0x3E	; 62
     a04:	8e d8       	rcall	.-3812   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     a06:	2a e8       	ldi	r18, 0x8A	; 138
     a08:	3b e4       	ldi	r19, 0x4B	; 75
     a0a:	46 e8       	ldi	r20, 0x86	; 134
     a0c:	5c e3       	ldi	r21, 0x3C	; 60
     a0e:	89 d8       	rcall	.-3822   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     a10:	a8 01       	movw	r20, r16
     a12:	97 01       	movw	r18, r14
     a14:	00 d7       	rcall	.+3584   	; 0x1816 <__addsf3>
     a16:	60 93 b8 00 	sts	0x00B8, r22
     a1a:	70 93 b9 00 	sts	0x00B9, r23
     a1e:	80 93 ba 00 	sts	0x00BA, r24
     a22:	90 93 bb 00 	sts	0x00BB, r25
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     a26:	e0 90 bc 00 	lds	r14, 0x00BC
     a2a:	f0 90 bd 00 	lds	r15, 0x00BD
     a2e:	00 91 be 00 	lds	r16, 0x00BE
     a32:	10 91 bf 00 	lds	r17, 0x00BF
     a36:	c2 01       	movw	r24, r4
     a38:	b1 01       	movw	r22, r2
     a3a:	2d ec       	ldi	r18, 0xCD	; 205
     a3c:	3c ec       	ldi	r19, 0xCC	; 204
     a3e:	4c e4       	ldi	r20, 0x4C	; 76
     a40:	5e e3       	ldi	r21, 0x3E	; 62
     a42:	6f d8       	rcall	.-3874   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     a44:	2a e8       	ldi	r18, 0x8A	; 138
     a46:	3b e4       	ldi	r19, 0x4B	; 75
     a48:	46 e8       	ldi	r20, 0x86	; 134
     a4a:	5c e3       	ldi	r21, 0x3C	; 60
     a4c:	6a d8       	rcall	.-3884   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     a4e:	a8 01       	movw	r20, r16
     a50:	97 01       	movw	r18, r14
     a52:	e1 d6       	rcall	.+3522   	; 0x1816 <__addsf3>
     a54:	60 93 bc 00 	sts	0x00BC, r22
     a58:	70 93 bd 00 	sts	0x00BD, r23
     a5c:	80 93 be 00 	sts	0x00BE, r24
     a60:	90 93 bf 00 	sts	0x00BF, r25
			gx += integralFBx;	// apply integral feedback
     a64:	20 91 b4 00 	lds	r18, 0x00B4
     a68:	30 91 b5 00 	lds	r19, 0x00B5
     a6c:	40 91 b6 00 	lds	r20, 0x00B6
     a70:	50 91 b7 00 	lds	r21, 0x00B7
     a74:	6d a1       	ldd	r22, Y+37	; 0x25
     a76:	7e a1       	ldd	r23, Y+38	; 0x26
     a78:	8f a1       	ldd	r24, Y+39	; 0x27
     a7a:	98 a5       	ldd	r25, Y+40	; 0x28
     a7c:	cc d6       	rcall	.+3480   	; 0x1816 <__addsf3>
     a7e:	3b 01       	movw	r6, r22
     a80:	4c 01       	movw	r8, r24
			gy += integralFBy;
     a82:	20 91 b8 00 	lds	r18, 0x00B8
     a86:	30 91 b9 00 	lds	r19, 0x00B9
     a8a:	40 91 ba 00 	lds	r20, 0x00BA
     a8e:	50 91 bb 00 	lds	r21, 0x00BB
     a92:	69 a5       	ldd	r22, Y+41	; 0x29
     a94:	7a a5       	ldd	r23, Y+42	; 0x2a
     a96:	8b a5       	ldd	r24, Y+43	; 0x2b
     a98:	9c a5       	ldd	r25, Y+44	; 0x2c
     a9a:	bd d6       	rcall	.+3450   	; 0x1816 <__addsf3>
     a9c:	5b 01       	movw	r10, r22
     a9e:	6c 01       	movw	r12, r24
			gz += integralFBz;
     aa0:	20 91 bc 00 	lds	r18, 0x00BC
     aa4:	30 91 bd 00 	lds	r19, 0x00BD
     aa8:	40 91 be 00 	lds	r20, 0x00BE
     aac:	50 91 bf 00 	lds	r21, 0x00BF
     ab0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ab2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ab6:	98 a9       	ldd	r25, Y+48	; 0x30
     ab8:	ae d6       	rcall	.+3420   	; 0x1816 <__addsf3>
     aba:	7b 01       	movw	r14, r22
     abc:	8c 01       	movw	r16, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     abe:	c4 01       	movw	r24, r8
     ac0:	b3 01       	movw	r22, r6
     ac2:	25 96       	adiw	r28, 0x05	; 5
     ac4:	2c ad       	ldd	r18, Y+60	; 0x3c
     ac6:	3d ad       	ldd	r19, Y+61	; 0x3d
     ac8:	4e ad       	ldd	r20, Y+62	; 0x3e
     aca:	5f ad       	ldd	r21, Y+63	; 0x3f
     acc:	25 97       	sbiw	r28, 0x05	; 5
     ace:	a3 d6       	rcall	.+3398   	; 0x1816 <__addsf3>
     ad0:	6d a3       	std	Y+37, r22	; 0x25
     ad2:	7e a3       	std	Y+38, r23	; 0x26
     ad4:	8f a3       	std	Y+39, r24	; 0x27
     ad6:	98 a7       	std	Y+40, r25	; 0x28
		gy += mpu6050_mahonytwoKpDef * halfey;
     ad8:	c6 01       	movw	r24, r12
     ada:	b5 01       	movw	r22, r10
     adc:	29 96       	adiw	r28, 0x09	; 9
     ade:	2c ad       	ldd	r18, Y+60	; 0x3c
     ae0:	3d ad       	ldd	r19, Y+61	; 0x3d
     ae2:	4e ad       	ldd	r20, Y+62	; 0x3e
     ae4:	5f ad       	ldd	r21, Y+63	; 0x3f
     ae6:	29 97       	sbiw	r28, 0x09	; 9
     ae8:	96 d6       	rcall	.+3372   	; 0x1816 <__addsf3>
     aea:	69 a7       	std	Y+41, r22	; 0x29
     aec:	7a a7       	std	Y+42, r23	; 0x2a
     aee:	8b a7       	std	Y+43, r24	; 0x2b
     af0:	9c a7       	std	Y+44, r25	; 0x2c
		gz += mpu6050_mahonytwoKpDef * halfez;
     af2:	c8 01       	movw	r24, r16
     af4:	b7 01       	movw	r22, r14
     af6:	a2 01       	movw	r20, r4
     af8:	91 01       	movw	r18, r2
     afa:	8d d6       	rcall	.+3354   	; 0x1816 <__addsf3>
     afc:	6d a7       	std	Y+45, r22	; 0x2d
     afe:	7e a7       	std	Y+46, r23	; 0x2e
     b00:	8f a7       	std	Y+47, r24	; 0x2f
     b02:	98 ab       	std	Y+48, r25	; 0x30
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     b04:	6d a1       	ldd	r22, Y+37	; 0x25
     b06:	7e a1       	ldd	r23, Y+38	; 0x26
     b08:	8f a1       	ldd	r24, Y+39	; 0x27
     b0a:	98 a5       	ldd	r25, Y+40	; 0x28
     b0c:	2a e8       	ldi	r18, 0x8A	; 138
     b0e:	3b e4       	ldi	r19, 0x4B	; 75
     b10:	46 e0       	ldi	r20, 0x06	; 6
     b12:	5c e3       	ldi	r21, 0x3C	; 60
     b14:	06 d8       	rcall	.-4084   	; 0xfffffb22 <__eeprom_end+0xff7efb22>
     b16:	2d 96       	adiw	r28, 0x0d	; 13
     b18:	6c af       	std	Y+60, r22	; 0x3c
     b1a:	7d af       	std	Y+61, r23	; 0x3d
     b1c:	8e af       	std	Y+62, r24	; 0x3e
     b1e:	9f af       	std	Y+63, r25	; 0x3f
     b20:	2d 97       	sbiw	r28, 0x0d	; 13
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b22:	69 a5       	ldd	r22, Y+41	; 0x29
     b24:	7a a5       	ldd	r23, Y+42	; 0x2a
     b26:	8b a5       	ldd	r24, Y+43	; 0x2b
     b28:	9c a5       	ldd	r25, Y+44	; 0x2c
     b2a:	2a e8       	ldi	r18, 0x8A	; 138
     b2c:	3b e4       	ldi	r19, 0x4B	; 75
     b2e:	46 e0       	ldi	r20, 0x06	; 6
     b30:	5c e3       	ldi	r21, 0x3C	; 60
     b32:	f7 d7       	rcall	.+4078   	; 0x1b22 <__mulsf3>
     b34:	1b 01       	movw	r2, r22
     b36:	2c 01       	movw	r4, r24
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b38:	6d a5       	ldd	r22, Y+45	; 0x2d
     b3a:	7e a5       	ldd	r23, Y+46	; 0x2e
     b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     b3e:	98 a9       	ldd	r25, Y+48	; 0x30
     b40:	2a e8       	ldi	r18, 0x8A	; 138
     b42:	3b e4       	ldi	r19, 0x4B	; 75
     b44:	46 e0       	ldi	r20, 0x06	; 6
     b46:	5c e3       	ldi	r21, 0x3C	; 60
     b48:	ec d7       	rcall	.+4056   	; 0x1b22 <__mulsf3>
     b4a:	3b 01       	movw	r6, r22
     b4c:	4c 01       	movw	r8, r24
	qa = q0;
     b4e:	e0 90 93 00 	lds	r14, 0x0093
     b52:	f0 90 94 00 	lds	r15, 0x0094
     b56:	00 91 95 00 	lds	r16, 0x0095
     b5a:	10 91 96 00 	lds	r17, 0x0096
     b5e:	e9 86       	std	Y+9, r14	; 0x09
     b60:	fa 86       	std	Y+10, r15	; 0x0a
     b62:	0b 87       	std	Y+11, r16	; 0x0b
     b64:	1c 87       	std	Y+12, r17	; 0x0c
	qb = q1;
     b66:	80 91 a8 00 	lds	r24, 0x00A8
     b6a:	90 91 a9 00 	lds	r25, 0x00A9
     b6e:	a0 91 aa 00 	lds	r26, 0x00AA
     b72:	b0 91 ab 00 	lds	r27, 0x00AB
     b76:	8d 83       	std	Y+5, r24	; 0x05
     b78:	9e 83       	std	Y+6, r25	; 0x06
     b7a:	af 83       	std	Y+7, r26	; 0x07
     b7c:	b8 87       	std	Y+8, r27	; 0x08
	qc = q2;
     b7e:	e0 90 ac 00 	lds	r14, 0x00AC
     b82:	f0 90 ad 00 	lds	r15, 0x00AD
     b86:	00 91 ae 00 	lds	r16, 0x00AE
     b8a:	10 91 af 00 	lds	r17, 0x00AF
     b8e:	e9 82       	std	Y+1, r14	; 0x01
     b90:	fa 82       	std	Y+2, r15	; 0x02
     b92:	0b 83       	std	Y+3, r16	; 0x03
     b94:	1c 83       	std	Y+4, r17	; 0x04
	q0 += (-qb * gx - qc * gy - q3 * gz);
     b96:	a0 90 b0 00 	lds	r10, 0x00B0
     b9a:	b0 90 b1 00 	lds	r11, 0x00B1
     b9e:	c0 90 b2 00 	lds	r12, 0x00B2
     ba2:	d0 90 b3 00 	lds	r13, 0x00B3
     ba6:	80 91 93 00 	lds	r24, 0x0093
     baa:	90 91 94 00 	lds	r25, 0x0094
     bae:	a0 91 95 00 	lds	r26, 0x0095
     bb2:	b0 91 96 00 	lds	r27, 0x0096
     bb6:	89 a3       	std	Y+33, r24	; 0x21
     bb8:	9a a3       	std	Y+34, r25	; 0x22
     bba:	ab a3       	std	Y+35, r26	; 0x23
     bbc:	bc a3       	std	Y+36, r27	; 0x24
     bbe:	6d 81       	ldd	r22, Y+5	; 0x05
     bc0:	7e 81       	ldd	r23, Y+6	; 0x06
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	90 58       	subi	r25, 0x80	; 128
     bc8:	2d 96       	adiw	r28, 0x0d	; 13
     bca:	2c ad       	ldd	r18, Y+60	; 0x3c
     bcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     bce:	4e ad       	ldd	r20, Y+62	; 0x3e
     bd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     bd2:	2d 97       	sbiw	r28, 0x0d	; 13
     bd4:	a6 d7       	rcall	.+3916   	; 0x1b22 <__mulsf3>
     bd6:	7b 01       	movw	r14, r22
     bd8:	8c 01       	movw	r16, r24
     bda:	69 81       	ldd	r22, Y+1	; 0x01
     bdc:	7a 81       	ldd	r23, Y+2	; 0x02
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	a2 01       	movw	r20, r4
     be4:	91 01       	movw	r18, r2
     be6:	9d d7       	rcall	.+3898   	; 0x1b22 <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	c8 01       	movw	r24, r16
     bee:	b7 01       	movw	r22, r14
     bf0:	11 d6       	rcall	.+3106   	; 0x1814 <__subsf3>
     bf2:	7b 01       	movw	r14, r22
     bf4:	8c 01       	movw	r16, r24
     bf6:	c6 01       	movw	r24, r12
     bf8:	b5 01       	movw	r22, r10
     bfa:	a4 01       	movw	r20, r8
     bfc:	93 01       	movw	r18, r6
     bfe:	91 d7       	rcall	.+3874   	; 0x1b22 <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c8 01       	movw	r24, r16
     c06:	b7 01       	movw	r22, r14
     c08:	05 d6       	rcall	.+3082   	; 0x1814 <__subsf3>
     c0a:	29 a1       	ldd	r18, Y+33	; 0x21
     c0c:	3a a1       	ldd	r19, Y+34	; 0x22
     c0e:	4b a1       	ldd	r20, Y+35	; 0x23
     c10:	5c a1       	ldd	r21, Y+36	; 0x24
     c12:	01 d6       	rcall	.+3074   	; 0x1816 <__addsf3>
     c14:	60 93 93 00 	sts	0x0093, r22
     c18:	70 93 94 00 	sts	0x0094, r23
     c1c:	80 93 95 00 	sts	0x0095, r24
     c20:	90 93 96 00 	sts	0x0096, r25
	q1 += (qa * gx + qc * gz - q3 * gy);
     c24:	a0 90 b0 00 	lds	r10, 0x00B0
     c28:	b0 90 b1 00 	lds	r11, 0x00B1
     c2c:	c0 90 b2 00 	lds	r12, 0x00B2
     c30:	d0 90 b3 00 	lds	r13, 0x00B3
     c34:	e0 90 a8 00 	lds	r14, 0x00A8
     c38:	f0 90 a9 00 	lds	r15, 0x00A9
     c3c:	00 91 aa 00 	lds	r16, 0x00AA
     c40:	10 91 ab 00 	lds	r17, 0x00AB
     c44:	ed 8e       	std	Y+29, r14	; 0x1d
     c46:	fe 8e       	std	Y+30, r15	; 0x1e
     c48:	0f 8f       	std	Y+31, r16	; 0x1f
     c4a:	18 a3       	std	Y+32, r17	; 0x20
     c4c:	69 85       	ldd	r22, Y+9	; 0x09
     c4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	9c 85       	ldd	r25, Y+12	; 0x0c
     c54:	2d 96       	adiw	r28, 0x0d	; 13
     c56:	2c ad       	ldd	r18, Y+60	; 0x3c
     c58:	3d ad       	ldd	r19, Y+61	; 0x3d
     c5a:	4e ad       	ldd	r20, Y+62	; 0x3e
     c5c:	5f ad       	ldd	r21, Y+63	; 0x3f
     c5e:	2d 97       	sbiw	r28, 0x0d	; 13
     c60:	60 d7       	rcall	.+3776   	; 0x1b22 <__mulsf3>
     c62:	7b 01       	movw	r14, r22
     c64:	8c 01       	movw	r16, r24
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	a4 01       	movw	r20, r8
     c70:	93 01       	movw	r18, r6
     c72:	57 d7       	rcall	.+3758   	; 0x1b22 <__mulsf3>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	c8 01       	movw	r24, r16
     c7a:	b7 01       	movw	r22, r14
     c7c:	cc d5       	rcall	.+2968   	; 0x1816 <__addsf3>
     c7e:	7b 01       	movw	r14, r22
     c80:	8c 01       	movw	r16, r24
     c82:	c6 01       	movw	r24, r12
     c84:	b5 01       	movw	r22, r10
     c86:	a2 01       	movw	r20, r4
     c88:	91 01       	movw	r18, r2
     c8a:	4b d7       	rcall	.+3734   	; 0x1b22 <__mulsf3>
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	c8 01       	movw	r24, r16
     c92:	b7 01       	movw	r22, r14
     c94:	bf d5       	rcall	.+2942   	; 0x1814 <__subsf3>
     c96:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c98:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c9a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c9c:	58 a1       	ldd	r21, Y+32	; 0x20
     c9e:	bb d5       	rcall	.+2934   	; 0x1816 <__addsf3>
     ca0:	60 93 a8 00 	sts	0x00A8, r22
     ca4:	70 93 a9 00 	sts	0x00A9, r23
     ca8:	80 93 aa 00 	sts	0x00AA, r24
     cac:	90 93 ab 00 	sts	0x00AB, r25
	q2 += (qa * gy - qb * gz + q3 * gx);
     cb0:	a0 90 b0 00 	lds	r10, 0x00B0
     cb4:	b0 90 b1 00 	lds	r11, 0x00B1
     cb8:	c0 90 b2 00 	lds	r12, 0x00B2
     cbc:	d0 90 b3 00 	lds	r13, 0x00B3
     cc0:	80 91 ac 00 	lds	r24, 0x00AC
     cc4:	90 91 ad 00 	lds	r25, 0x00AD
     cc8:	a0 91 ae 00 	lds	r26, 0x00AE
     ccc:	b0 91 af 00 	lds	r27, 0x00AF
     cd0:	89 8f       	std	Y+25, r24	; 0x19
     cd2:	9a 8f       	std	Y+26, r25	; 0x1a
     cd4:	ab 8f       	std	Y+27, r26	; 0x1b
     cd6:	bc 8f       	std	Y+28, r27	; 0x1c
     cd8:	69 85       	ldd	r22, Y+9	; 0x09
     cda:	7a 85       	ldd	r23, Y+10	; 0x0a
     cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cde:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce0:	a2 01       	movw	r20, r4
     ce2:	91 01       	movw	r18, r2
     ce4:	1e d7       	rcall	.+3644   	; 0x1b22 <__mulsf3>
     ce6:	7b 01       	movw	r14, r22
     ce8:	8c 01       	movw	r16, r24
     cea:	6d 81       	ldd	r22, Y+5	; 0x05
     cec:	7e 81       	ldd	r23, Y+6	; 0x06
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	a4 01       	movw	r20, r8
     cf4:	93 01       	movw	r18, r6
     cf6:	15 d7       	rcall	.+3626   	; 0x1b22 <__mulsf3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	89 d5       	rcall	.+2834   	; 0x1814 <__subsf3>
     d02:	7b 01       	movw	r14, r22
     d04:	8c 01       	movw	r16, r24
     d06:	c6 01       	movw	r24, r12
     d08:	b5 01       	movw	r22, r10
     d0a:	2d 96       	adiw	r28, 0x0d	; 13
     d0c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d0e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d10:	4e ad       	ldd	r20, Y+62	; 0x3e
     d12:	5f ad       	ldd	r21, Y+63	; 0x3f
     d14:	2d 97       	sbiw	r28, 0x0d	; 13
     d16:	05 d7       	rcall	.+3594   	; 0x1b22 <__mulsf3>
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	c8 01       	movw	r24, r16
     d1e:	b7 01       	movw	r22, r14
     d20:	7a d5       	rcall	.+2804   	; 0x1816 <__addsf3>
     d22:	29 8d       	ldd	r18, Y+25	; 0x19
     d24:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d26:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d28:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d2a:	75 d5       	rcall	.+2794   	; 0x1816 <__addsf3>
     d2c:	60 93 ac 00 	sts	0x00AC, r22
     d30:	70 93 ad 00 	sts	0x00AD, r23
     d34:	80 93 ae 00 	sts	0x00AE, r24
     d38:	90 93 af 00 	sts	0x00AF, r25
	q3 += (qa * gz + qb * gy - qc * gx);
     d3c:	a0 90 b0 00 	lds	r10, 0x00B0
     d40:	b0 90 b1 00 	lds	r11, 0x00B1
     d44:	c0 90 b2 00 	lds	r12, 0x00B2
     d48:	d0 90 b3 00 	lds	r13, 0x00B3
     d4c:	69 85       	ldd	r22, Y+9	; 0x09
     d4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d50:	8b 85       	ldd	r24, Y+11	; 0x0b
     d52:	9c 85       	ldd	r25, Y+12	; 0x0c
     d54:	a4 01       	movw	r20, r8
     d56:	93 01       	movw	r18, r6
     d58:	e4 d6       	rcall	.+3528   	; 0x1b22 <__mulsf3>
     d5a:	7b 01       	movw	r14, r22
     d5c:	8c 01       	movw	r16, r24
     d5e:	6d 81       	ldd	r22, Y+5	; 0x05
     d60:	7e 81       	ldd	r23, Y+6	; 0x06
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	a2 01       	movw	r20, r4
     d68:	91 01       	movw	r18, r2
     d6a:	db d6       	rcall	.+3510   	; 0x1b22 <__mulsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	c8 01       	movw	r24, r16
     d72:	b7 01       	movw	r22, r14
     d74:	50 d5       	rcall	.+2720   	; 0x1816 <__addsf3>
     d76:	7b 01       	movw	r14, r22
     d78:	8c 01       	movw	r16, r24
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	2d 96       	adiw	r28, 0x0d	; 13
     d84:	2c ad       	ldd	r18, Y+60	; 0x3c
     d86:	3d ad       	ldd	r19, Y+61	; 0x3d
     d88:	4e ad       	ldd	r20, Y+62	; 0x3e
     d8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     d8c:	2d 97       	sbiw	r28, 0x0d	; 13
     d8e:	c9 d6       	rcall	.+3474   	; 0x1b22 <__mulsf3>
     d90:	9b 01       	movw	r18, r22
     d92:	ac 01       	movw	r20, r24
     d94:	c8 01       	movw	r24, r16
     d96:	b7 01       	movw	r22, r14
     d98:	3d d5       	rcall	.+2682   	; 0x1814 <__subsf3>
     d9a:	a6 01       	movw	r20, r12
     d9c:	95 01       	movw	r18, r10
     d9e:	3b d5       	rcall	.+2678   	; 0x1816 <__addsf3>
     da0:	60 93 b0 00 	sts	0x00B0, r22
     da4:	70 93 b1 00 	sts	0x00B1, r23
     da8:	80 93 b2 00 	sts	0x00B2, r24
     dac:	90 93 b3 00 	sts	0x00B3, r25

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     db0:	60 91 93 00 	lds	r22, 0x0093
     db4:	70 91 94 00 	lds	r23, 0x0094
     db8:	80 91 95 00 	lds	r24, 0x0095
     dbc:	90 91 96 00 	lds	r25, 0x0096
     dc0:	20 91 93 00 	lds	r18, 0x0093
     dc4:	30 91 94 00 	lds	r19, 0x0094
     dc8:	40 91 95 00 	lds	r20, 0x0095
     dcc:	50 91 96 00 	lds	r21, 0x0096
     dd0:	a0 90 a8 00 	lds	r10, 0x00A8
     dd4:	b0 90 a9 00 	lds	r11, 0x00A9
     dd8:	c0 90 aa 00 	lds	r12, 0x00AA
     ddc:	d0 90 ab 00 	lds	r13, 0x00AB
     de0:	60 90 a8 00 	lds	r6, 0x00A8
     de4:	70 90 a9 00 	lds	r7, 0x00A9
     de8:	80 90 aa 00 	lds	r8, 0x00AA
     dec:	90 90 ab 00 	lds	r9, 0x00AB
     df0:	20 90 ac 00 	lds	r2, 0x00AC
     df4:	30 90 ad 00 	lds	r3, 0x00AD
     df8:	40 90 ae 00 	lds	r4, 0x00AE
     dfc:	50 90 af 00 	lds	r5, 0x00AF
     e00:	e0 90 ac 00 	lds	r14, 0x00AC
     e04:	f0 90 ad 00 	lds	r15, 0x00AD
     e08:	00 91 ae 00 	lds	r16, 0x00AE
     e0c:	10 91 af 00 	lds	r17, 0x00AF
     e10:	ed 8a       	std	Y+21, r14	; 0x15
     e12:	fe 8a       	std	Y+22, r15	; 0x16
     e14:	0f 8b       	std	Y+23, r16	; 0x17
     e16:	18 8f       	std	Y+24, r17	; 0x18
     e18:	e0 90 b0 00 	lds	r14, 0x00B0
     e1c:	f0 90 b1 00 	lds	r15, 0x00B1
     e20:	00 91 b2 00 	lds	r16, 0x00B2
     e24:	10 91 b3 00 	lds	r17, 0x00B3
     e28:	e9 8a       	std	Y+17, r14	; 0x11
     e2a:	fa 8a       	std	Y+18, r15	; 0x12
     e2c:	0b 8b       	std	Y+19, r16	; 0x13
     e2e:	1c 8b       	std	Y+20, r17	; 0x14
     e30:	e0 90 b0 00 	lds	r14, 0x00B0
     e34:	f0 90 b1 00 	lds	r15, 0x00B1
     e38:	00 91 b2 00 	lds	r16, 0x00B2
     e3c:	10 91 b3 00 	lds	r17, 0x00B3
     e40:	ed 86       	std	Y+13, r14	; 0x0d
     e42:	fe 86       	std	Y+14, r15	; 0x0e
     e44:	0f 87       	std	Y+15, r16	; 0x0f
     e46:	18 8b       	std	Y+16, r17	; 0x10
     e48:	6c d6       	rcall	.+3288   	; 0x1b22 <__mulsf3>
     e4a:	7b 01       	movw	r14, r22
     e4c:	8c 01       	movw	r16, r24
     e4e:	c6 01       	movw	r24, r12
     e50:	b5 01       	movw	r22, r10
     e52:	a4 01       	movw	r20, r8
     e54:	93 01       	movw	r18, r6
     e56:	65 d6       	rcall	.+3274   	; 0x1b22 <__mulsf3>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	c8 01       	movw	r24, r16
     e5e:	b7 01       	movw	r22, r14
     e60:	da d4       	rcall	.+2484   	; 0x1816 <__addsf3>
     e62:	7b 01       	movw	r14, r22
     e64:	8c 01       	movw	r16, r24
     e66:	c2 01       	movw	r24, r4
     e68:	b1 01       	movw	r22, r2
     e6a:	2d 89       	ldd	r18, Y+21	; 0x15
     e6c:	3e 89       	ldd	r19, Y+22	; 0x16
     e6e:	4f 89       	ldd	r20, Y+23	; 0x17
     e70:	58 8d       	ldd	r21, Y+24	; 0x18
     e72:	57 d6       	rcall	.+3246   	; 0x1b22 <__mulsf3>
     e74:	9b 01       	movw	r18, r22
     e76:	ac 01       	movw	r20, r24
     e78:	c8 01       	movw	r24, r16
     e7a:	b7 01       	movw	r22, r14
     e7c:	cc d4       	rcall	.+2456   	; 0x1816 <__addsf3>
     e7e:	7b 01       	movw	r14, r22
     e80:	8c 01       	movw	r16, r24
     e82:	69 89       	ldd	r22, Y+17	; 0x11
     e84:	7a 89       	ldd	r23, Y+18	; 0x12
     e86:	8b 89       	ldd	r24, Y+19	; 0x13
     e88:	9c 89       	ldd	r25, Y+20	; 0x14
     e8a:	2d 85       	ldd	r18, Y+13	; 0x0d
     e8c:	3e 85       	ldd	r19, Y+14	; 0x0e
     e8e:	4f 85       	ldd	r20, Y+15	; 0x0f
     e90:	58 89       	ldd	r21, Y+16	; 0x10
     e92:	47 d6       	rcall	.+3214   	; 0x1b22 <__mulsf3>
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	c8 01       	movw	r24, r16
     e9a:	b7 01       	movw	r22, r14
     e9c:	bc d4       	rcall	.+2424   	; 0x1816 <__addsf3>
     e9e:	a8 d6       	rcall	.+3408   	; 0x1bf0 <sqrt>
     ea0:	7b 01       	movw	r14, r22
     ea2:	8c 01       	movw	r16, r24
	q0 /= norm;
     ea4:	60 91 93 00 	lds	r22, 0x0093
     ea8:	70 91 94 00 	lds	r23, 0x0094
     eac:	80 91 95 00 	lds	r24, 0x0095
     eb0:	90 91 96 00 	lds	r25, 0x0096
     eb4:	a8 01       	movw	r20, r16
     eb6:	97 01       	movw	r18, r14
     eb8:	16 d5       	rcall	.+2604   	; 0x18e6 <__divsf3>
     eba:	60 93 93 00 	sts	0x0093, r22
     ebe:	70 93 94 00 	sts	0x0094, r23
     ec2:	80 93 95 00 	sts	0x0095, r24
     ec6:	90 93 96 00 	sts	0x0096, r25
	q1 /= norm;
     eca:	60 91 a8 00 	lds	r22, 0x00A8
     ece:	70 91 a9 00 	lds	r23, 0x00A9
     ed2:	80 91 aa 00 	lds	r24, 0x00AA
     ed6:	90 91 ab 00 	lds	r25, 0x00AB
     eda:	a8 01       	movw	r20, r16
     edc:	97 01       	movw	r18, r14
     ede:	03 d5       	rcall	.+2566   	; 0x18e6 <__divsf3>
     ee0:	60 93 a8 00 	sts	0x00A8, r22
     ee4:	70 93 a9 00 	sts	0x00A9, r23
     ee8:	80 93 aa 00 	sts	0x00AA, r24
     eec:	90 93 ab 00 	sts	0x00AB, r25
	q2 /= norm;
     ef0:	60 91 ac 00 	lds	r22, 0x00AC
     ef4:	70 91 ad 00 	lds	r23, 0x00AD
     ef8:	80 91 ae 00 	lds	r24, 0x00AE
     efc:	90 91 af 00 	lds	r25, 0x00AF
     f00:	a8 01       	movw	r20, r16
     f02:	97 01       	movw	r18, r14
     f04:	f0 d4       	rcall	.+2528   	; 0x18e6 <__divsf3>
     f06:	60 93 ac 00 	sts	0x00AC, r22
     f0a:	70 93 ad 00 	sts	0x00AD, r23
     f0e:	80 93 ae 00 	sts	0x00AE, r24
     f12:	90 93 af 00 	sts	0x00AF, r25
	q3 /= norm;
     f16:	60 91 b0 00 	lds	r22, 0x00B0
     f1a:	70 91 b1 00 	lds	r23, 0x00B1
     f1e:	80 91 b2 00 	lds	r24, 0x00B2
     f22:	90 91 b3 00 	lds	r25, 0x00B3
     f26:	a8 01       	movw	r20, r16
     f28:	97 01       	movw	r18, r14
     f2a:	dd d4       	rcall	.+2490   	; 0x18e6 <__divsf3>
     f2c:	60 93 b0 00 	sts	0x00B0, r22
     f30:	70 93 b1 00 	sts	0x00B1, r23
     f34:	80 93 b2 00 	sts	0x00B2, r24
     f38:	90 93 b3 00 	sts	0x00B3, r25
}
     f3c:	c4 5b       	subi	r28, 0xB4	; 180
     f3e:	df 4f       	sbci	r29, 0xFF	; 255
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	9f 90       	pop	r9
     f60:	8f 90       	pop	r8
     f62:	7f 90       	pop	r7
     f64:	6f 90       	pop	r6
     f66:	5f 90       	pop	r5
     f68:	4f 90       	pop	r4
     f6a:	3f 90       	pop	r3
     f6c:	2f 90       	pop	r2
     f6e:	08 95       	ret

00000f70 <mpu6050_writeBytes>:
}

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	18 2f       	mov	r17, r24
     f7e:	06 2f       	mov	r16, r22
     f80:	f4 2e       	mov	r15, r20
     f82:	e5 2e       	mov	r14, r21
	if(length > 0) {
     f84:	66 23       	and	r22, r22
     f86:	79 f0       	breq	.+30     	; 0xfa6 <mpu6050_writeBytes+0x36>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     f88:	80 ed       	ldi	r24, 0xD0	; 208
     f8a:	9d d3       	rcall	.+1850   	; 0x16c6 <i2c_start>
		i2c_write(regAddr); //reg
     f8c:	81 2f       	mov	r24, r17
     f8e:	ed d3       	rcall	.+2010   	; 0x176a <i2c_write>
     f90:	1f 2d       	mov	r17, r15
     f92:	2f 2d       	mov	r18, r15
     f94:	3e 2d       	mov	r19, r14
     f96:	e9 01       	movw	r28, r18
		for (uint8_t i = 0; i < length; i++) {
			i2c_write((uint8_t) data[i]);
     f98:	89 91       	ld	r24, Y+
     f9a:	e7 d3       	rcall	.+1998   	; 0x176a <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
     f9c:	9e 01       	movw	r18, r28
     f9e:	21 1b       	sub	r18, r17
     fa0:	20 17       	cp	r18, r16
     fa2:	d0 f3       	brcs	.-12     	; 0xf98 <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
     fa4:	d2 d3       	rcall	.+1956   	; 0x174a <i2c_stop>
	}
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret

00000fb4 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	ae 01       	movw	r20, r28
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	5f 4f       	sbci	r21, 0xFF	; 255
     fc8:	d3 df       	rcall	.-90     	; 0xf70 <mpu6050_writeBytes>
}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	18 2f       	mov	r17, r24
     fe2:	d6 2e       	mov	r13, r22
     fe4:	04 2f       	mov	r16, r20
     fe6:	f5 2e       	mov	r15, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     fe8:	66 23       	and	r22, r22
     fea:	11 f4       	brne	.+4      	; 0xff0 <mpu6050_readBytes+0x1e>
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	25 c0       	rjmp	.+74     	; 0x103a <mpu6050_readBytes+0x68>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     ff0:	80 ed       	ldi	r24, 0xD0	; 208
     ff2:	69 d3       	rcall	.+1746   	; 0x16c6 <i2c_start>
		i2c_write(regAddr);
     ff4:	81 2f       	mov	r24, r17
     ff6:	b9 d3       	rcall	.+1906   	; 0x176a <i2c_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ff8:	85 e3       	ldi	r24, 0x35	; 53
     ffa:	8a 95       	dec	r24
     ffc:	f1 f7       	brne	.-4      	; 0xffa <mpu6050_readBytes+0x28>
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
     ffe:	81 ed       	ldi	r24, 0xD1	; 209
    1000:	62 d3       	rcall	.+1732   	; 0x16c6 <i2c_start>
    1002:	80 2f       	mov	r24, r16
    1004:	9f 2d       	mov	r25, r15
    1006:	8c 01       	movw	r16, r24
    1008:	c0 e0       	ldi	r28, 0x00	; 0
    100a:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
    100c:	8d 2d       	mov	r24, r13
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	7c 01       	movw	r14, r24
    1012:	08 94       	sec
    1014:	e1 08       	sbc	r14, r1
    1016:	f1 08       	sbc	r15, r1
    1018:	ce 15       	cp	r28, r14
    101a:	df 05       	cpc	r29, r15
    101c:	21 f4       	brne	.+8      	; 0x1026 <mpu6050_readBytes+0x54>
				data[i] = i2c_readNak();
    101e:	e0 d3       	rcall	.+1984   	; 0x17e0 <i2c_readNak>
    1020:	f8 01       	movw	r30, r16
    1022:	80 83       	st	Z, r24
    1024:	03 c0       	rjmp	.+6      	; 0x102c <mpu6050_readBytes+0x5a>
			else
				data[i] = i2c_readAck();
    1026:	c2 d3       	rcall	.+1924   	; 0x17ac <i2c_readAck>
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24
    102c:	21 96       	adiw	r28, 0x01	; 1
    102e:	0f 5f       	subi	r16, 0xFF	; 255
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
    1032:	cd 15       	cp	r28, r13
    1034:	88 f3       	brcs	.-30     	; 0x1018 <mpu6050_readBytes+0x46>
    1036:	1d 2d       	mov	r17, r13
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
    1038:	88 d3       	rcall	.+1808   	; 0x174a <i2c_stop>
	}
	return count;
}
    103a:	81 2f       	mov	r24, r17
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	08 95       	ret

0000104c <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	6c 01       	movw	r12, r24
    106a:	5b 01       	movw	r10, r22
    106c:	4a 01       	movw	r8, r20
    106e:	39 01       	movw	r6, r18
    1070:	28 01       	movw	r4, r16
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    1072:	0a ec       	ldi	r16, 0xCA	; 202
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	8b e3       	ldi	r24, 0x3B	; 59
    1078:	6e e0       	ldi	r22, 0x0E	; 14
    107a:	a8 01       	movw	r20, r16
    107c:	aa df       	rcall	.-172    	; 0xfd2 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    107e:	f8 01       	movw	r30, r16
    1080:	41 91       	ld	r20, Z+
    1082:	20 81       	ld	r18, Z
    1084:	94 2f       	mov	r25, r20
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	82 2b       	or	r24, r18
    108c:	93 2b       	or	r25, r19
    108e:	f6 01       	movw	r30, r12
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1094:	f8 01       	movw	r30, r16
    1096:	32 96       	adiw	r30, 0x02	; 2
    1098:	40 81       	ld	r20, Z
    109a:	f8 01       	movw	r30, r16
    109c:	33 96       	adiw	r30, 0x03	; 3
    109e:	20 81       	ld	r18, Z
    10a0:	94 2f       	mov	r25, r20
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	82 2b       	or	r24, r18
    10a8:	93 2b       	or	r25, r19
    10aa:	f5 01       	movw	r30, r10
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    10b0:	f8 01       	movw	r30, r16
    10b2:	34 96       	adiw	r30, 0x04	; 4
    10b4:	40 81       	ld	r20, Z
    10b6:	f8 01       	movw	r30, r16
    10b8:	35 96       	adiw	r30, 0x05	; 5
    10ba:	20 81       	ld	r18, Z
    10bc:	94 2f       	mov	r25, r20
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	82 2b       	or	r24, r18
    10c4:	93 2b       	or	r25, r19
    10c6:	f4 01       	movw	r30, r8
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    10cc:	f8 01       	movw	r30, r16
    10ce:	38 96       	adiw	r30, 0x08	; 8
    10d0:	40 81       	ld	r20, Z
    10d2:	f8 01       	movw	r30, r16
    10d4:	39 96       	adiw	r30, 0x09	; 9
    10d6:	20 81       	ld	r18, Z
    10d8:	94 2f       	mov	r25, r20
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	82 2b       	or	r24, r18
    10e0:	93 2b       	or	r25, r19
    10e2:	f3 01       	movw	r30, r6
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	80 83       	st	Z, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    10e8:	f8 01       	movw	r30, r16
    10ea:	3a 96       	adiw	r30, 0x0a	; 10
    10ec:	40 81       	ld	r20, Z
    10ee:	f8 01       	movw	r30, r16
    10f0:	3b 96       	adiw	r30, 0x0b	; 11
    10f2:	20 81       	ld	r18, Z
    10f4:	94 2f       	mov	r25, r20
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	82 2b       	or	r24, r18
    10fc:	93 2b       	or	r25, r19
    10fe:	f2 01       	movw	r30, r4
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1104:	f8 01       	movw	r30, r16
    1106:	3c 96       	adiw	r30, 0x0c	; 12
    1108:	40 81       	ld	r20, Z
    110a:	03 5f       	subi	r16, 0xF3	; 243
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	f8 01       	movw	r30, r16
    1110:	20 81       	ld	r18, Z
    1112:	94 2f       	mov	r25, r20
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	82 2b       	or	r24, r18
    111a:	93 2b       	or	r25, r19
    111c:	f7 01       	movw	r30, r14
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
}
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	7f 90       	pop	r7
    1138:	6f 90       	pop	r6
    113a:	5f 90       	pop	r5
    113c:	4f 90       	pop	r4
    113e:	08 95       	ret

00001140 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	2c 97       	sbiw	r28, 0x0c	; 12
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	6c 01       	movw	r12, r24
    1176:	5b 01       	movw	r10, r22
    1178:	4a 01       	movw	r8, r20
    117a:	39 01       	movw	r6, r18
    117c:	28 01       	movw	r4, r16
    117e:	17 01       	movw	r2, r14
	int16_t ax = 0;
    1180:	1a 82       	std	Y+2, r1	; 0x02
    1182:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
    1184:	1c 82       	std	Y+4, r1	; 0x04
    1186:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
    1188:	1e 82       	std	Y+6, r1	; 0x06
    118a:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
    118c:	18 86       	std	Y+8, r1	; 0x08
    118e:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
    1190:	1a 86       	std	Y+10, r1	; 0x0a
    1192:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
    1194:	1c 86       	std	Y+12, r1	; 0x0c
    1196:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	be 01       	movw	r22, r28
    119e:	6d 5f       	subi	r22, 0xFD	; 253
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	ae 01       	movw	r20, r28
    11a4:	4b 5f       	subi	r20, 0xFB	; 251
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	9e 01       	movw	r18, r28
    11aa:	29 5f       	subi	r18, 0xF9	; 249
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	8e 01       	movw	r16, r28
    11b0:	07 5f       	subi	r16, 0xF7	; 247
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	0f 2e       	mov	r0, r31
    11b6:	fb e0       	ldi	r31, 0x0B	; 11
    11b8:	ef 2e       	mov	r14, r31
    11ba:	ff 24       	eor	r15, r15
    11bc:	f0 2d       	mov	r31, r0
    11be:	ec 0e       	add	r14, r28
    11c0:	fd 1e       	adc	r15, r29
    11c2:	44 df       	rcall	.-376    	; 0x104c <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    11c4:	69 81       	ldd	r22, Y+1	; 0x01
    11c6:	7a 81       	ldd	r23, Y+2	; 0x02
    11c8:	88 27       	eor	r24, r24
    11ca:	77 fd       	sbrc	r23, 7
    11cc:	80 95       	com	r24
    11ce:	98 2f       	mov	r25, r24
    11d0:	f4 d3       	rcall	.+2024   	; 0x19ba <__floatsisf>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	58 e3       	ldi	r21, 0x38	; 56
    11da:	a3 d4       	rcall	.+2374   	; 0x1b22 <__mulsf3>
    11dc:	f6 01       	movw	r30, r12
    11de:	60 83       	st	Z, r22
    11e0:	71 83       	std	Z+1, r23	; 0x01
    11e2:	82 83       	std	Z+2, r24	; 0x02
    11e4:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    11e6:	6b 81       	ldd	r22, Y+3	; 0x03
    11e8:	7c 81       	ldd	r23, Y+4	; 0x04
    11ea:	88 27       	eor	r24, r24
    11ec:	77 fd       	sbrc	r23, 7
    11ee:	80 95       	com	r24
    11f0:	98 2f       	mov	r25, r24
    11f2:	e3 d3       	rcall	.+1990   	; 0x19ba <__floatsisf>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	58 e3       	ldi	r21, 0x38	; 56
    11fc:	92 d4       	rcall	.+2340   	; 0x1b22 <__mulsf3>
    11fe:	f5 01       	movw	r30, r10
    1200:	60 83       	st	Z, r22
    1202:	71 83       	std	Z+1, r23	; 0x01
    1204:	82 83       	std	Z+2, r24	; 0x02
    1206:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    1208:	6d 81       	ldd	r22, Y+5	; 0x05
    120a:	7e 81       	ldd	r23, Y+6	; 0x06
    120c:	88 27       	eor	r24, r24
    120e:	77 fd       	sbrc	r23, 7
    1210:	80 95       	com	r24
    1212:	98 2f       	mov	r25, r24
    1214:	d2 d3       	rcall	.+1956   	; 0x19ba <__floatsisf>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	58 e3       	ldi	r21, 0x38	; 56
    121e:	81 d4       	rcall	.+2306   	; 0x1b22 <__mulsf3>
    1220:	f4 01       	movw	r30, r8
    1222:	60 83       	st	Z, r22
    1224:	71 83       	std	Z+1, r23	; 0x01
    1226:	82 83       	std	Z+2, r24	; 0x02
    1228:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	66 5d       	subi	r22, 0xD6	; 214
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	88 27       	eor	r24, r24
    1234:	77 fd       	sbrc	r23, 7
    1236:	80 95       	com	r24
    1238:	98 2f       	mov	r25, r24
    123a:	bf d3       	rcall	.+1918   	; 0x19ba <__floatsisf>
    123c:	23 e3       	ldi	r18, 0x33	; 51
    123e:	33 e3       	ldi	r19, 0x33	; 51
    1240:	43 e8       	ldi	r20, 0x83	; 131
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	50 d3       	rcall	.+1696   	; 0x18e6 <__divsf3>
    1246:	f3 01       	movw	r30, r6
    1248:	60 83       	st	Z, r22
    124a:	71 83       	std	Z+1, r23	; 0x01
    124c:	82 83       	std	Z+2, r24	; 0x02
    124e:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
    1250:	69 85       	ldd	r22, Y+9	; 0x09
    1252:	7a 85       	ldd	r23, Y+10	; 0x0a
    1254:	69 50       	subi	r22, 0x09	; 9
    1256:	70 40       	sbci	r23, 0x00	; 0
    1258:	88 27       	eor	r24, r24
    125a:	77 fd       	sbrc	r23, 7
    125c:	80 95       	com	r24
    125e:	98 2f       	mov	r25, r24
    1260:	ac d3       	rcall	.+1880   	; 0x19ba <__floatsisf>
    1262:	23 e3       	ldi	r18, 0x33	; 51
    1264:	33 e3       	ldi	r19, 0x33	; 51
    1266:	43 e8       	ldi	r20, 0x83	; 131
    1268:	51 e4       	ldi	r21, 0x41	; 65
    126a:	3d d3       	rcall	.+1658   	; 0x18e6 <__divsf3>
    126c:	f2 01       	movw	r30, r4
    126e:	60 83       	st	Z, r22
    1270:	71 83       	std	Z+1, r23	; 0x01
    1272:	82 83       	std	Z+2, r24	; 0x02
    1274:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	63 5e       	subi	r22, 0xE3	; 227
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	88 27       	eor	r24, r24
    1280:	77 fd       	sbrc	r23, 7
    1282:	80 95       	com	r24
    1284:	98 2f       	mov	r25, r24
    1286:	99 d3       	rcall	.+1842   	; 0x19ba <__floatsisf>
    1288:	23 e3       	ldi	r18, 0x33	; 51
    128a:	33 e3       	ldi	r19, 0x33	; 51
    128c:	43 e8       	ldi	r20, 0x83	; 131
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	2a d3       	rcall	.+1620   	; 0x18e6 <__divsf3>
    1292:	f1 01       	movw	r30, r2
    1294:	60 83       	st	Z, r22
    1296:	71 83       	std	Z+1, r23	; 0x01
    1298:	82 83       	std	Z+2, r24	; 0x02
    129a:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
    129c:	2c 96       	adiw	r28, 0x0c	; 12
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	7f 90       	pop	r7
    12c2:	6f 90       	pop	r6
    12c4:	5f 90       	pop	r5
    12c6:	4f 90       	pop	r4
    12c8:	3f 90       	pop	r3
    12ca:	2f 90       	pop	r2
    12cc:	08 95       	ret

000012ce <mpu6050_readByte>:
}

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
    12ce:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	7f de       	rcall	.-770    	; 0xfd2 <mpu6050_readBytes>
}
    12d4:	08 95       	ret

000012d6 <mpu6050_writeBit>:
}

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	f8 2e       	mov	r15, r24
    12e8:	06 2f       	mov	r16, r22
    12ea:	14 2f       	mov	r17, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
    12ec:	be 01       	movw	r22, r28
    12ee:	6f 5f       	subi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	ed df       	rcall	.-38     	; 0x12ce <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    12f4:	11 23       	and	r17, r17
    12f6:	59 f0       	breq	.+22     	; 0x130e <mpu6050_writeBit+0x38>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <mpu6050_writeBit+0x2c>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 95       	dec	r16
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <mpu6050_writeBit+0x28>
    1306:	29 81       	ldd	r18, Y+1	; 0x01
    1308:	62 2f       	mov	r22, r18
    130a:	68 2b       	or	r22, r24
    130c:	0b c0       	rjmp	.+22     	; 0x1324 <mpu6050_writeBit+0x4e>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <mpu6050_writeBit+0x42>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 95       	dec	r16
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <mpu6050_writeBit+0x3e>
    131c:	80 95       	com	r24
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	68 2f       	mov	r22, r24
    1322:	62 23       	and	r22, r18
    1324:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
    1326:	8f 2d       	mov	r24, r15
    1328:	45 de       	rcall	.-886    	; 0xfb4 <mpu6050_writeByte>
}
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	08 95       	ret

00001338 <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
    1338:	8b e6       	ldi	r24, 0x6B	; 107
    133a:	66 e0       	ldi	r22, 0x06	; 6
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	cb df       	rcall	.-106    	; 0x12d6 <mpu6050_writeBit>
}
    1340:	08 95       	ret

00001342 <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	e8 2e       	mov	r14, r24
    1356:	06 2f       	mov	r16, r22
    1358:	14 2f       	mov	r17, r20
    135a:	f2 2e       	mov	r15, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
    135c:	44 23       	and	r20, r20
    135e:	69 f1       	breq	.+90     	; 0x13ba <mpu6050_writeBits+0x78>
		uint8_t b = 0;
    1360:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	b2 df       	rcall	.-156    	; 0x12ce <mpu6050_readByte>
    136a:	88 23       	and	r24, r24
    136c:	31 f1       	breq	.+76     	; 0x13ba <mpu6050_writeBits+0x78>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    136e:	21 2f       	mov	r18, r17
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 2f       	mov	r20, r16
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	4f 5f       	subi	r20, 0xFF	; 255
    1378:	5f 4f       	sbci	r21, 0xFF	; 255
    137a:	42 1b       	sub	r20, r18
    137c:	53 0b       	sbc	r21, r19
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <mpu6050_writeBits+0x46>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a 95       	dec	r17
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <mpu6050_writeBits+0x42>
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	04 2e       	mov	r0, r20
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <mpu6050_writeBits+0x54>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <mpu6050_writeBits+0x50>
			data <<= (bitStart - length + 1); // shift data into correct position
    139a:	2f 2d       	mov	r18, r15
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <mpu6050_writeBits+0x62>
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	4a 95       	dec	r20
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <mpu6050_writeBits+0x5e>
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
    13a8:	68 2f       	mov	r22, r24
    13aa:	60 95       	com	r22
    13ac:	49 81       	ldd	r20, Y+1	; 0x01
    13ae:	64 23       	and	r22, r20
    13b0:	82 23       	and	r24, r18
    13b2:	68 2b       	or	r22, r24
    13b4:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
    13b6:	8e 2d       	mov	r24, r14
    13b8:	fd dd       	rcall	.-1030   	; 0xfb4 <mpu6050_writeByte>
		}
	}
}
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	08 95       	ret

000013ca <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
    13ca:	79 d1       	rcall	.+754    	; 0x16be <i2c_init>
    13cc:	85 e3       	ldi	r24, 0x35	; 53
    13ce:	8a 95       	dec	r24
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <mpu6050_init+0x4>
    13d2:	28 ee       	ldi	r18, 0xE8	; 232
    13d4:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d6:	40 e9       	ldi	r20, 0x90	; 144
    13d8:	51 e0       	ldi	r21, 0x01	; 1
    13da:	ca 01       	movw	r24, r20
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <mpu6050_init+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	21 50       	subi	r18, 0x01	; 1
    13e2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	d1 f7       	brne	.-12     	; 0x13da <mpu6050_init+0x10>

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
    13e6:	a8 df       	rcall	.-176    	; 0x1338 <mpu6050_setSleepDisabled>
    13e8:	80 e4       	ldi	r24, 0x40	; 64
    13ea:	9c e9       	ldi	r25, 0x9C	; 156
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <mpu6050_init+0x22>
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
    13f0:	8b e6       	ldi	r24, 0x6B	; 107
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	43 e0       	ldi	r20, 0x03	; 3
    13f6:	21 e0       	ldi	r18, 0x01	; 1
    13f8:	a4 df       	rcall	.-184    	; 0x1342 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
    13fa:	8a e1       	ldi	r24, 0x1A	; 26
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	43 e0       	ldi	r20, 0x03	; 3
    1400:	23 e0       	ldi	r18, 0x03	; 3
    1402:	9f df       	rcall	.-194    	; 0x1342 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
    1404:	89 e1       	ldi	r24, 0x19	; 25
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	d5 dd       	rcall	.-1110   	; 0xfb4 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
    140a:	8b e1       	ldi	r24, 0x1B	; 27
    140c:	64 e0       	ldi	r22, 0x04	; 4
    140e:	42 e0       	ldi	r20, 0x02	; 2
    1410:	23 e0       	ldi	r18, 0x03	; 3
    1412:	97 df       	rcall	.-210    	; 0x1342 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
    1414:	8c e1       	ldi	r24, 0x1C	; 28
    1416:	64 e0       	ldi	r22, 0x04	; 4
    1418:	42 e0       	ldi	r20, 0x02	; 2
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	92 df       	rcall	.-220    	; 0x1342 <mpu6050_writeBits>

}
    141e:	08 95       	ret

00001420 <mpu6050_readBit>:
}

/*
 * read 1 bit from chip register
 */
int8_t mpu6050_readBit(uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	0f 92       	push	r0
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	f6 2e       	mov	r15, r22
    1432:	8a 01       	movw	r16, r20
    uint8_t b;
    uint8_t count = mpu6050_readByte(regAddr, &b);
    1434:	be 01       	movw	r22, r28
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	49 df       	rcall	.-366    	; 0x12ce <mpu6050_readByte>
    *data = b & (1 << bitNum);
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <mpu6050_readBit+0x26>
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	fa 94       	dec	r15
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <mpu6050_readBit+0x22>
    144a:	99 81       	ldd	r25, Y+1	; 0x01
    144c:	92 23       	and	r25, r18
    144e:	f8 01       	movw	r30, r16
    1450:	90 83       	st	Z, r25
    return count;
}
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	08 95       	ret

00001460 <mpu6050_updateQuaternion>:
}

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    1460:	2f 92       	push	r2
    1462:	3f 92       	push	r3
    1464:	4f 92       	push	r4
    1466:	5f 92       	push	r5
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <mpu6050_updateQuaternion+0x26>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <mpu6050_updateQuaternion+0x28>
    1488:	00 d0       	rcall	.+0      	; 0x148a <mpu6050_updateQuaternion+0x2a>
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    148e:	0f 2e       	mov	r0, r31
    1490:	fa ec       	ldi	r31, 0xCA	; 202
    1492:	ef 2e       	mov	r14, r31
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	ff 2e       	mov	r15, r31
    1498:	f0 2d       	mov	r31, r0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    149a:	15 e3       	ldi	r17, 0x35	; 53
    149c:	8a e3       	ldi	r24, 0x3A	; 58
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	a7 01       	movw	r20, r14
    14a2:	be df       	rcall	.-132    	; 0x1420 <mpu6050_readBit>
		if(buffer[0])
    14a4:	f7 01       	movw	r30, r14
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <mpu6050_updateQuaternion+0x54>
    14ac:	81 2f       	mov	r24, r17
    14ae:	8a 95       	dec	r24
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <mpu6050_updateQuaternion+0x4e>
    14b2:	f4 cf       	rjmp	.-24     	; 0x149c <mpu6050_updateQuaternion+0x3c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    14b4:	0a ec       	ldi	r16, 0xCA	; 202
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	8b e3       	ldi	r24, 0x3B	; 59
    14ba:	6e e0       	ldi	r22, 0x0E	; 14
    14bc:	a8 01       	movw	r20, r16
    14be:	89 dd       	rcall	.-1262   	; 0xfd2 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    14c0:	f8 01       	movw	r30, r16
    14c2:	d1 90       	ld	r13, Z+
    14c4:	c0 80       	ld	r12, Z
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    14c6:	f8 01       	movw	r30, r16
    14c8:	32 96       	adiw	r30, 0x02	; 2
    14ca:	90 80       	ld	r9, Z
    14cc:	f8 01       	movw	r30, r16
    14ce:	33 96       	adiw	r30, 0x03	; 3
    14d0:	80 80       	ld	r8, Z
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    14d2:	f8 01       	movw	r30, r16
    14d4:	34 96       	adiw	r30, 0x04	; 4
    14d6:	70 80       	ld	r7, Z
    14d8:	f8 01       	movw	r30, r16
    14da:	35 96       	adiw	r30, 0x05	; 5
    14dc:	60 80       	ld	r6, Z
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    14de:	f8 01       	movw	r30, r16
    14e0:	38 96       	adiw	r30, 0x08	; 8
    14e2:	40 81       	ld	r20, Z
    14e4:	f8 01       	movw	r30, r16
    14e6:	39 96       	adiw	r30, 0x09	; 9
    14e8:	20 81       	ld	r18, Z
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    14ea:	f8 01       	movw	r30, r16
    14ec:	3a 96       	adiw	r30, 0x0a	; 10
    14ee:	b0 80       	ld	r11, Z
    14f0:	f8 01       	movw	r30, r16
    14f2:	3b 96       	adiw	r30, 0x0b	; 11
    14f4:	e0 80       	ld	r14, Z
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    14f6:	f8 01       	movw	r30, r16
    14f8:	3c 96       	adiw	r30, 0x0c	; 12
    14fa:	a0 80       	ld	r10, Z
    14fc:	03 5f       	subi	r16, 0xF3	; 243
    14fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1500:	f8 01       	movw	r30, r16
    1502:	00 81       	ld	r16, Z
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    1504:	8d b7       	in	r24, 0x3d	; 61
    1506:	9e b7       	in	r25, 0x3e	; 62
    1508:	08 97       	sbiw	r24, 0x08	; 8
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	9e bf       	out	0x3e, r25	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	8d bf       	out	0x3d, r24	; 61
    1514:	ed b7       	in	r30, 0x3d	; 61
    1516:	fe b7       	in	r31, 0x3e	; 62
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	fe 83       	std	Y+6, r31	; 0x06
    151c:	ed 83       	std	Y+5, r30	; 0x05
    151e:	74 2f       	mov	r23, r20
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	62 2b       	or	r22, r18
    1526:	73 2b       	or	r23, r19
    1528:	66 5d       	subi	r22, 0xD6	; 214
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	88 27       	eor	r24, r24
    152e:	77 fd       	sbrc	r23, 7
    1530:	80 95       	com	r24
    1532:	98 2f       	mov	r25, r24
    1534:	42 d2       	rcall	.+1156   	; 0x19ba <__floatsisf>
    1536:	23 e3       	ldi	r18, 0x33	; 51
    1538:	33 e3       	ldi	r19, 0x33	; 51
    153a:	43 e8       	ldi	r20, 0x83	; 131
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	d3 d1       	rcall	.+934    	; 0x18e6 <__divsf3>
    1540:	24 e3       	ldi	r18, 0x34	; 52
    1542:	3a ef       	ldi	r19, 0xFA	; 250
    1544:	4e e8       	ldi	r20, 0x8E	; 142
    1546:	5c e3       	ldi	r21, 0x3C	; 60
    1548:	ec d2       	rcall	.+1496   	; 0x1b22 <__mulsf3>
    154a:	69 83       	std	Y+1, r22	; 0x01
    154c:	7a 83       	std	Y+2, r23	; 0x02
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	9c 83       	std	Y+4, r25	; 0x04
    1552:	7b 2d       	mov	r23, r11
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	ff 24       	eor	r15, r15
    1558:	6e 29       	or	r22, r14
    155a:	7f 29       	or	r23, r15
    155c:	69 50       	subi	r22, 0x09	; 9
    155e:	70 40       	sbci	r23, 0x00	; 0
    1560:	88 27       	eor	r24, r24
    1562:	77 fd       	sbrc	r23, 7
    1564:	80 95       	com	r24
    1566:	98 2f       	mov	r25, r24
    1568:	28 d2       	rcall	.+1104   	; 0x19ba <__floatsisf>
    156a:	23 e3       	ldi	r18, 0x33	; 51
    156c:	33 e3       	ldi	r19, 0x33	; 51
    156e:	43 e8       	ldi	r20, 0x83	; 131
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	b9 d1       	rcall	.+882    	; 0x18e6 <__divsf3>
    1574:	24 e3       	ldi	r18, 0x34	; 52
    1576:	3a ef       	ldi	r19, 0xFA	; 250
    1578:	4e e8       	ldi	r20, 0x8E	; 142
    157a:	5c e3       	ldi	r21, 0x3C	; 60
    157c:	d2 d2       	rcall	.+1444   	; 0x1b22 <__mulsf3>
    157e:	1b 01       	movw	r2, r22
    1580:	2c 01       	movw	r4, r24
    1582:	7a 2d       	mov	r23, r10
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	60 2b       	or	r22, r16
    158a:	71 2b       	or	r23, r17
    158c:	63 5e       	subi	r22, 0xE3	; 227
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	88 27       	eor	r24, r24
    1592:	77 fd       	sbrc	r23, 7
    1594:	80 95       	com	r24
    1596:	98 2f       	mov	r25, r24
    1598:	10 d2       	rcall	.+1056   	; 0x19ba <__floatsisf>
    159a:	23 e3       	ldi	r18, 0x33	; 51
    159c:	33 e3       	ldi	r19, 0x33	; 51
    159e:	43 e8       	ldi	r20, 0x83	; 131
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	a1 d1       	rcall	.+834    	; 0x18e6 <__divsf3>
    15a4:	24 e3       	ldi	r18, 0x34	; 52
    15a6:	3a ef       	ldi	r19, 0xFA	; 250
    15a8:	4e e8       	ldi	r20, 0x8E	; 142
    15aa:	5c e3       	ldi	r21, 0x3C	; 60
    15ac:	ba d2       	rcall	.+1396   	; 0x1b22 <__mulsf3>
    15ae:	7b 01       	movw	r14, r22
    15b0:	8c 01       	movw	r16, r24
    15b2:	7d 2d       	mov	r23, r13
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	dd 24       	eor	r13, r13
    15b8:	6c 29       	or	r22, r12
    15ba:	7d 29       	or	r23, r13
    15bc:	88 27       	eor	r24, r24
    15be:	77 fd       	sbrc	r23, 7
    15c0:	80 95       	com	r24
    15c2:	98 2f       	mov	r25, r24
    15c4:	fa d1       	rcall	.+1012   	; 0x19ba <__floatsisf>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	58 e3       	ldi	r21, 0x38	; 56
    15ce:	a9 d2       	rcall	.+1362   	; 0x1b22 <__mulsf3>
    15d0:	5b 01       	movw	r10, r22
    15d2:	6c 01       	movw	r12, r24
    15d4:	79 2d       	mov	r23, r9
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	99 24       	eor	r9, r9
    15da:	68 29       	or	r22, r8
    15dc:	79 29       	or	r23, r9
    15de:	88 27       	eor	r24, r24
    15e0:	77 fd       	sbrc	r23, 7
    15e2:	80 95       	com	r24
    15e4:	98 2f       	mov	r25, r24
    15e6:	e9 d1       	rcall	.+978    	; 0x19ba <__floatsisf>
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	58 e3       	ldi	r21, 0x38	; 56
    15f0:	98 d2       	rcall	.+1328   	; 0x1b22 <__mulsf3>
    15f2:	ed 81       	ldd	r30, Y+5	; 0x05
    15f4:	fe 81       	ldd	r31, Y+6	; 0x06
    15f6:	60 83       	st	Z, r22
    15f8:	71 83       	std	Z+1, r23	; 0x01
    15fa:	82 83       	std	Z+2, r24	; 0x02
    15fc:	93 83       	std	Z+3, r25	; 0x03
    15fe:	77 2d       	mov	r23, r7
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	77 24       	eor	r7, r7
    1604:	66 29       	or	r22, r6
    1606:	77 29       	or	r23, r7
    1608:	88 27       	eor	r24, r24
    160a:	77 fd       	sbrc	r23, 7
    160c:	80 95       	com	r24
    160e:	98 2f       	mov	r25, r24
    1610:	d4 d1       	rcall	.+936    	; 0x19ba <__floatsisf>
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	58 e3       	ldi	r21, 0x38	; 56
    161a:	83 d2       	rcall	.+1286   	; 0x1b22 <__mulsf3>
    161c:	ed 81       	ldd	r30, Y+5	; 0x05
    161e:	fe 81       	ldd	r31, Y+6	; 0x06
    1620:	64 83       	std	Z+4, r22	; 0x04
    1622:	75 83       	std	Z+5, r23	; 0x05
    1624:	86 83       	std	Z+6, r24	; 0x06
    1626:	97 83       	std	Z+7, r25	; 0x07
    1628:	69 81       	ldd	r22, Y+1	; 0x01
    162a:	7a 81       	ldd	r23, Y+2	; 0x02
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	a2 01       	movw	r20, r4
    1632:	91 01       	movw	r18, r2
    1634:	3d d8       	rcall	.-3974   	; 0x6b0 <mpu6050_mahonyUpdate>
    1636:	8d b7       	in	r24, 0x3d	; 61
    1638:	9e b7       	in	r25, 0x3e	; 62
    163a:	08 96       	adiw	r24, 0x08	; 8
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	9e bf       	out	0x3e, r25	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	8d bf       	out	0x3d, r24	; 61
}
    1646:	26 96       	adiw	r28, 0x06	; 6
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	7f 90       	pop	r7
    166c:	6f 90       	pop	r6
    166e:	5f 90       	pop	r5
    1670:	4f 90       	pop	r4
    1672:	3f 90       	pop	r3
    1674:	2f 90       	pop	r2
    1676:	08 95       	ret

00001678 <__vector_9>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    169a:	e2 de       	rcall	.-572    	; 0x1460 <mpu6050_updateQuaternion>
}
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    16be:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
    16c4:	08 95       	ret

000016c6 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    16c6:	98 2f       	mov	r25, r24
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    16c8:	84 ea       	ldi	r24, 0xA4	; 164
    16ca:	86 bf       	out	0x36, r24	; 54
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    16d4:	e6 e5       	ldi	r30, 0x56	; 86
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 23       	and	r24, r24
    16dc:	34 f0       	brlt	.+12     	; 0x16ea <i2c_start+0x24>
    16de:	21 50       	subi	r18, 0x01	; 1
    16e0:	31 09       	sbc	r19, r1
    16e2:	41 09       	sbc	r20, r1
    16e4:	51 09       	sbc	r21, r1
    16e6:	c0 f7       	brcc	.-16     	; 0x16d8 <i2c_start+0x12>
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <i2c_start+0x2e>
	if(i2c_timer == 0)
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	41 05       	cpc	r20, r1
    16f0:	51 05       	cpc	r21, r1
    16f2:	49 f1       	breq	.+82     	; 0x1746 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    16f4:	81 b1       	in	r24, 0x01	; 1
    16f6:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	11 f0       	breq	.+4      	; 0x1700 <i2c_start+0x3a>
    16fc:	80 31       	cpi	r24, 0x10	; 16
    16fe:	19 f5       	brne	.+70     	; 0x1746 <i2c_start+0x80>

	// send device address
	TWDR = address;
    1700:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1702:	84 e8       	ldi	r24, 0x84	; 132
    1704:	86 bf       	out	0x36, r24	; 54
    1706:	2f ef       	ldi	r18, 0xFF	; 255
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	50 e0       	ldi	r21, 0x00	; 0

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    170e:	e6 e5       	ldi	r30, 0x56	; 86
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 23       	and	r24, r24
    1716:	34 f0       	brlt	.+12     	; 0x1724 <i2c_start+0x5e>
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	31 09       	sbc	r19, r1
    171c:	41 09       	sbc	r20, r1
    171e:	51 09       	sbc	r21, r1
    1720:	c0 f7       	brcc	.-16     	; 0x1712 <i2c_start+0x4c>
    1722:	05 c0       	rjmp	.+10     	; 0x172e <i2c_start+0x68>
	if(i2c_timer == 0)
    1724:	21 15       	cp	r18, r1
    1726:	31 05       	cpc	r19, r1
    1728:	41 05       	cpc	r20, r1
    172a:	51 05       	cpc	r21, r1
    172c:	61 f0       	breq	.+24     	; 0x1746 <i2c_start+0x80>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    172e:	81 b1       	in	r24, 0x01	; 1
    1730:	98 2f       	mov	r25, r24
    1732:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1734:	98 31       	cpi	r25, 0x18	; 24
    1736:	11 f4       	brne	.+4      	; 0x173c <i2c_start+0x76>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 34       	cpi	r25, 0x40	; 64
    1740:	19 f0       	breq	.+6      	; 0x1748 <i2c_start+0x82>
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	08 95       	ret
    1746:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    1748:	08 95       	ret

0000174a <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    174a:	84 e9       	ldi	r24, 0x94	; 148
    174c:	86 bf       	out	0x36, r24	; 54
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1752:	e6 e5       	ldi	r30, 0x56	; 86
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	84 ff       	sbrs	r24, 4
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <i2c_stop+0x1e>
    175c:	2f 5f       	subi	r18, 0xFF	; 255
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	20 30       	cpi	r18, 0x00	; 0
    1764:	38 07       	cpc	r19, r24
    1766:	b9 f7       	brne	.-18     	; 0x1756 <i2c_stop+0xc>
    1768:	08 95       	ret

0000176a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    176a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    176c:	84 e8       	ldi	r24, 0x84	; 132
    176e:	86 bf       	out	0x36, r24	; 54
    1770:	2f ef       	ldi	r18, 0xFF	; 255
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1778:	e6 e5       	ldi	r30, 0x56	; 86
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	88 23       	and	r24, r24
    1780:	34 f0       	brlt	.+12     	; 0x178e <i2c_write+0x24>
    1782:	21 50       	subi	r18, 0x01	; 1
    1784:	31 09       	sbc	r19, r1
    1786:	41 09       	sbc	r20, r1
    1788:	51 09       	sbc	r21, r1
    178a:	c0 f7       	brcc	.-16     	; 0x177c <i2c_write+0x12>
    178c:	07 c0       	rjmp	.+14     	; 0x179c <i2c_write+0x32>
	if(i2c_timer == 0)
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	41 05       	cpc	r20, r1
    1794:	51 05       	cpc	r21, r1
    1796:	11 f4       	brne	.+4      	; 0x179c <i2c_write+0x32>
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    179c:	81 b1       	in	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	88 32       	cpi	r24, 0x28	; 40
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <i2c_write+0x3e>
    17a6:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    17a8:	89 2f       	mov	r24, r25
    17aa:	08 95       	ret

000017ac <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    17ac:	84 ec       	ldi	r24, 0xC4	; 196
    17ae:	86 bf       	out	0x36, r24	; 54
    17b0:	2f ef       	ldi	r18, 0xFF	; 255
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    17b8:	e6 e5       	ldi	r30, 0x56	; 86
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	88 23       	and	r24, r24
    17c0:	34 f0       	brlt	.+12     	; 0x17ce <i2c_readAck+0x22>
    17c2:	21 50       	subi	r18, 0x01	; 1
    17c4:	31 09       	sbc	r19, r1
    17c6:	41 09       	sbc	r20, r1
    17c8:	51 09       	sbc	r21, r1
    17ca:	c0 f7       	brcc	.-16     	; 0x17bc <i2c_readAck+0x10>
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <i2c_readAck+0x30>
	if(i2c_timer == 0)
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	41 05       	cpc	r20, r1
    17d4:	51 05       	cpc	r21, r1
    17d6:	11 f4       	brne	.+4      	; 0x17dc <i2c_readAck+0x30>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	08 95       	ret
		return 0;

    return TWDR;
    17dc:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
    17de:	08 95       	ret

000017e0 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
    17e0:	84 e8       	ldi	r24, 0x84	; 132
    17e2:	86 bf       	out	0x36, r24	; 54
    17e4:	2f ef       	ldi	r18, 0xFF	; 255
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    17ec:	e6 e5       	ldi	r30, 0x56	; 86
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 23       	and	r24, r24
    17f4:	34 f0       	brlt	.+12     	; 0x1802 <i2c_readNak+0x22>
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	31 09       	sbc	r19, r1
    17fa:	41 09       	sbc	r20, r1
    17fc:	51 09       	sbc	r21, r1
    17fe:	c0 f7       	brcc	.-16     	; 0x17f0 <i2c_readNak+0x10>
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <i2c_readNak+0x30>
	if(i2c_timer == 0)
    1802:	21 15       	cp	r18, r1
    1804:	31 05       	cpc	r19, r1
    1806:	41 05       	cpc	r20, r1
    1808:	51 05       	cpc	r21, r1
    180a:	11 f4       	brne	.+4      	; 0x1810 <i2c_readNak+0x30>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	08 95       	ret
		return 0;
	
    return TWDR;
    1810:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
    1812:	08 95       	ret

00001814 <__subsf3>:
    1814:	50 58       	subi	r21, 0x80	; 128

00001816 <__addsf3>:
    1816:	bb 27       	eor	r27, r27
    1818:	aa 27       	eor	r26, r26
    181a:	0e d0       	rcall	.+28     	; 0x1838 <__addsf3x>
    181c:	44 c1       	rjmp	.+648    	; 0x1aa6 <__fp_round>
    181e:	35 d1       	rcall	.+618    	; 0x1a8a <__fp_pscA>
    1820:	30 f0       	brcs	.+12     	; 0x182e <__addsf3+0x18>
    1822:	3a d1       	rcall	.+628    	; 0x1a98 <__fp_pscB>
    1824:	20 f0       	brcs	.+8      	; 0x182e <__addsf3+0x18>
    1826:	31 f4       	brne	.+12     	; 0x1834 <__addsf3+0x1e>
    1828:	9f 3f       	cpi	r25, 0xFF	; 255
    182a:	11 f4       	brne	.+4      	; 0x1830 <__addsf3+0x1a>
    182c:	1e f4       	brtc	.+6      	; 0x1834 <__addsf3+0x1e>
    182e:	2a c1       	rjmp	.+596    	; 0x1a84 <__fp_nan>
    1830:	0e f4       	brtc	.+2      	; 0x1834 <__addsf3+0x1e>
    1832:	e0 95       	com	r30
    1834:	e7 fb       	bst	r30, 7
    1836:	20 c1       	rjmp	.+576    	; 0x1a78 <__fp_inf>

00001838 <__addsf3x>:
    1838:	e9 2f       	mov	r30, r25
    183a:	46 d1       	rcall	.+652    	; 0x1ac8 <__fp_split3>
    183c:	80 f3       	brcs	.-32     	; 0x181e <__addsf3+0x8>
    183e:	ba 17       	cp	r27, r26
    1840:	62 07       	cpc	r22, r18
    1842:	73 07       	cpc	r23, r19
    1844:	84 07       	cpc	r24, r20
    1846:	95 07       	cpc	r25, r21
    1848:	18 f0       	brcs	.+6      	; 0x1850 <__addsf3x+0x18>
    184a:	71 f4       	brne	.+28     	; 0x1868 <__addsf3x+0x30>
    184c:	9e f5       	brtc	.+102    	; 0x18b4 <__addsf3x+0x7c>
    184e:	5e c1       	rjmp	.+700    	; 0x1b0c <__fp_zero>
    1850:	0e f4       	brtc	.+2      	; 0x1854 <__addsf3x+0x1c>
    1852:	e0 95       	com	r30
    1854:	0b 2e       	mov	r0, r27
    1856:	ba 2f       	mov	r27, r26
    1858:	a0 2d       	mov	r26, r0
    185a:	0b 01       	movw	r0, r22
    185c:	b9 01       	movw	r22, r18
    185e:	90 01       	movw	r18, r0
    1860:	0c 01       	movw	r0, r24
    1862:	ca 01       	movw	r24, r20
    1864:	a0 01       	movw	r20, r0
    1866:	11 24       	eor	r1, r1
    1868:	ff 27       	eor	r31, r31
    186a:	59 1b       	sub	r21, r25
    186c:	99 f0       	breq	.+38     	; 0x1894 <__addsf3x+0x5c>
    186e:	59 3f       	cpi	r21, 0xF9	; 249
    1870:	50 f4       	brcc	.+20     	; 0x1886 <__addsf3x+0x4e>
    1872:	50 3e       	cpi	r21, 0xE0	; 224
    1874:	68 f1       	brcs	.+90     	; 0x18d0 <__addsf3x+0x98>
    1876:	1a 16       	cp	r1, r26
    1878:	f0 40       	sbci	r31, 0x00	; 0
    187a:	a2 2f       	mov	r26, r18
    187c:	23 2f       	mov	r18, r19
    187e:	34 2f       	mov	r19, r20
    1880:	44 27       	eor	r20, r20
    1882:	58 5f       	subi	r21, 0xF8	; 248
    1884:	f3 cf       	rjmp	.-26     	; 0x186c <__addsf3x+0x34>
    1886:	46 95       	lsr	r20
    1888:	37 95       	ror	r19
    188a:	27 95       	ror	r18
    188c:	a7 95       	ror	r26
    188e:	f0 40       	sbci	r31, 0x00	; 0
    1890:	53 95       	inc	r21
    1892:	c9 f7       	brne	.-14     	; 0x1886 <__addsf3x+0x4e>
    1894:	7e f4       	brtc	.+30     	; 0x18b4 <__addsf3x+0x7c>
    1896:	1f 16       	cp	r1, r31
    1898:	ba 0b       	sbc	r27, r26
    189a:	62 0b       	sbc	r22, r18
    189c:	73 0b       	sbc	r23, r19
    189e:	84 0b       	sbc	r24, r20
    18a0:	ba f0       	brmi	.+46     	; 0x18d0 <__addsf3x+0x98>
    18a2:	91 50       	subi	r25, 0x01	; 1
    18a4:	a1 f0       	breq	.+40     	; 0x18ce <__addsf3x+0x96>
    18a6:	ff 0f       	add	r31, r31
    18a8:	bb 1f       	adc	r27, r27
    18aa:	66 1f       	adc	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	c2 f7       	brpl	.-16     	; 0x18a2 <__addsf3x+0x6a>
    18b2:	0e c0       	rjmp	.+28     	; 0x18d0 <__addsf3x+0x98>
    18b4:	ba 0f       	add	r27, r26
    18b6:	62 1f       	adc	r22, r18
    18b8:	73 1f       	adc	r23, r19
    18ba:	84 1f       	adc	r24, r20
    18bc:	48 f4       	brcc	.+18     	; 0x18d0 <__addsf3x+0x98>
    18be:	87 95       	ror	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	f7 95       	ror	r31
    18c8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ca:	08 f0       	brcs	.+2      	; 0x18ce <__addsf3x+0x96>
    18cc:	b3 cf       	rjmp	.-154    	; 0x1834 <__addsf3+0x1e>
    18ce:	93 95       	inc	r25
    18d0:	88 0f       	add	r24, r24
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <__addsf3x+0x9e>
    18d4:	99 27       	eor	r25, r25
    18d6:	ee 0f       	add	r30, r30
    18d8:	97 95       	ror	r25
    18da:	87 95       	ror	r24
    18dc:	08 95       	ret

000018de <__cmpsf2>:
    18de:	a8 d0       	rcall	.+336    	; 0x1a30 <__fp_cmp>
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <__cmpsf2+0x6>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	08 95       	ret

000018e6 <__divsf3>:
    18e6:	0c d0       	rcall	.+24     	; 0x1900 <__divsf3x>
    18e8:	de c0       	rjmp	.+444    	; 0x1aa6 <__fp_round>
    18ea:	d6 d0       	rcall	.+428    	; 0x1a98 <__fp_pscB>
    18ec:	40 f0       	brcs	.+16     	; 0x18fe <__divsf3+0x18>
    18ee:	cd d0       	rcall	.+410    	; 0x1a8a <__fp_pscA>
    18f0:	30 f0       	brcs	.+12     	; 0x18fe <__divsf3+0x18>
    18f2:	21 f4       	brne	.+8      	; 0x18fc <__divsf3+0x16>
    18f4:	5f 3f       	cpi	r21, 0xFF	; 255
    18f6:	19 f0       	breq	.+6      	; 0x18fe <__divsf3+0x18>
    18f8:	bf c0       	rjmp	.+382    	; 0x1a78 <__fp_inf>
    18fa:	51 11       	cpse	r21, r1
    18fc:	08 c1       	rjmp	.+528    	; 0x1b0e <__fp_szero>
    18fe:	c2 c0       	rjmp	.+388    	; 0x1a84 <__fp_nan>

00001900 <__divsf3x>:
    1900:	e3 d0       	rcall	.+454    	; 0x1ac8 <__fp_split3>
    1902:	98 f3       	brcs	.-26     	; 0x18ea <__divsf3+0x4>

00001904 <__divsf3_pse>:
    1904:	99 23       	and	r25, r25
    1906:	c9 f3       	breq	.-14     	; 0x18fa <__divsf3+0x14>
    1908:	55 23       	and	r21, r21
    190a:	b1 f3       	breq	.-20     	; 0x18f8 <__divsf3+0x12>
    190c:	95 1b       	sub	r25, r21
    190e:	55 0b       	sbc	r21, r21
    1910:	bb 27       	eor	r27, r27
    1912:	aa 27       	eor	r26, r26
    1914:	62 17       	cp	r22, r18
    1916:	73 07       	cpc	r23, r19
    1918:	84 07       	cpc	r24, r20
    191a:	38 f0       	brcs	.+14     	; 0x192a <__divsf3_pse+0x26>
    191c:	9f 5f       	subi	r25, 0xFF	; 255
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	44 1f       	adc	r20, r20
    1926:	aa 1f       	adc	r26, r26
    1928:	a9 f3       	breq	.-22     	; 0x1914 <__divsf3_pse+0x10>
    192a:	33 d0       	rcall	.+102    	; 0x1992 <__divsf3_pse+0x8e>
    192c:	0e 2e       	mov	r0, r30
    192e:	3a f0       	brmi	.+14     	; 0x193e <__divsf3_pse+0x3a>
    1930:	e0 e8       	ldi	r30, 0x80	; 128
    1932:	30 d0       	rcall	.+96     	; 0x1994 <__divsf3_pse+0x90>
    1934:	91 50       	subi	r25, 0x01	; 1
    1936:	50 40       	sbci	r21, 0x00	; 0
    1938:	e6 95       	lsr	r30
    193a:	00 1c       	adc	r0, r0
    193c:	ca f7       	brpl	.-14     	; 0x1930 <__divsf3_pse+0x2c>
    193e:	29 d0       	rcall	.+82     	; 0x1992 <__divsf3_pse+0x8e>
    1940:	fe 2f       	mov	r31, r30
    1942:	27 d0       	rcall	.+78     	; 0x1992 <__divsf3_pse+0x8e>
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	88 1f       	adc	r24, r24
    194a:	bb 1f       	adc	r27, r27
    194c:	26 17       	cp	r18, r22
    194e:	37 07       	cpc	r19, r23
    1950:	48 07       	cpc	r20, r24
    1952:	ab 07       	cpc	r26, r27
    1954:	b0 e8       	ldi	r27, 0x80	; 128
    1956:	09 f0       	breq	.+2      	; 0x195a <__divsf3_pse+0x56>
    1958:	bb 0b       	sbc	r27, r27
    195a:	80 2d       	mov	r24, r0
    195c:	bf 01       	movw	r22, r30
    195e:	ff 27       	eor	r31, r31
    1960:	93 58       	subi	r25, 0x83	; 131
    1962:	5f 4f       	sbci	r21, 0xFF	; 255
    1964:	2a f0       	brmi	.+10     	; 0x1970 <__divsf3_pse+0x6c>
    1966:	9e 3f       	cpi	r25, 0xFE	; 254
    1968:	51 05       	cpc	r21, r1
    196a:	68 f0       	brcs	.+26     	; 0x1986 <__divsf3_pse+0x82>
    196c:	85 c0       	rjmp	.+266    	; 0x1a78 <__fp_inf>
    196e:	cf c0       	rjmp	.+414    	; 0x1b0e <__fp_szero>
    1970:	5f 3f       	cpi	r21, 0xFF	; 255
    1972:	ec f3       	brlt	.-6      	; 0x196e <__divsf3_pse+0x6a>
    1974:	98 3e       	cpi	r25, 0xE8	; 232
    1976:	dc f3       	brlt	.-10     	; 0x196e <__divsf3_pse+0x6a>
    1978:	86 95       	lsr	r24
    197a:	77 95       	ror	r23
    197c:	67 95       	ror	r22
    197e:	b7 95       	ror	r27
    1980:	f7 95       	ror	r31
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__divsf3_pse+0x74>
    1986:	88 0f       	add	r24, r24
    1988:	91 1d       	adc	r25, r1
    198a:	96 95       	lsr	r25
    198c:	87 95       	ror	r24
    198e:	97 f9       	bld	r25, 7
    1990:	08 95       	ret
    1992:	e1 e0       	ldi	r30, 0x01	; 1
    1994:	66 0f       	add	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	bb 1f       	adc	r27, r27
    199c:	62 17       	cp	r22, r18
    199e:	73 07       	cpc	r23, r19
    19a0:	84 07       	cpc	r24, r20
    19a2:	ba 07       	cpc	r27, r26
    19a4:	20 f0       	brcs	.+8      	; 0x19ae <__divsf3_pse+0xaa>
    19a6:	62 1b       	sub	r22, r18
    19a8:	73 0b       	sbc	r23, r19
    19aa:	84 0b       	sbc	r24, r20
    19ac:	ba 0b       	sbc	r27, r26
    19ae:	ee 1f       	adc	r30, r30
    19b0:	88 f7       	brcc	.-30     	; 0x1994 <__divsf3_pse+0x90>
    19b2:	e0 95       	com	r30
    19b4:	08 95       	ret

000019b6 <__floatunsisf>:
    19b6:	e8 94       	clt
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <__floatsisf+0x12>

000019ba <__floatsisf>:
    19ba:	97 fb       	bst	r25, 7
    19bc:	3e f4       	brtc	.+14     	; 0x19cc <__floatsisf+0x12>
    19be:	90 95       	com	r25
    19c0:	80 95       	com	r24
    19c2:	70 95       	com	r23
    19c4:	61 95       	neg	r22
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	99 23       	and	r25, r25
    19ce:	a9 f0       	breq	.+42     	; 0x19fa <__floatsisf+0x40>
    19d0:	f9 2f       	mov	r31, r25
    19d2:	96 e9       	ldi	r25, 0x96	; 150
    19d4:	bb 27       	eor	r27, r27
    19d6:	93 95       	inc	r25
    19d8:	f6 95       	lsr	r31
    19da:	87 95       	ror	r24
    19dc:	77 95       	ror	r23
    19de:	67 95       	ror	r22
    19e0:	b7 95       	ror	r27
    19e2:	f1 11       	cpse	r31, r1
    19e4:	f8 cf       	rjmp	.-16     	; 0x19d6 <__floatsisf+0x1c>
    19e6:	fa f4       	brpl	.+62     	; 0x1a26 <__floatsisf+0x6c>
    19e8:	bb 0f       	add	r27, r27
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <__floatsisf+0x36>
    19ec:	60 ff       	sbrs	r22, 0
    19ee:	1b c0       	rjmp	.+54     	; 0x1a26 <__floatsisf+0x6c>
    19f0:	6f 5f       	subi	r22, 0xFF	; 255
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <__floatsisf+0x6c>
    19fa:	88 23       	and	r24, r24
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <__floatsisf+0x48>
    19fe:	96 e9       	ldi	r25, 0x96	; 150
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <__floatsisf+0x6a>
    1a02:	77 23       	and	r23, r23
    1a04:	21 f0       	breq	.+8      	; 0x1a0e <__floatsisf+0x54>
    1a06:	9e e8       	ldi	r25, 0x8E	; 142
    1a08:	87 2f       	mov	r24, r23
    1a0a:	76 2f       	mov	r23, r22
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <__floatsisf+0x5e>
    1a0e:	66 23       	and	r22, r22
    1a10:	71 f0       	breq	.+28     	; 0x1a2e <__floatsisf+0x74>
    1a12:	96 e8       	ldi	r25, 0x86	; 134
    1a14:	86 2f       	mov	r24, r22
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	2a f0       	brmi	.+10     	; 0x1a26 <__floatsisf+0x6c>
    1a1c:	9a 95       	dec	r25
    1a1e:	66 0f       	add	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	da f7       	brpl	.-10     	; 0x1a1c <__floatsisf+0x62>
    1a26:	88 0f       	add	r24, r24
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	97 f9       	bld	r25, 7
    1a2e:	08 95       	ret

00001a30 <__fp_cmp>:
    1a30:	99 0f       	add	r25, r25
    1a32:	00 08       	sbc	r0, r0
    1a34:	55 0f       	add	r21, r21
    1a36:	aa 0b       	sbc	r26, r26
    1a38:	e0 e8       	ldi	r30, 0x80	; 128
    1a3a:	fe ef       	ldi	r31, 0xFE	; 254
    1a3c:	16 16       	cp	r1, r22
    1a3e:	17 06       	cpc	r1, r23
    1a40:	e8 07       	cpc	r30, r24
    1a42:	f9 07       	cpc	r31, r25
    1a44:	c0 f0       	brcs	.+48     	; 0x1a76 <__fp_cmp+0x46>
    1a46:	12 16       	cp	r1, r18
    1a48:	13 06       	cpc	r1, r19
    1a4a:	e4 07       	cpc	r30, r20
    1a4c:	f5 07       	cpc	r31, r21
    1a4e:	98 f0       	brcs	.+38     	; 0x1a76 <__fp_cmp+0x46>
    1a50:	62 1b       	sub	r22, r18
    1a52:	73 0b       	sbc	r23, r19
    1a54:	84 0b       	sbc	r24, r20
    1a56:	95 0b       	sbc	r25, r21
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <__fp_cmp+0x38>
    1a5a:	0a 26       	eor	r0, r26
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <__fp_cmp+0x46>
    1a5e:	23 2b       	or	r18, r19
    1a60:	24 2b       	or	r18, r20
    1a62:	25 2b       	or	r18, r21
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <__fp_cmp+0x3e>
    1a66:	08 95       	ret
    1a68:	0a 26       	eor	r0, r26
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <__fp_cmp+0x3e>
    1a6c:	a1 40       	sbci	r26, 0x01	; 1
    1a6e:	a6 95       	lsr	r26
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	81 1d       	adc	r24, r1
    1a74:	81 1d       	adc	r24, r1
    1a76:	08 95       	ret

00001a78 <__fp_inf>:
    1a78:	97 f9       	bld	r25, 7
    1a7a:	9f 67       	ori	r25, 0x7F	; 127
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	08 95       	ret

00001a84 <__fp_nan>:
    1a84:	9f ef       	ldi	r25, 0xFF	; 255
    1a86:	80 ec       	ldi	r24, 0xC0	; 192
    1a88:	08 95       	ret

00001a8a <__fp_pscA>:
    1a8a:	00 24       	eor	r0, r0
    1a8c:	0a 94       	dec	r0
    1a8e:	16 16       	cp	r1, r22
    1a90:	17 06       	cpc	r1, r23
    1a92:	18 06       	cpc	r1, r24
    1a94:	09 06       	cpc	r0, r25
    1a96:	08 95       	ret

00001a98 <__fp_pscB>:
    1a98:	00 24       	eor	r0, r0
    1a9a:	0a 94       	dec	r0
    1a9c:	12 16       	cp	r1, r18
    1a9e:	13 06       	cpc	r1, r19
    1aa0:	14 06       	cpc	r1, r20
    1aa2:	05 06       	cpc	r0, r21
    1aa4:	08 95       	ret

00001aa6 <__fp_round>:
    1aa6:	09 2e       	mov	r0, r25
    1aa8:	03 94       	inc	r0
    1aaa:	00 0c       	add	r0, r0
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__fp_round+0xc>
    1aae:	88 23       	and	r24, r24
    1ab0:	52 f0       	brmi	.+20     	; 0x1ac6 <__fp_round+0x20>
    1ab2:	bb 0f       	add	r27, r27
    1ab4:	40 f4       	brcc	.+16     	; 0x1ac6 <__fp_round+0x20>
    1ab6:	bf 2b       	or	r27, r31
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__fp_round+0x18>
    1aba:	60 ff       	sbrs	r22, 0
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <__fp_round+0x20>
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	08 95       	ret

00001ac8 <__fp_split3>:
    1ac8:	57 fd       	sbrc	r21, 7
    1aca:	90 58       	subi	r25, 0x80	; 128
    1acc:	44 0f       	add	r20, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	59 f0       	breq	.+22     	; 0x1ae8 <__fp_splitA+0x10>
    1ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ad4:	71 f0       	breq	.+28     	; 0x1af2 <__fp_splitA+0x1a>
    1ad6:	47 95       	ror	r20

00001ad8 <__fp_splitA>:
    1ad8:	88 0f       	add	r24, r24
    1ada:	97 fb       	bst	r25, 7
    1adc:	99 1f       	adc	r25, r25
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <__fp_splitA+0x20>
    1ae0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <__fp_splitA+0x2a>
    1ae4:	87 95       	ror	r24
    1ae6:	08 95       	ret
    1ae8:	12 16       	cp	r1, r18
    1aea:	13 06       	cpc	r1, r19
    1aec:	14 06       	cpc	r1, r20
    1aee:	55 1f       	adc	r21, r21
    1af0:	f2 cf       	rjmp	.-28     	; 0x1ad6 <__fp_split3+0xe>
    1af2:	46 95       	lsr	r20
    1af4:	f1 df       	rcall	.-30     	; 0x1ad8 <__fp_splitA>
    1af6:	08 c0       	rjmp	.+16     	; 0x1b08 <__fp_splitA+0x30>
    1af8:	16 16       	cp	r1, r22
    1afa:	17 06       	cpc	r1, r23
    1afc:	18 06       	cpc	r1, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	f1 cf       	rjmp	.-30     	; 0x1ae4 <__fp_splitA+0xc>
    1b02:	86 95       	lsr	r24
    1b04:	71 05       	cpc	r23, r1
    1b06:	61 05       	cpc	r22, r1
    1b08:	08 94       	sec
    1b0a:	08 95       	ret

00001b0c <__fp_zero>:
    1b0c:	e8 94       	clt

00001b0e <__fp_szero>:
    1b0e:	bb 27       	eor	r27, r27
    1b10:	66 27       	eor	r22, r22
    1b12:	77 27       	eor	r23, r23
    1b14:	cb 01       	movw	r24, r22
    1b16:	97 f9       	bld	r25, 7
    1b18:	08 95       	ret

00001b1a <__gesf2>:
    1b1a:	8a df       	rcall	.-236    	; 0x1a30 <__fp_cmp>
    1b1c:	08 f4       	brcc	.+2      	; 0x1b20 <__gesf2+0x6>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	08 95       	ret

00001b22 <__mulsf3>:
    1b22:	0b d0       	rcall	.+22     	; 0x1b3a <__mulsf3x>
    1b24:	c0 cf       	rjmp	.-128    	; 0x1aa6 <__fp_round>
    1b26:	b1 df       	rcall	.-158    	; 0x1a8a <__fp_pscA>
    1b28:	28 f0       	brcs	.+10     	; 0x1b34 <__mulsf3+0x12>
    1b2a:	b6 df       	rcall	.-148    	; 0x1a98 <__fp_pscB>
    1b2c:	18 f0       	brcs	.+6      	; 0x1b34 <__mulsf3+0x12>
    1b2e:	95 23       	and	r25, r21
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <__mulsf3+0x12>
    1b32:	a2 cf       	rjmp	.-188    	; 0x1a78 <__fp_inf>
    1b34:	a7 cf       	rjmp	.-178    	; 0x1a84 <__fp_nan>
    1b36:	11 24       	eor	r1, r1
    1b38:	ea cf       	rjmp	.-44     	; 0x1b0e <__fp_szero>

00001b3a <__mulsf3x>:
    1b3a:	c6 df       	rcall	.-116    	; 0x1ac8 <__fp_split3>
    1b3c:	a0 f3       	brcs	.-24     	; 0x1b26 <__mulsf3+0x4>

00001b3e <__mulsf3_pse>:
    1b3e:	95 9f       	mul	r25, r21
    1b40:	d1 f3       	breq	.-12     	; 0x1b36 <__mulsf3+0x14>
    1b42:	95 0f       	add	r25, r21
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	55 1f       	adc	r21, r21
    1b48:	62 9f       	mul	r22, r18
    1b4a:	f0 01       	movw	r30, r0
    1b4c:	72 9f       	mul	r23, r18
    1b4e:	bb 27       	eor	r27, r27
    1b50:	f0 0d       	add	r31, r0
    1b52:	b1 1d       	adc	r27, r1
    1b54:	63 9f       	mul	r22, r19
    1b56:	aa 27       	eor	r26, r26
    1b58:	f0 0d       	add	r31, r0
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	aa 1f       	adc	r26, r26
    1b5e:	64 9f       	mul	r22, r20
    1b60:	66 27       	eor	r22, r22
    1b62:	b0 0d       	add	r27, r0
    1b64:	a1 1d       	adc	r26, r1
    1b66:	66 1f       	adc	r22, r22
    1b68:	82 9f       	mul	r24, r18
    1b6a:	22 27       	eor	r18, r18
    1b6c:	b0 0d       	add	r27, r0
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	62 1f       	adc	r22, r18
    1b72:	73 9f       	mul	r23, r19
    1b74:	b0 0d       	add	r27, r0
    1b76:	a1 1d       	adc	r26, r1
    1b78:	62 1f       	adc	r22, r18
    1b7a:	83 9f       	mul	r24, r19
    1b7c:	a0 0d       	add	r26, r0
    1b7e:	61 1d       	adc	r22, r1
    1b80:	22 1f       	adc	r18, r18
    1b82:	74 9f       	mul	r23, r20
    1b84:	33 27       	eor	r19, r19
    1b86:	a0 0d       	add	r26, r0
    1b88:	61 1d       	adc	r22, r1
    1b8a:	23 1f       	adc	r18, r19
    1b8c:	84 9f       	mul	r24, r20
    1b8e:	60 0d       	add	r22, r0
    1b90:	21 1d       	adc	r18, r1
    1b92:	82 2f       	mov	r24, r18
    1b94:	76 2f       	mov	r23, r22
    1b96:	6a 2f       	mov	r22, r26
    1b98:	11 24       	eor	r1, r1
    1b9a:	9f 57       	subi	r25, 0x7F	; 127
    1b9c:	50 40       	sbci	r21, 0x00	; 0
    1b9e:	8a f0       	brmi	.+34     	; 0x1bc2 <__mulsf3_pse+0x84>
    1ba0:	e1 f0       	breq	.+56     	; 0x1bda <__mulsf3_pse+0x9c>
    1ba2:	88 23       	and	r24, r24
    1ba4:	4a f0       	brmi	.+18     	; 0x1bb8 <__mulsf3_pse+0x7a>
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	bb 1f       	adc	r27, r27
    1bac:	66 1f       	adc	r22, r22
    1bae:	77 1f       	adc	r23, r23
    1bb0:	88 1f       	adc	r24, r24
    1bb2:	91 50       	subi	r25, 0x01	; 1
    1bb4:	50 40       	sbci	r21, 0x00	; 0
    1bb6:	a9 f7       	brne	.-22     	; 0x1ba2 <__mulsf3_pse+0x64>
    1bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bba:	51 05       	cpc	r21, r1
    1bbc:	70 f0       	brcs	.+28     	; 0x1bda <__mulsf3_pse+0x9c>
    1bbe:	5c cf       	rjmp	.-328    	; 0x1a78 <__fp_inf>
    1bc0:	a6 cf       	rjmp	.-180    	; 0x1b0e <__fp_szero>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	ec f3       	brlt	.-6      	; 0x1bc0 <__mulsf3_pse+0x82>
    1bc6:	98 3e       	cpi	r25, 0xE8	; 232
    1bc8:	dc f3       	brlt	.-10     	; 0x1bc0 <__mulsf3_pse+0x82>
    1bca:	86 95       	lsr	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f7 95       	ror	r31
    1bd4:	e7 95       	ror	r30
    1bd6:	9f 5f       	subi	r25, 0xFF	; 255
    1bd8:	c1 f7       	brne	.-16     	; 0x1bca <__mulsf3_pse+0x8c>
    1bda:	fe 2b       	or	r31, r30
    1bdc:	88 0f       	add	r24, r24
    1bde:	91 1d       	adc	r25, r1
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret
    1be8:	11 f4       	brne	.+4      	; 0x1bee <__mulsf3_pse+0xb0>
    1bea:	0e f4       	brtc	.+2      	; 0x1bee <__mulsf3_pse+0xb0>
    1bec:	4b cf       	rjmp	.-362    	; 0x1a84 <__fp_nan>
    1bee:	3e c0       	rjmp	.+124    	; 0x1c6c <__fp_mpack>

00001bf0 <sqrt>:
    1bf0:	73 df       	rcall	.-282    	; 0x1ad8 <__fp_splitA>
    1bf2:	d0 f3       	brcs	.-12     	; 0x1be8 <__mulsf3_pse+0xaa>
    1bf4:	99 23       	and	r25, r25
    1bf6:	d9 f3       	breq	.-10     	; 0x1bee <__mulsf3_pse+0xb0>
    1bf8:	ce f3       	brts	.-14     	; 0x1bec <__mulsf3_pse+0xae>
    1bfa:	9f 57       	subi	r25, 0x7F	; 127
    1bfc:	55 0b       	sbc	r21, r21
    1bfe:	87 ff       	sbrs	r24, 7
    1c00:	43 d0       	rcall	.+134    	; 0x1c88 <__fp_norm2>
    1c02:	00 24       	eor	r0, r0
    1c04:	a0 e6       	ldi	r26, 0x60	; 96
    1c06:	40 ea       	ldi	r20, 0xA0	; 160
    1c08:	90 01       	movw	r18, r0
    1c0a:	80 58       	subi	r24, 0x80	; 128
    1c0c:	56 95       	lsr	r21
    1c0e:	97 95       	ror	r25
    1c10:	28 f4       	brcc	.+10     	; 0x1c1c <sqrt+0x2c>
    1c12:	80 5c       	subi	r24, 0xC0	; 192
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	20 f0       	brcs	.+8      	; 0x1c24 <sqrt+0x34>
    1c1c:	26 17       	cp	r18, r22
    1c1e:	37 07       	cpc	r19, r23
    1c20:	48 07       	cpc	r20, r24
    1c22:	30 f4       	brcc	.+12     	; 0x1c30 <sqrt+0x40>
    1c24:	62 1b       	sub	r22, r18
    1c26:	73 0b       	sbc	r23, r19
    1c28:	84 0b       	sbc	r24, r20
    1c2a:	20 29       	or	r18, r0
    1c2c:	31 29       	or	r19, r1
    1c2e:	4a 2b       	or	r20, r26
    1c30:	a6 95       	lsr	r26
    1c32:	17 94       	ror	r1
    1c34:	07 94       	ror	r0
    1c36:	20 25       	eor	r18, r0
    1c38:	31 25       	eor	r19, r1
    1c3a:	4a 27       	eor	r20, r26
    1c3c:	58 f7       	brcc	.-42     	; 0x1c14 <sqrt+0x24>
    1c3e:	66 0f       	add	r22, r22
    1c40:	77 1f       	adc	r23, r23
    1c42:	88 1f       	adc	r24, r24
    1c44:	20 f0       	brcs	.+8      	; 0x1c4e <sqrt+0x5e>
    1c46:	26 17       	cp	r18, r22
    1c48:	37 07       	cpc	r19, r23
    1c4a:	48 07       	cpc	r20, r24
    1c4c:	30 f4       	brcc	.+12     	; 0x1c5a <sqrt+0x6a>
    1c4e:	62 0b       	sbc	r22, r18
    1c50:	73 0b       	sbc	r23, r19
    1c52:	84 0b       	sbc	r24, r20
    1c54:	20 0d       	add	r18, r0
    1c56:	31 1d       	adc	r19, r1
    1c58:	41 1d       	adc	r20, r1
    1c5a:	a0 95       	com	r26
    1c5c:	81 f7       	brne	.-32     	; 0x1c3e <sqrt+0x4e>
    1c5e:	b9 01       	movw	r22, r18
    1c60:	84 2f       	mov	r24, r20
    1c62:	91 58       	subi	r25, 0x81	; 129
    1c64:	88 0f       	add	r24, r24
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	08 95       	ret

00001c6c <__fp_mpack>:
    1c6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6e:	31 f0       	breq	.+12     	; 0x1c7c <__fp_mpack_finite+0xc>

00001c70 <__fp_mpack_finite>:
    1c70:	91 50       	subi	r25, 0x01	; 1
    1c72:	20 f4       	brcc	.+8      	; 0x1c7c <__fp_mpack_finite+0xc>
    1c74:	87 95       	ror	r24
    1c76:	77 95       	ror	r23
    1c78:	67 95       	ror	r22
    1c7a:	b7 95       	ror	r27
    1c7c:	88 0f       	add	r24, r24
    1c7e:	91 1d       	adc	r25, r1
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	97 f9       	bld	r25, 7
    1c86:	08 95       	ret

00001c88 <__fp_norm2>:
    1c88:	91 50       	subi	r25, 0x01	; 1
    1c8a:	50 40       	sbci	r21, 0x00	; 0
    1c8c:	66 0f       	add	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	d2 f7       	brpl	.-12     	; 0x1c88 <__fp_norm2>
    1c94:	08 95       	ret

00001c96 <_exit>:
    1c96:	f8 94       	cli

00001c98 <__stop_program>:
    1c98:	ff cf       	rjmp	.-2      	; 0x1c98 <__stop_program>
